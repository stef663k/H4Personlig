
Timer_Interrupt_C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000282  00000316  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000282  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800114  00800114  0000032a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000032a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000035c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000af3  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000098e  00000000  00000000  00000eef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ca  00000000  00000000  0000187d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000110  00000000  00000000  00001c48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000056e  00000000  00000000  00001d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001e4  00000000  00000000  000022c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000024aa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	59 c0       	rjmp	.+178    	; 0xb4 <__ctors_end>
   2:	00 00       	nop
   4:	72 c0       	rjmp	.+228    	; 0xea <__bad_interrupt>
   6:	00 00       	nop
   8:	70 c0       	rjmp	.+224    	; 0xea <__bad_interrupt>
   a:	00 00       	nop
   c:	6e c0       	rjmp	.+220    	; 0xea <__bad_interrupt>
   e:	00 00       	nop
  10:	6c c0       	rjmp	.+216    	; 0xea <__bad_interrupt>
  12:	00 00       	nop
  14:	6a c0       	rjmp	.+212    	; 0xea <__bad_interrupt>
  16:	00 00       	nop
  18:	68 c0       	rjmp	.+208    	; 0xea <__bad_interrupt>
  1a:	00 00       	nop
  1c:	66 c0       	rjmp	.+204    	; 0xea <__bad_interrupt>
  1e:	00 00       	nop
  20:	64 c0       	rjmp	.+200    	; 0xea <__bad_interrupt>
  22:	00 00       	nop
  24:	62 c0       	rjmp	.+196    	; 0xea <__bad_interrupt>
  26:	00 00       	nop
  28:	60 c0       	rjmp	.+192    	; 0xea <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5e c0       	rjmp	.+188    	; 0xea <__bad_interrupt>
  2e:	00 00       	nop
  30:	5c c0       	rjmp	.+184    	; 0xea <__bad_interrupt>
  32:	00 00       	nop
  34:	5a c0       	rjmp	.+180    	; 0xea <__bad_interrupt>
  36:	00 00       	nop
  38:	58 c0       	rjmp	.+176    	; 0xea <__bad_interrupt>
  3a:	00 00       	nop
  3c:	56 c0       	rjmp	.+172    	; 0xea <__bad_interrupt>
  3e:	00 00       	nop
  40:	dc c0       	rjmp	.+440    	; 0x1fa <__vector_16>
  42:	00 00       	nop
  44:	52 c0       	rjmp	.+164    	; 0xea <__bad_interrupt>
  46:	00 00       	nop
  48:	50 c0       	rjmp	.+160    	; 0xea <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4e c0       	rjmp	.+156    	; 0xea <__bad_interrupt>
  4e:	00 00       	nop
  50:	4c c0       	rjmp	.+152    	; 0xea <__bad_interrupt>
  52:	00 00       	nop
  54:	4a c0       	rjmp	.+148    	; 0xea <__bad_interrupt>
  56:	00 00       	nop
  58:	48 c0       	rjmp	.+144    	; 0xea <__bad_interrupt>
  5a:	00 00       	nop
  5c:	46 c0       	rjmp	.+140    	; 0xea <__bad_interrupt>
  5e:	00 00       	nop
  60:	44 c0       	rjmp	.+136    	; 0xea <__bad_interrupt>
  62:	00 00       	nop
  64:	42 c0       	rjmp	.+132    	; 0xea <__bad_interrupt>
  66:	00 00       	nop
  68:	40 c0       	rjmp	.+128    	; 0xea <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3e c0       	rjmp	.+124    	; 0xea <__bad_interrupt>
  6e:	00 00       	nop
  70:	3c c0       	rjmp	.+120    	; 0xea <__bad_interrupt>
  72:	00 00       	nop
  74:	3a c0       	rjmp	.+116    	; 0xea <__bad_interrupt>
  76:	00 00       	nop
  78:	38 c0       	rjmp	.+112    	; 0xea <__bad_interrupt>
  7a:	00 00       	nop
  7c:	36 c0       	rjmp	.+108    	; 0xea <__bad_interrupt>
  7e:	00 00       	nop
  80:	34 c0       	rjmp	.+104    	; 0xea <__bad_interrupt>
  82:	00 00       	nop
  84:	32 c0       	rjmp	.+100    	; 0xea <__bad_interrupt>
  86:	00 00       	nop
  88:	30 c0       	rjmp	.+96     	; 0xea <__bad_interrupt>
  8a:	00 00       	nop
  8c:	2e c0       	rjmp	.+92     	; 0xea <__bad_interrupt>
  8e:	00 00       	nop
  90:	2c c0       	rjmp	.+88     	; 0xea <__bad_interrupt>
  92:	00 00       	nop
  94:	2a c0       	rjmp	.+84     	; 0xea <__bad_interrupt>
  96:	00 00       	nop
  98:	28 c0       	rjmp	.+80     	; 0xea <__bad_interrupt>
  9a:	00 00       	nop
  9c:	26 c0       	rjmp	.+76     	; 0xea <__bad_interrupt>
  9e:	00 00       	nop
  a0:	24 c0       	rjmp	.+72     	; 0xea <__bad_interrupt>
  a2:	00 00       	nop
  a4:	22 c0       	rjmp	.+68     	; 0xea <__bad_interrupt>
  a6:	00 00       	nop
  a8:	20 c0       	rjmp	.+64     	; 0xea <__bad_interrupt>
  aa:	00 00       	nop
  ac:	1e c0       	rjmp	.+60     	; 0xea <__bad_interrupt>
  ae:	00 00       	nop
  b0:	1c c0       	rjmp	.+56     	; 0xea <__bad_interrupt>
	...

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e2 e8       	ldi	r30, 0x82	; 130
  c8:	f2 e0       	ldi	r31, 0x02	; 2
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a4 31       	cpi	r26, 0x14	; 20
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a4 e1       	ldi	r26, 0x14	; 20
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a8 31       	cpi	r26, 0x18	; 24
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	02 d0       	rcall	.+4      	; 0xec <main>
  e8:	ca c0       	rjmp	.+404    	; 0x27e <_exit>

000000ea <__bad_interrupt>:
  ea:	8a cf       	rjmp	.-236    	; 0x0 <__vectors>

000000ec <main>:
#include "Timer.h"
#include "Timer0.h"


int main(void)
{
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	cd b7       	in	r28, 0x3d	; 61
  f2:	de b7       	in	r29, 0x3e	; 62
	DDRB = 0xFF;
  f4:	84 e2       	ldi	r24, 0x24	; 36
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	2f ef       	ldi	r18, 0xFF	; 255
  fa:	fc 01       	movw	r30, r24
  fc:	20 83       	st	Z, r18
	PORTB = 0;
  fe:	85 e2       	ldi	r24, 0x25	; 37
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	fc 01       	movw	r30, r24
 104:	10 82       	st	Z, r1
	
	Setup_Timer0_Overflow_Interrupt(VariableValue1SecValue8Bit);
 106:	83 ea       	ldi	r24, 0xA3	; 163
 108:	9e e1       	ldi	r25, 0x1E	; 30
 10a:	3a d0       	rcall	.+116    	; 0x180 <Setup_Timer0_Overflow_Interrupt>
	Enable_Timer0_Overflow_Interrupt();
 10c:	65 d0       	rcall	.+202    	; 0x1d8 <Enable_Timer0_Overflow_Interrupt>
 10e:	78 94       	sei
	sei();
 110:	ff cf       	rjmp	.-2      	; 0x110 <main+0x24>

00000112 <GetBitValuesForClockSelect>:
	
    /* Replace with your application code */
    while (1) 
    {
    }
 112:	cf 93       	push	r28
 }

 void Disable_Timer0_Overflow_Interrupt()
 {
	 TIMSK0 &= ~(1 << TOIE0);   // Disable timer0 overflow interrupt(TOIE0)
 }
 114:	df 93       	push	r29
 116:	00 d0       	rcall	.+0      	; 0x118 <GetBitValuesForClockSelect+0x6>
 118:	1f 92       	push	r1
 11a:	cd b7       	in	r28, 0x3d	; 61
 11c:	de b7       	in	r29, 0x3e	; 62
 11e:	9b 83       	std	Y+3, r25	; 0x03
 120:	8a 83       	std	Y+2, r24	; 0x02
 122:	19 82       	std	Y+1, r1	; 0x01
 124:	89 81       	ldd	r24, Y+1	; 0x01
 126:	88 2f       	mov	r24, r24
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	88 0f       	add	r24, r24
 130:	99 1f       	adc	r25, r25
 132:	80 50       	subi	r24, 0x00	; 0
 134:	9f 4f       	sbci	r25, 0xFF	; 255
 136:	fc 01       	movw	r30, r24
 138:	20 81       	ld	r18, Z
 13a:	31 81       	ldd	r19, Z+1	; 0x01
 13c:	8a 81       	ldd	r24, Y+2	; 0x02
 13e:	9b 81       	ldd	r25, Y+3	; 0x03
 140:	28 17       	cp	r18, r24
 142:	39 07       	cpc	r19, r25
 144:	69 f4       	brne	.+26     	; 0x160 <GetBitValuesForClockSelect+0x4e>
 146:	89 81       	ldd	r24, Y+1	; 0x01
 148:	88 2f       	mov	r24, r24
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	88 0f       	add	r24, r24
 152:	99 1f       	adc	r25, r25
 154:	8e 5f       	subi	r24, 0xFE	; 254
 156:	9e 4f       	sbci	r25, 0xFE	; 254
 158:	fc 01       	movw	r30, r24
 15a:	80 81       	ld	r24, Z
 15c:	91 81       	ldd	r25, Z+1	; 0x01
 15e:	0a c0       	rjmp	.+20     	; 0x174 <GetBitValuesForClockSelect+0x62>
 160:	89 81       	ldd	r24, Y+1	; 0x01
 162:	8f 5f       	subi	r24, 0xFF	; 255
 164:	89 83       	std	Y+1, r24	; 0x01
 166:	89 81       	ldd	r24, Y+1	; 0x01
 168:	85 30       	cpi	r24, 0x05	; 5
 16a:	e0 f2       	brcs	.-72     	; 0x124 <GetBitValuesForClockSelect+0x12>
 16c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 170:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 174:	0f 90       	pop	r0
 176:	0f 90       	pop	r0
 178:	0f 90       	pop	r0
 17a:	df 91       	pop	r29
 17c:	cf 91       	pop	r28
 17e:	08 95       	ret

00000180 <Setup_Timer0_Overflow_Interrupt>:
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
 184:	00 d0       	rcall	.+0      	; 0x186 <Setup_Timer0_Overflow_Interrupt+0x6>
 186:	cd b7       	in	r28, 0x3d	; 61
 188:	de b7       	in	r29, 0x3e	; 62
 18a:	9a 83       	std	Y+2, r25	; 0x02
 18c:	89 83       	std	Y+1, r24	; 0x01
 18e:	86 e4       	ldi	r24, 0x46	; 70
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	fc 01       	movw	r30, r24
 194:	10 82       	st	Z, r1
 196:	84 e4       	ldi	r24, 0x44	; 68
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	fc 01       	movw	r30, r24
 19c:	10 82       	st	Z, r1
 19e:	85 e3       	ldi	r24, 0x35	; 53
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	fc 01       	movw	r30, r24
 1a4:	10 82       	st	Z, r1
 1a6:	88 e0       	ldi	r24, 0x08	; 8
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	b3 df       	rcall	.-154    	; 0x112 <GetBitValuesForClockSelect>
 1ac:	48 2f       	mov	r20, r24
 1ae:	85 e4       	ldi	r24, 0x45	; 69
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	25 e4       	ldi	r18, 0x45	; 69
 1b4:	30 e0       	ldi	r19, 0x00	; 0
 1b6:	f9 01       	movw	r30, r18
 1b8:	20 81       	ld	r18, Z
 1ba:	24 2b       	or	r18, r20
 1bc:	fc 01       	movw	r30, r24
 1be:	20 83       	st	Z, r18
 1c0:	89 81       	ldd	r24, Y+1	; 0x01
 1c2:	9a 81       	ldd	r25, Y+2	; 0x02
 1c4:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <__data_end+0x1>
 1c8:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
 1cc:	00 00       	nop
 1ce:	0f 90       	pop	r0
 1d0:	0f 90       	pop	r0
 1d2:	df 91       	pop	r29
 1d4:	cf 91       	pop	r28
 1d6:	08 95       	ret

000001d8 <Enable_Timer0_Overflow_Interrupt>:
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
 1dc:	cd b7       	in	r28, 0x3d	; 61
 1de:	de b7       	in	r29, 0x3e	; 62
 1e0:	8e e6       	ldi	r24, 0x6E	; 110
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	2e e6       	ldi	r18, 0x6E	; 110
 1e6:	30 e0       	ldi	r19, 0x00	; 0
 1e8:	f9 01       	movw	r30, r18
 1ea:	20 81       	ld	r18, Z
 1ec:	21 60       	ori	r18, 0x01	; 1
 1ee:	fc 01       	movw	r30, r24
 1f0:	20 83       	st	Z, r18
 1f2:	00 00       	nop
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <__vector_16>:

 ISR(TIMER0_OVF_vect)
 {
 1fa:	1f 92       	push	r1
 1fc:	0f 92       	push	r0
 1fe:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 202:	0f 92       	push	r0
 204:	11 24       	eor	r1, r1
 206:	2f 93       	push	r18
 208:	3f 93       	push	r19
 20a:	8f 93       	push	r24
 20c:	9f 93       	push	r25
 20e:	ef 93       	push	r30
 210:	ff 93       	push	r31
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
 216:	cd b7       	in	r28, 0x3d	; 61
 218:	de b7       	in	r29, 0x3e	; 62
	Timer0OverflowCounter++;
 21a:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <Timer0OverflowCounter>
 21e:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <Timer0OverflowCounter+0x1>
 222:	01 96       	adiw	r24, 0x01	; 1
 224:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <Timer0OverflowCounter+0x1>
 228:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <Timer0OverflowCounter>
	if (Timer0OverflowCounter >= Timer0OverflowValue)
 22c:	20 91 16 01 	lds	r18, 0x0116	; 0x800116 <Timer0OverflowCounter>
 230:	30 91 17 01 	lds	r19, 0x0117	; 0x800117 <Timer0OverflowCounter+0x1>
 234:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
 238:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <__data_end+0x1>
 23c:	28 17       	cp	r18, r24
 23e:	39 07       	cpc	r19, r25
 240:	70 f0       	brcs	.+28     	; 0x25e <__vector_16+0x64>
	{
		PORTB ^= (1 << RedLedBit);
 242:	85 e2       	ldi	r24, 0x25	; 37
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	25 e2       	ldi	r18, 0x25	; 37
 248:	30 e0       	ldi	r19, 0x00	; 0
 24a:	f9 01       	movw	r30, r18
 24c:	30 81       	ld	r19, Z
 24e:	24 e0       	ldi	r18, 0x04	; 4
 250:	23 27       	eor	r18, r19
 252:	fc 01       	movw	r30, r24
 254:	20 83       	st	Z, r18
		Timer0OverflowCounter = 0;
 256:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <Timer0OverflowCounter+0x1>
 25a:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <Timer0OverflowCounter>
	}
	sei();
 25e:	78 94       	sei
 260:	00 00       	nop
 262:	df 91       	pop	r29
 264:	cf 91       	pop	r28
 266:	ff 91       	pop	r31
 268:	ef 91       	pop	r30
 26a:	9f 91       	pop	r25
 26c:	8f 91       	pop	r24
 26e:	3f 91       	pop	r19
 270:	2f 91       	pop	r18
 272:	0f 90       	pop	r0
 274:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
 278:	0f 90       	pop	r0
 27a:	1f 90       	pop	r1
 27c:	18 95       	reti

0000027e <_exit>:
 27e:	f8 94       	cli

00000280 <__stop_program>:
 280:	ff cf       	rjmp	.-2      	; 0x280 <__stop_program>
