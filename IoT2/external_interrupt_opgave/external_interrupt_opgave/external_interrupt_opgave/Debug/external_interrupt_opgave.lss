
external_interrupt_opgave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000023c  00800100  00000904  00000998  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000904  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  0080033c  0080033c  00000bd4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000bd4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016ed  00000000  00000000  00000d68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d85  00000000  00000000  00002455  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009e7  00000000  00000000  000031da  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000314  00000000  00000000  00003bc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000962  00000000  00000000  00003ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000810  00000000  00000000  0000483a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  0000504a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__vector_1>
   8:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__vector_2>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__vector_28>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	13 e0       	ldi	r17, 0x03	; 3
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e4 e0       	ldi	r30, 0x04	; 4
  c8:	f9 e0       	ldi	r31, 0x09	; 9
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	ac 33       	cpi	r26, 0x3C	; 60
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	23 e0       	ldi	r18, 0x03	; 3
  d8:	ac e3       	ldi	r26, 0x3C	; 60
  da:	b3 e0       	ldi	r27, 0x03	; 3
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	ab 34       	cpi	r26, 0x4B	; 75
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 79 00 	call	0xf2	; 0xf2 <main>
  ea:	0c 94 80 04 	jmp	0x900	; 0x900 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <main>:
	UART_PrintHex(ucsr1a_value);
	UART_PrintString("\n");
}

int main(void) {
	RS232Init();
  f2:	0e 94 58 02 	call	0x4b0	; 0x4b0 <RS232Init>
	Enable_UART_Receive_Interrupt();
  f6:	0e 94 70 02 	call	0x4e0	; 0x4e0 <Enable_UART_Receive_Interrupt>
	sei();  // Enable global interrupts
  fa:	78 94       	sei
  fc:	ff cf       	rjmp	.-2      	; 0xfc <main+0xa>

000000fe <__vector_28>:
	}

	return 0;
}

ISR(USART1_RX_vect) {
  fe:	1f 92       	push	r1
 100:	0f 92       	push	r0
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	0f 92       	push	r0
 106:	11 24       	eor	r1, r1
 108:	2f 93       	push	r18
 10a:	3f 93       	push	r19
 10c:	4f 93       	push	r20
 10e:	5f 93       	push	r21
 110:	6f 93       	push	r22
 112:	7f 93       	push	r23
 114:	8f 93       	push	r24
 116:	9f 93       	push	r25
 118:	af 93       	push	r26
 11a:	bf 93       	push	r27
 11c:	ef 93       	push	r30
 11e:	ff 93       	push	r31
	if (UCSR1A & ((1 << FE1) | (1 << DOR1))) {
 120:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
 124:	88 71       	andi	r24, 0x18	; 24
 126:	c9 f0       	breq	.+50     	; 0x15a <__vector_28+0x5c>
		UART_PrintString("UART Error: ");
 128:	83 e3       	ldi	r24, 0x33	; 51
 12a:	91 e0       	ldi	r25, 0x01	; 1
 12c:	0e 94 76 02 	call	0x4ec	; 0x4ec <UART_PrintString>
		if (UCSR1A & (1 << FE1)) {
 130:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
 134:	84 ff       	sbrs	r24, 4
 136:	04 c0       	rjmp	.+8      	; 0x140 <__vector_28+0x42>
			UART_PrintString("Framing Error ");
 138:	80 e4       	ldi	r24, 0x40	; 64
 13a:	91 e0       	ldi	r25, 0x01	; 1
 13c:	0e 94 76 02 	call	0x4ec	; 0x4ec <UART_PrintString>
		}
		if (UCSR1A & (1 << DOR1)) {
 140:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
 144:	83 ff       	sbrs	r24, 3
 146:	04 c0       	rjmp	.+8      	; 0x150 <__vector_28+0x52>
			UART_PrintString("Data Overrun ");
 148:	8f e4       	ldi	r24, 0x4F	; 79
 14a:	91 e0       	ldi	r25, 0x01	; 1
 14c:	0e 94 76 02 	call	0x4ec	; 0x4ec <UART_PrintString>
		}
		UART_PrintString("\n");
 150:	89 e7       	ldi	r24, 0x79	; 121
 152:	92 e0       	ldi	r25, 0x02	; 2
 154:	0e 94 76 02 	call	0x4ec	; 0x4ec <UART_PrintString>
 158:	08 c0       	rjmp	.+16     	; 0x16a <__vector_28+0x6c>
		} else {
		char receivedByte = UDR1;
 15a:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
		handle_state_machine(&currentState, receivedByte, &address);
 15e:	4c e3       	ldi	r20, 0x3C	; 60
 160:	53 e0       	ldi	r21, 0x03	; 3
 162:	8d e3       	ldi	r24, 0x3D	; 61
 164:	93 e0       	ldi	r25, 0x03	; 3
 166:	0e 94 32 01 	call	0x264	; 0x264 <handle_state_machine>
	}
}
 16a:	ff 91       	pop	r31
 16c:	ef 91       	pop	r30
 16e:	bf 91       	pop	r27
 170:	af 91       	pop	r26
 172:	9f 91       	pop	r25
 174:	8f 91       	pop	r24
 176:	7f 91       	pop	r23
 178:	6f 91       	pop	r22
 17a:	5f 91       	pop	r21
 17c:	4f 91       	pop	r20
 17e:	3f 91       	pop	r19
 180:	2f 91       	pop	r18
 182:	0f 90       	pop	r0
 184:	0f be       	out	0x3f, r0	; 63
 186:	0f 90       	pop	r0
 188:	1f 90       	pop	r1
 18a:	18 95       	reti

0000018c <NoCallbackIsPerformedOnExternalInterrupt>:
	}
	else
	{
		return (false);
	}
}
 18c:	08 95       	ret

0000018e <__vector_1>:

ISR(INT0_vect)
{
 18e:	1f 92       	push	r1
 190:	0f 92       	push	r0
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	0f 92       	push	r0
 196:	11 24       	eor	r1, r1
 198:	2f 93       	push	r18
 19a:	3f 93       	push	r19
 19c:	4f 93       	push	r20
 19e:	5f 93       	push	r21
 1a0:	6f 93       	push	r22
 1a2:	7f 93       	push	r23
 1a4:	8f 93       	push	r24
 1a6:	9f 93       	push	r25
 1a8:	af 93       	push	r26
 1aa:	bf 93       	push	r27
 1ac:	ef 93       	push	r30
 1ae:	ff 93       	push	r31
	ExternalInterruptCallbackStructArray[0].NumberOfExternalInterruptsOnPin++;
 1b0:	a0 e0       	ldi	r26, 0x00	; 0
 1b2:	b1 e0       	ldi	r27, 0x01	; 1
 1b4:	12 96       	adiw	r26, 0x02	; 2
 1b6:	8d 91       	ld	r24, X+
 1b8:	9c 91       	ld	r25, X
 1ba:	13 97       	sbiw	r26, 0x03	; 3
 1bc:	01 96       	adiw	r24, 0x01	; 1
 1be:	13 96       	adiw	r26, 0x03	; 3
 1c0:	9c 93       	st	X, r25
 1c2:	8e 93       	st	-X, r24
 1c4:	12 97       	sbiw	r26, 0x02	; 2
	ExternalInterruptCallbackStructArray[0].ThisFunctionPointer(ExternalInterruptCallbackStructArray[0].NumberOfExternalInterruptsOnPin); 	
 1c6:	ed 91       	ld	r30, X+
 1c8:	fc 91       	ld	r31, X
 1ca:	11 97       	sbiw	r26, 0x01	; 1
 1cc:	12 96       	adiw	r26, 0x02	; 2
 1ce:	8d 91       	ld	r24, X+
 1d0:	9c 91       	ld	r25, X
 1d2:	13 97       	sbiw	r26, 0x03	; 3
 1d4:	09 95       	icall
}
 1d6:	ff 91       	pop	r31
 1d8:	ef 91       	pop	r30
 1da:	bf 91       	pop	r27
 1dc:	af 91       	pop	r26
 1de:	9f 91       	pop	r25
 1e0:	8f 91       	pop	r24
 1e2:	7f 91       	pop	r23
 1e4:	6f 91       	pop	r22
 1e6:	5f 91       	pop	r21
 1e8:	4f 91       	pop	r20
 1ea:	3f 91       	pop	r19
 1ec:	2f 91       	pop	r18
 1ee:	0f 90       	pop	r0
 1f0:	0f be       	out	0x3f, r0	; 63
 1f2:	0f 90       	pop	r0
 1f4:	1f 90       	pop	r1
 1f6:	18 95       	reti

000001f8 <__vector_2>:

ISR(INT1_vect)
{
 1f8:	1f 92       	push	r1
 1fa:	0f 92       	push	r0
 1fc:	0f b6       	in	r0, 0x3f	; 63
 1fe:	0f 92       	push	r0
 200:	11 24       	eor	r1, r1
 202:	2f 93       	push	r18
 204:	3f 93       	push	r19
 206:	4f 93       	push	r20
 208:	5f 93       	push	r21
 20a:	6f 93       	push	r22
 20c:	7f 93       	push	r23
 20e:	8f 93       	push	r24
 210:	9f 93       	push	r25
 212:	af 93       	push	r26
 214:	bf 93       	push	r27
 216:	ef 93       	push	r30
 218:	ff 93       	push	r31
	ExternalInterruptCallbackStructArray[1].NumberOfExternalInterruptsOnPin++;
 21a:	a0 e0       	ldi	r26, 0x00	; 0
 21c:	b1 e0       	ldi	r27, 0x01	; 1
 21e:	16 96       	adiw	r26, 0x06	; 6
 220:	8d 91       	ld	r24, X+
 222:	9c 91       	ld	r25, X
 224:	17 97       	sbiw	r26, 0x07	; 7
 226:	01 96       	adiw	r24, 0x01	; 1
 228:	17 96       	adiw	r26, 0x07	; 7
 22a:	9c 93       	st	X, r25
 22c:	8e 93       	st	-X, r24
 22e:	16 97       	sbiw	r26, 0x06	; 6
	ExternalInterruptCallbackStructArray[1].ThisFunctionPointer(ExternalInterruptCallbackStructArray[1].NumberOfExternalInterruptsOnPin);
 230:	14 96       	adiw	r26, 0x04	; 4
 232:	ed 91       	ld	r30, X+
 234:	fc 91       	ld	r31, X
 236:	15 97       	sbiw	r26, 0x05	; 5
 238:	16 96       	adiw	r26, 0x06	; 6
 23a:	8d 91       	ld	r24, X+
 23c:	9c 91       	ld	r25, X
 23e:	17 97       	sbiw	r26, 0x07	; 7
 240:	09 95       	icall
}
 242:	ff 91       	pop	r31
 244:	ef 91       	pop	r30
 246:	bf 91       	pop	r27
 248:	af 91       	pop	r26
 24a:	9f 91       	pop	r25
 24c:	8f 91       	pop	r24
 24e:	7f 91       	pop	r23
 250:	6f 91       	pop	r22
 252:	5f 91       	pop	r21
 254:	4f 91       	pop	r20
 256:	3f 91       	pop	r19
 258:	2f 91       	pop	r18
 25a:	0f 90       	pop	r0
 25c:	0f be       	out	0x3f, r0	; 63
 25e:	0f 90       	pop	r0
 260:	1f 90       	pop	r1
 262:	18 95       	reti

00000264 <handle_state_machine>:
	Modtag_Adresse,
	Modtag_Bit_Position_I_Adresse,
	Modtag_Bit_Position_Vaerdi
} State;

void handle_state_machine(State *currentState, char recivedChar, uint8_t *address) {
 264:	ef 92       	push	r14
 266:	ff 92       	push	r15
 268:	0f 93       	push	r16
 26a:	1f 93       	push	r17
 26c:	cf 93       	push	r28
 26e:	df 93       	push	r29
 270:	8c 01       	movw	r16, r24
 272:	c6 2f       	mov	r28, r22
 274:	7a 01       	movw	r14, r20
	static char hexBuffer[3] = {0};  // Buffer for two hex characters and null terminator
	static uint8_t hexIndex = 0;
	static uint8_t bitPosition = 0;

	UART_PrintString("Received Char: ");
 276:	8d e5       	ldi	r24, 0x5D	; 93
 278:	91 e0       	ldi	r25, 0x01	; 1
 27a:	0e 94 76 02 	call	0x4ec	; 0x4ec <UART_PrintString>
	UART_PrintHex((uint8_t)recivedChar);
 27e:	8c 2f       	mov	r24, r28
 280:	0e 94 8a 02 	call	0x514	; 0x514 <UART_PrintHex>
	UART_PrintString("\n");
 284:	89 e7       	ldi	r24, 0x79	; 121
 286:	92 e0       	ldi	r25, 0x02	; 2
 288:	0e 94 76 02 	call	0x4ec	; 0x4ec <UART_PrintString>

	UART_PrintString("Current State: ");
 28c:	8d e6       	ldi	r24, 0x6D	; 109
 28e:	91 e0       	ldi	r25, 0x01	; 1
 290:	0e 94 76 02 	call	0x4ec	; 0x4ec <UART_PrintString>
	switch (*currentState) {
 294:	f8 01       	movw	r30, r16
 296:	80 81       	ld	r24, Z
 298:	81 30       	cpi	r24, 0x01	; 1
 29a:	49 f0       	breq	.+18     	; 0x2ae <handle_state_machine+0x4a>
 29c:	18 f0       	brcs	.+6      	; 0x2a4 <handle_state_machine+0x40>
 29e:	82 30       	cpi	r24, 0x02	; 2
 2a0:	59 f0       	breq	.+22     	; 0x2b8 <handle_state_machine+0x54>
 2a2:	0f c0       	rjmp	.+30     	; 0x2c2 <handle_state_machine+0x5e>
		case Modtag_Adresse:
		UART_PrintString("Modtag_Adresse\n");
 2a4:	8d e7       	ldi	r24, 0x7D	; 125
 2a6:	91 e0       	ldi	r25, 0x01	; 1
 2a8:	0e 94 76 02 	call	0x4ec	; 0x4ec <UART_PrintString>
		break;
 2ac:	0e c0       	rjmp	.+28     	; 0x2ca <handle_state_machine+0x66>
		case Modtag_Bit_Position_I_Adresse:
		UART_PrintString("Modtag_Bit_Position_I_Adresse\n");
 2ae:	8e ed       	ldi	r24, 0xDE	; 222
 2b0:	91 e0       	ldi	r25, 0x01	; 1
 2b2:	0e 94 76 02 	call	0x4ec	; 0x4ec <UART_PrintString>
		break;
 2b6:	09 c0       	rjmp	.+18     	; 0x2ca <handle_state_machine+0x66>
		case Modtag_Bit_Position_Vaerdi:
		UART_PrintString("Modtag_Bit_Position_Vaerdi\n");
 2b8:	8d e8       	ldi	r24, 0x8D	; 141
 2ba:	91 e0       	ldi	r25, 0x01	; 1
 2bc:	0e 94 76 02 	call	0x4ec	; 0x4ec <UART_PrintString>
		break;
 2c0:	04 c0       	rjmp	.+8      	; 0x2ca <handle_state_machine+0x66>
		default:
		UART_PrintString("Unknown State\n");
 2c2:	89 ea       	ldi	r24, 0xA9	; 169
 2c4:	91 e0       	ldi	r25, 0x01	; 1
 2c6:	0e 94 76 02 	call	0x4ec	; 0x4ec <UART_PrintString>
		break;
	}

	switch (*currentState) {
 2ca:	f8 01       	movw	r30, r16
 2cc:	80 81       	ld	r24, Z
 2ce:	81 30       	cpi	r24, 0x01	; 1
 2d0:	09 f4       	brne	.+2      	; 0x2d4 <handle_state_machine+0x70>
 2d2:	51 c0       	rjmp	.+162    	; 0x376 <handle_state_machine+0x112>
 2d4:	20 f0       	brcs	.+8      	; 0x2de <handle_state_machine+0x7a>
 2d6:	82 30       	cpi	r24, 0x02	; 2
 2d8:	09 f4       	brne	.+2      	; 0x2dc <handle_state_machine+0x78>
 2da:	69 c0       	rjmp	.+210    	; 0x3ae <handle_state_machine+0x14a>
 2dc:	cd c0       	rjmp	.+410    	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
		case Modtag_Adresse:
			if (recivedChar == ':') {
 2de:	ca 33       	cpi	r28, 0x3A	; 58
 2e0:	11 f5       	brne	.+68     	; 0x326 <handle_state_machine+0xc2>
					// Convert the buffer to the address and print it
					*address = (uint8_t)strtol(hexBuffer, NULL, 16);
 2e2:	40 e1       	ldi	r20, 0x10	; 16
 2e4:	50 e0       	ldi	r21, 0x00	; 0
 2e6:	60 e0       	ldi	r22, 0x00	; 0
 2e8:	70 e0       	ldi	r23, 0x00	; 0
 2ea:	80 e4       	ldi	r24, 0x40	; 64
 2ec:	93 e0       	ldi	r25, 0x03	; 3
 2ee:	0e 94 cf 02 	call	0x59e	; 0x59e <strtol>
 2f2:	f7 01       	movw	r30, r14
 2f4:	60 83       	st	Z, r22

					UART_PrintString("Received address: 0x");
 2f6:	88 eb       	ldi	r24, 0xB8	; 184
 2f8:	91 e0       	ldi	r25, 0x01	; 1
 2fa:	0e 94 76 02 	call	0x4ec	; 0x4ec <UART_PrintString>
					UART_PrintHex(*address);
 2fe:	f7 01       	movw	r30, r14
 300:	80 81       	ld	r24, Z
 302:	0e 94 8a 02 	call	0x514	; 0x514 <UART_PrintHex>
					UART_PrintString("\n");
 306:	89 e7       	ldi	r24, 0x79	; 121
 308:	92 e0       	ldi	r25, 0x02	; 2
 30a:	0e 94 76 02 	call	0x4ec	; 0x4ec <UART_PrintString>

					// Reset buffer for next address
					hexIndex = 0;
 30e:	10 92 3f 03 	sts	0x033F, r1	; 0x80033f <hexIndex.2037>
					hexBuffer[0] = '\0';
 312:	10 92 40 03 	sts	0x0340, r1	; 0x800340 <hexBuffer.2036>

					// Transition to the next state
					UART_PrintString("Transitioning to Modtag_Bit_Position_I_Adresse\n");
 316:	8d ec       	ldi	r24, 0xCD	; 205
 318:	91 e0       	ldi	r25, 0x01	; 1
 31a:	0e 94 76 02 	call	0x4ec	; 0x4ec <UART_PrintString>
					*currentState = Modtag_Bit_Position_I_Adresse;
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	f8 01       	movw	r30, r16
 322:	80 83       	st	Z, r24
 324:	ad c0       	rjmp	.+346    	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
				} else if (isxdigit(recivedChar) && hexIndex < 2) { // Limiting to 2 digits only
 326:	8c 2f       	mov	r24, r28
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	0e 94 e5 03 	call	0x7ca	; 0x7ca <isxdigit>
 32e:	89 2b       	or	r24, r25
 330:	91 f0       	breq	.+36     	; 0x356 <handle_state_machine+0xf2>
 332:	e0 91 3f 03 	lds	r30, 0x033F	; 0x80033f <hexIndex.2037>
 336:	e2 30       	cpi	r30, 0x02	; 2
 338:	70 f4       	brcc	.+28     	; 0x356 <handle_state_machine+0xf2>
					// Fill the hexBuffer with received characters
					hexBuffer[hexIndex++] = recivedChar;
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	8e 0f       	add	r24, r30
 33e:	80 93 3f 03 	sts	0x033F, r24	; 0x80033f <hexIndex.2037>
 342:	f0 e0       	ldi	r31, 0x00	; 0
 344:	e0 5c       	subi	r30, 0xC0	; 192
 346:	fc 4f       	sbci	r31, 0xFC	; 252
 348:	c0 83       	st	Z, r28
					hexBuffer[hexIndex] = '\0';  // Ensure null termination
 34a:	e8 2f       	mov	r30, r24
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	e0 5c       	subi	r30, 0xC0	; 192
 350:	fc 4f       	sbci	r31, 0xFC	; 252
 352:	10 82       	st	Z, r1
 354:	95 c0       	rjmp	.+298    	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
				} else {
					UART_PrintString("Unexpected character received: ");
 356:	8d ef       	ldi	r24, 0xFD	; 253
 358:	91 e0       	ldi	r25, 0x01	; 1
 35a:	0e 94 76 02 	call	0x4ec	; 0x4ec <UART_PrintString>
					UART_PrintChar(recivedChar);
 35e:	8c 2f       	mov	r24, r28
 360:	0e 94 85 02 	call	0x50a	; 0x50a <UART_PrintChar>
					UART_PrintString("\n");
 364:	89 e7       	ldi	r24, 0x79	; 121
 366:	92 e0       	ldi	r25, 0x02	; 2
 368:	0e 94 76 02 	call	0x4ec	; 0x4ec <UART_PrintString>

					hexIndex = 0;
 36c:	10 92 3f 03 	sts	0x033F, r1	; 0x80033f <hexIndex.2037>
					hexBuffer[0] = '\0';
 370:	10 92 40 03 	sts	0x0340, r1	; 0x800340 <hexBuffer.2036>
 374:	85 c0       	rjmp	.+266    	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
			}
		break;

		case Modtag_Bit_Position_I_Adresse:
			if (recivedChar >= '0' && recivedChar <= '7') {
 376:	c0 53       	subi	r28, 0x30	; 48
 378:	c8 30       	cpi	r28, 0x08	; 8
 37a:	90 f4       	brcc	.+36     	; 0x3a0 <handle_state_machine+0x13c>
				bitPosition = recivedChar - '0';  // Correctly convert char to int
 37c:	c0 93 3e 03 	sts	0x033E, r28	; 0x80033e <bitPosition.2038>
				UART_PrintString("Enter bit position for address: 0x");
 380:	8d e1       	ldi	r24, 0x1D	; 29
 382:	92 e0       	ldi	r25, 0x02	; 2
 384:	0e 94 76 02 	call	0x4ec	; 0x4ec <UART_PrintString>
				UART_PrintHex(bitPosition);
 388:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <bitPosition.2038>
 38c:	0e 94 8a 02 	call	0x514	; 0x514 <UART_PrintHex>
				UART_PrintString("\n");
 390:	89 e7       	ldi	r24, 0x79	; 121
 392:	92 e0       	ldi	r25, 0x02	; 2
 394:	0e 94 76 02 	call	0x4ec	; 0x4ec <UART_PrintString>

				*currentState = Modtag_Bit_Position_Vaerdi;
 398:	82 e0       	ldi	r24, 0x02	; 2
 39a:	f8 01       	movw	r30, r16
 39c:	80 83       	st	Z, r24
 39e:	70 c0       	rjmp	.+224    	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
				} else {
				UART_PrintString("Invalid bit position, please enter a valid position (0-7)\n");
 3a0:	80 e4       	ldi	r24, 0x40	; 64
 3a2:	92 e0       	ldi	r25, 0x02	; 2
 3a4:	0e 94 76 02 	call	0x4ec	; 0x4ec <UART_PrintString>
				*currentState = Modtag_Adresse;
 3a8:	f8 01       	movw	r30, r16
 3aa:	10 82       	st	Z, r1
 3ac:	69 c0       	rjmp	.+210    	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
			}
		break;
		case Modtag_Bit_Position_Vaerdi:
			if (recivedChar == '0' || recivedChar == '1') {
 3ae:	80 ed       	ldi	r24, 0xD0	; 208
 3b0:	8c 0f       	add	r24, r28
 3b2:	82 30       	cpi	r24, 0x02	; 2
 3b4:	08 f0       	brcs	.+2      	; 0x3b8 <handle_state_machine+0x154>
 3b6:	59 c0       	rjmp	.+178    	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
					uint8_t bitMask = (1 << bitPosition);
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	00 90 3e 03 	lds	r0, 0x033E	; 0x80033e <bitPosition.2038>
 3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <handle_state_machine+0x162>
 3c2:	88 0f       	add	r24, r24
 3c4:	99 1f       	adc	r25, r25
 3c6:	0a 94       	dec	r0
 3c8:	e2 f7       	brpl	.-8      	; 0x3c2 <handle_state_machine+0x15e>
					uint8_t originalValue = *address;
				
					if(recivedChar == '1'){
 3ca:	c1 33       	cpi	r28, 0x31	; 49
 3cc:	29 f4       	brne	.+10     	; 0x3d8 <handle_state_machine+0x174>
						*address |= bitMask;
 3ce:	f7 01       	movw	r30, r14
 3d0:	90 81       	ld	r25, Z
 3d2:	89 2b       	or	r24, r25
 3d4:	80 83       	st	Z, r24
 3d6:	05 c0       	rjmp	.+10     	; 0x3e2 <handle_state_machine+0x17e>
					}
					else{
						*address &= ~bitMask;
 3d8:	80 95       	com	r24
 3da:	f7 01       	movw	r30, r14
 3dc:	90 81       	ld	r25, Z
 3de:	89 23       	and	r24, r25
 3e0:	80 83       	st	Z, r24
					}
				
					UART_PrintString("Line1: Recived address: 0x");
 3e2:	8b e7       	ldi	r24, 0x7B	; 123
 3e4:	92 e0       	ldi	r25, 0x02	; 2
 3e6:	0e 94 76 02 	call	0x4ec	; 0x4ec <UART_PrintString>
					UART_PrintHex(*address);
 3ea:	f7 01       	movw	r30, r14
 3ec:	80 81       	ld	r24, Z
 3ee:	0e 94 8a 02 	call	0x514	; 0x514 <UART_PrintHex>
					UART_PrintString("\n");
 3f2:	89 e7       	ldi	r24, 0x79	; 121
 3f4:	92 e0       	ldi	r25, 0x02	; 2
 3f6:	0e 94 76 02 	call	0x4ec	; 0x4ec <UART_PrintString>
				
					UART_PrintString("Line2: Recived bit position: ");
 3fa:	86 e9       	ldi	r24, 0x96	; 150
 3fc:	92 e0       	ldi	r25, 0x02	; 2
 3fe:	0e 94 76 02 	call	0x4ec	; 0x4ec <UART_PrintString>
					UART_PrintHex(bitPosition);
 402:	80 91 3e 03 	lds	r24, 0x033E	; 0x80033e <bitPosition.2038>
 406:	0e 94 8a 02 	call	0x514	; 0x514 <UART_PrintHex>
					UART_PrintString("\n");
 40a:	89 e7       	ldi	r24, 0x79	; 121
 40c:	92 e0       	ldi	r25, 0x02	; 2
 40e:	0e 94 76 02 	call	0x4ec	; 0x4ec <UART_PrintString>
				
					UART_PrintString("Line3: Recieved bit value: ");
 412:	84 eb       	ldi	r24, 0xB4	; 180
 414:	92 e0       	ldi	r25, 0x02	; 2
 416:	0e 94 76 02 	call	0x4ec	; 0x4ec <UART_PrintString>
					UART_PrintChar(recivedChar);
 41a:	8c 2f       	mov	r24, r28
 41c:	0e 94 85 02 	call	0x50a	; 0x50a <UART_PrintChar>
					UART_PrintString("\n");
 420:	89 e7       	ldi	r24, 0x79	; 121
 422:	92 e0       	ldi	r25, 0x02	; 2
 424:	0e 94 76 02 	call	0x4ec	; 0x4ec <UART_PrintString>
				
					UART_PrintString("Line4: Bit pattern at the address: ");
 428:	80 ed       	ldi	r24, 0xD0	; 208
 42a:	92 e0       	ldi	r25, 0x02	; 2
 42c:	0e 94 76 02 	call	0x4ec	; 0x4ec <UART_PrintString>
					for(int i = 7; i >= 0; i--){
 430:	c7 e0       	ldi	r28, 0x07	; 7
 432:	d0 e0       	ldi	r29, 0x00	; 0
 434:	11 c0       	rjmp	.+34     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
						UART_PrintChar(((*address & (1 << i)) ? '1' : '0'));
 436:	f7 01       	movw	r30, r14
 438:	80 81       	ld	r24, Z
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	0c 2e       	mov	r0, r28
 43e:	02 c0       	rjmp	.+4      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 440:	95 95       	asr	r25
 442:	87 95       	ror	r24
 444:	0a 94       	dec	r0
 446:	e2 f7       	brpl	.-8      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 448:	80 ff       	sbrs	r24, 0
 44a:	02 c0       	rjmp	.+4      	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 44c:	81 e3       	ldi	r24, 0x31	; 49
 44e:	01 c0       	rjmp	.+2      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 450:	80 e3       	ldi	r24, 0x30	; 48
 452:	0e 94 85 02 	call	0x50a	; 0x50a <UART_PrintChar>
					UART_PrintString("Line3: Recieved bit value: ");
					UART_PrintChar(recivedChar);
					UART_PrintString("\n");
				
					UART_PrintString("Line4: Bit pattern at the address: ");
					for(int i = 7; i >= 0; i--){
 456:	21 97       	sbiw	r28, 0x01	; 1
 458:	dd 23       	and	r29, r29
 45a:	6c f7       	brge	.-38     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
						UART_PrintChar(((*address & (1 << i)) ? '1' : '0'));
					}
					UART_PrintString("\n");
 45c:	89 e7       	ldi	r24, 0x79	; 121
 45e:	92 e0       	ldi	r25, 0x02	; 2
 460:	0e 94 76 02 	call	0x4ec	; 0x4ec <UART_PrintString>
				
					*currentState = Modtag_Adresse;
 464:	f8 01       	movw	r30, r16
 466:	10 82       	st	Z, r1
 468:	0b c0       	rjmp	.+22     	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
				} 
				else {
					UART_PrintString("Invalid bit value, please enter 0 or 1\n");
 46a:	84 ef       	ldi	r24, 0xF4	; 244
 46c:	92 e0       	ldi	r25, 0x02	; 2
 46e:	0e 94 76 02 	call	0x4ec	; 0x4ec <UART_PrintString>
					*currentState = Modtag_Adresse;
 472:	f8 01       	movw	r30, r16
 474:	10 82       	st	Z, r1
 476:	04 c0       	rjmp	.+8      	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
			}
		break;

		default:
		UART_PrintString("Unknown state\n");
 478:	8c e1       	ldi	r24, 0x1C	; 28
 47a:	93 e0       	ldi	r25, 0x03	; 3
 47c:	0e 94 76 02 	call	0x4ec	; 0x4ec <UART_PrintString>
		break;
	}
}
 480:	df 91       	pop	r29
 482:	cf 91       	pop	r28
 484:	1f 91       	pop	r17
 486:	0f 91       	pop	r16
 488:	ff 90       	pop	r15
 48a:	ef 90       	pop	r14
 48c:	08 95       	ret

0000048e <uart_getch>:
}

ISR(USART_RX_vect) {
	char ReceivedByte = UDR1;
	ReceiveNewTimeoutValue(&ReceivedByte);
}
 48e:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
 492:	88 23       	and	r24, r24
 494:	e4 f7       	brge	.-8      	; 0x48e <uart_getch>
 496:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	08 95       	ret

0000049e <uart_putch>:
 49e:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
 4a2:	95 ff       	sbrs	r25, 5
 4a4:	fc cf       	rjmp	.-8      	; 0x49e <uart_putch>
 4a6:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
 4aa:	80 e0       	ldi	r24, 0x00	; 0
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	08 95       	ret

000004b0 <RS232Init>:
 4b0:	87 e6       	ldi	r24, 0x67	; 103
 4b2:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f80cc>
 4b6:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f80cd>
 4ba:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
 4be:	88 e1       	ldi	r24, 0x18	; 24
 4c0:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7f80c9>
 4c4:	86 e0       	ldi	r24, 0x06	; 6
 4c6:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7f80ca>
 4ca:	e3 e4       	ldi	r30, 0x43	; 67
 4cc:	f3 e0       	ldi	r31, 0x03	; 3
 4ce:	86 e1       	ldi	r24, 0x16	; 22
 4d0:	91 e0       	ldi	r25, 0x01	; 1
 4d2:	93 83       	std	Z+3, r25	; 0x03
 4d4:	82 83       	std	Z+2, r24	; 0x02
 4d6:	88 e0       	ldi	r24, 0x08	; 8
 4d8:	91 e0       	ldi	r25, 0x01	; 1
 4da:	91 83       	std	Z+1, r25	; 0x01
 4dc:	80 83       	st	Z, r24
 4de:	08 95       	ret

000004e0 <Enable_UART_Receive_Interrupt>:
 4e0:	e9 ec       	ldi	r30, 0xC9	; 201
 4e2:	f0 e0       	ldi	r31, 0x00	; 0
 4e4:	80 81       	ld	r24, Z
 4e6:	80 68       	ori	r24, 0x80	; 128
 4e8:	80 83       	st	Z, r24
 4ea:	08 95       	ret

000004ec <UART_PrintString>:

void UART_PrintString(const char* str) {
 4ec:	cf 93       	push	r28
 4ee:	df 93       	push	r29
 4f0:	ec 01       	movw	r28, r24
	while (*str) {
 4f2:	05 c0       	rjmp	.+10     	; 0x4fe <UART_PrintString+0x12>
		uart_putch(*str++, NULL);
 4f4:	21 96       	adiw	r28, 0x01	; 1
 4f6:	60 e0       	ldi	r22, 0x00	; 0
 4f8:	70 e0       	ldi	r23, 0x00	; 0
 4fa:	0e 94 4f 02 	call	0x49e	; 0x49e <uart_putch>
	char ReceivedByte = UDR1;
	ReceiveNewTimeoutValue(&ReceivedByte);
}

void UART_PrintString(const char* str) {
	while (*str) {
 4fe:	88 81       	ld	r24, Y
 500:	81 11       	cpse	r24, r1
 502:	f8 cf       	rjmp	.-16     	; 0x4f4 <UART_PrintString+0x8>
		uart_putch(*str++, NULL);
	}
}
 504:	df 91       	pop	r29
 506:	cf 91       	pop	r28
 508:	08 95       	ret

0000050a <UART_PrintChar>:

void UART_PrintChar(char c) {
	uart_putch(c, NULL);
 50a:	60 e0       	ldi	r22, 0x00	; 0
 50c:	70 e0       	ldi	r23, 0x00	; 0
 50e:	0e 94 4f 02 	call	0x49e	; 0x49e <uart_putch>
 512:	08 95       	ret

00000514 <UART_PrintHex>:
}

void UART_PrintHex(uint8_t value) {
 514:	ef 92       	push	r14
 516:	ff 92       	push	r15
 518:	1f 93       	push	r17
 51a:	cf 93       	push	r28
 51c:	df 93       	push	r29
 51e:	cd b7       	in	r28, 0x3d	; 61
 520:	de b7       	in	r29, 0x3e	; 62
 522:	61 97       	sbiw	r28, 0x11	; 17
 524:	0f b6       	in	r0, 0x3f	; 63
 526:	f8 94       	cli
 528:	de bf       	out	0x3e, r29	; 62
 52a:	0f be       	out	0x3f, r0	; 63
 52c:	cd bf       	out	0x3d, r28	; 61
 52e:	18 2f       	mov	r17, r24
	const char hexDigits[] = "0123456789ABCDEF";
 530:	81 e1       	ldi	r24, 0x11	; 17
 532:	eb e2       	ldi	r30, 0x2B	; 43
 534:	f3 e0       	ldi	r31, 0x03	; 3
 536:	de 01       	movw	r26, r28
 538:	11 96       	adiw	r26, 0x01	; 1
 53a:	01 90       	ld	r0, Z+
 53c:	0d 92       	st	X+, r0
 53e:	8a 95       	dec	r24
 540:	e1 f7       	brne	.-8      	; 0x53a <UART_PrintHex+0x26>
	uart_putch(hexDigits[value >> 4], stdout); // Send high nibble
 542:	0f 2e       	mov	r0, r31
 544:	f3 e4       	ldi	r31, 0x43	; 67
 546:	ef 2e       	mov	r14, r31
 548:	f3 e0       	ldi	r31, 0x03	; 3
 54a:	ff 2e       	mov	r15, r31
 54c:	f0 2d       	mov	r31, r0
 54e:	f7 01       	movw	r30, r14
 550:	62 81       	ldd	r22, Z+2	; 0x02
 552:	73 81       	ldd	r23, Z+3	; 0x03
 554:	81 2f       	mov	r24, r17
 556:	82 95       	swap	r24
 558:	8f 70       	andi	r24, 0x0F	; 15
 55a:	e1 e0       	ldi	r30, 0x01	; 1
 55c:	f0 e0       	ldi	r31, 0x00	; 0
 55e:	ec 0f       	add	r30, r28
 560:	fd 1f       	adc	r31, r29
 562:	e8 0f       	add	r30, r24
 564:	f1 1d       	adc	r31, r1
 566:	80 81       	ld	r24, Z
 568:	0e 94 4f 02 	call	0x49e	; 0x49e <uart_putch>
	uart_putch(hexDigits[value & 0x0F], stdout); // Send low nibble
 56c:	f7 01       	movw	r30, r14
 56e:	62 81       	ldd	r22, Z+2	; 0x02
 570:	73 81       	ldd	r23, Z+3	; 0x03
 572:	1f 70       	andi	r17, 0x0F	; 15
 574:	e1 e0       	ldi	r30, 0x01	; 1
 576:	f0 e0       	ldi	r31, 0x00	; 0
 578:	ec 0f       	add	r30, r28
 57a:	fd 1f       	adc	r31, r29
 57c:	e1 0f       	add	r30, r17
 57e:	f1 1d       	adc	r31, r1
 580:	80 81       	ld	r24, Z
 582:	0e 94 4f 02 	call	0x49e	; 0x49e <uart_putch>
}
 586:	61 96       	adiw	r28, 0x11	; 17
 588:	0f b6       	in	r0, 0x3f	; 63
 58a:	f8 94       	cli
 58c:	de bf       	out	0x3e, r29	; 62
 58e:	0f be       	out	0x3f, r0	; 63
 590:	cd bf       	out	0x3d, r28	; 61
 592:	df 91       	pop	r29
 594:	cf 91       	pop	r28
 596:	1f 91       	pop	r17
 598:	ff 90       	pop	r15
 59a:	ef 90       	pop	r14
 59c:	08 95       	ret

0000059e <strtol>:
 59e:	a0 e0       	ldi	r26, 0x00	; 0
 5a0:	b0 e0       	ldi	r27, 0x00	; 0
 5a2:	e5 ed       	ldi	r30, 0xD5	; 213
 5a4:	f2 e0       	ldi	r31, 0x02	; 2
 5a6:	0c 94 3b 04 	jmp	0x876	; 0x876 <__prologue_saves__+0x2>
 5aa:	5c 01       	movw	r10, r24
 5ac:	6b 01       	movw	r12, r22
 5ae:	7a 01       	movw	r14, r20
 5b0:	61 15       	cp	r22, r1
 5b2:	71 05       	cpc	r23, r1
 5b4:	19 f0       	breq	.+6      	; 0x5bc <strtol+0x1e>
 5b6:	fb 01       	movw	r30, r22
 5b8:	91 83       	std	Z+1, r25	; 0x01
 5ba:	80 83       	st	Z, r24
 5bc:	e1 14       	cp	r14, r1
 5be:	f1 04       	cpc	r15, r1
 5c0:	29 f0       	breq	.+10     	; 0x5cc <strtol+0x2e>
 5c2:	c7 01       	movw	r24, r14
 5c4:	02 97       	sbiw	r24, 0x02	; 2
 5c6:	83 97       	sbiw	r24, 0x23	; 35
 5c8:	08 f0       	brcs	.+2      	; 0x5cc <strtol+0x2e>
 5ca:	e5 c0       	rjmp	.+458    	; 0x796 <strtol+0x1f8>
 5cc:	e5 01       	movw	r28, r10
 5ce:	21 96       	adiw	r28, 0x01	; 1
 5d0:	f5 01       	movw	r30, r10
 5d2:	10 81       	ld	r17, Z
 5d4:	81 2f       	mov	r24, r17
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <isspace>
 5dc:	89 2b       	or	r24, r25
 5de:	11 f0       	breq	.+4      	; 0x5e4 <strtol+0x46>
 5e0:	5e 01       	movw	r10, r28
 5e2:	f4 cf       	rjmp	.-24     	; 0x5cc <strtol+0x2e>
 5e4:	1d 32       	cpi	r17, 0x2D	; 45
 5e6:	29 f4       	brne	.+10     	; 0x5f2 <strtol+0x54>
 5e8:	21 96       	adiw	r28, 0x01	; 1
 5ea:	f5 01       	movw	r30, r10
 5ec:	11 81       	ldd	r17, Z+1	; 0x01
 5ee:	01 e0       	ldi	r16, 0x01	; 1
 5f0:	07 c0       	rjmp	.+14     	; 0x600 <strtol+0x62>
 5f2:	1b 32       	cpi	r17, 0x2B	; 43
 5f4:	21 f4       	brne	.+8      	; 0x5fe <strtol+0x60>
 5f6:	e5 01       	movw	r28, r10
 5f8:	22 96       	adiw	r28, 0x02	; 2
 5fa:	f5 01       	movw	r30, r10
 5fc:	11 81       	ldd	r17, Z+1	; 0x01
 5fe:	00 e0       	ldi	r16, 0x00	; 0
 600:	e1 14       	cp	r14, r1
 602:	f1 04       	cpc	r15, r1
 604:	09 f1       	breq	.+66     	; 0x648 <strtol+0xaa>
 606:	f0 e1       	ldi	r31, 0x10	; 16
 608:	ef 16       	cp	r14, r31
 60a:	f1 04       	cpc	r15, r1
 60c:	29 f4       	brne	.+10     	; 0x618 <strtol+0x7a>
 60e:	3f c0       	rjmp	.+126    	; 0x68e <strtol+0xf0>
 610:	10 e3       	ldi	r17, 0x30	; 48
 612:	e1 14       	cp	r14, r1
 614:	f1 04       	cpc	r15, r1
 616:	21 f1       	breq	.+72     	; 0x660 <strtol+0xc2>
 618:	28 e0       	ldi	r18, 0x08	; 8
 61a:	e2 16       	cp	r14, r18
 61c:	f1 04       	cpc	r15, r1
 61e:	01 f1       	breq	.+64     	; 0x660 <strtol+0xc2>
 620:	54 f4       	brge	.+20     	; 0x636 <strtol+0x98>
 622:	e2 e0       	ldi	r30, 0x02	; 2
 624:	ee 16       	cp	r14, r30
 626:	f1 04       	cpc	r15, r1
 628:	21 f5       	brne	.+72     	; 0x672 <strtol+0xd4>
 62a:	81 2c       	mov	r8, r1
 62c:	91 2c       	mov	r9, r1
 62e:	a1 2c       	mov	r10, r1
 630:	b0 e4       	ldi	r27, 0x40	; 64
 632:	bb 2e       	mov	r11, r27
 634:	3e c0       	rjmp	.+124    	; 0x6b2 <strtol+0x114>
 636:	fa e0       	ldi	r31, 0x0A	; 10
 638:	ef 16       	cp	r14, r31
 63a:	f1 04       	cpc	r15, r1
 63c:	39 f0       	breq	.+14     	; 0x64c <strtol+0xae>
 63e:	20 e1       	ldi	r18, 0x10	; 16
 640:	e2 16       	cp	r14, r18
 642:	f1 04       	cpc	r15, r1
 644:	b1 f4       	brne	.+44     	; 0x672 <strtol+0xd4>
 646:	30 c0       	rjmp	.+96     	; 0x6a8 <strtol+0x10a>
 648:	10 33       	cpi	r17, 0x30	; 48
 64a:	19 f1       	breq	.+70     	; 0x692 <strtol+0xf4>
 64c:	fa e0       	ldi	r31, 0x0A	; 10
 64e:	ef 2e       	mov	r14, r31
 650:	f1 2c       	mov	r15, r1
 652:	ac ec       	ldi	r26, 0xCC	; 204
 654:	8a 2e       	mov	r8, r26
 656:	98 2c       	mov	r9, r8
 658:	a8 2c       	mov	r10, r8
 65a:	ac e0       	ldi	r26, 0x0C	; 12
 65c:	ba 2e       	mov	r11, r26
 65e:	29 c0       	rjmp	.+82     	; 0x6b2 <strtol+0x114>
 660:	78 e0       	ldi	r23, 0x08	; 8
 662:	e7 2e       	mov	r14, r23
 664:	f1 2c       	mov	r15, r1
 666:	81 2c       	mov	r8, r1
 668:	91 2c       	mov	r9, r1
 66a:	a1 2c       	mov	r10, r1
 66c:	e0 e1       	ldi	r30, 0x10	; 16
 66e:	be 2e       	mov	r11, r30
 670:	20 c0       	rjmp	.+64     	; 0x6b2 <strtol+0x114>
 672:	60 e0       	ldi	r22, 0x00	; 0
 674:	70 e0       	ldi	r23, 0x00	; 0
 676:	80 e0       	ldi	r24, 0x00	; 0
 678:	90 e8       	ldi	r25, 0x80	; 128
 67a:	97 01       	movw	r18, r14
 67c:	0f 2c       	mov	r0, r15
 67e:	00 0c       	add	r0, r0
 680:	44 0b       	sbc	r20, r20
 682:	55 0b       	sbc	r21, r21
 684:	0e 94 0d 04 	call	0x81a	; 0x81a <__udivmodsi4>
 688:	49 01       	movw	r8, r18
 68a:	5a 01       	movw	r10, r20
 68c:	12 c0       	rjmp	.+36     	; 0x6b2 <strtol+0x114>
 68e:	10 33       	cpi	r17, 0x30	; 48
 690:	59 f4       	brne	.+22     	; 0x6a8 <strtol+0x10a>
 692:	88 81       	ld	r24, Y
 694:	8f 7d       	andi	r24, 0xDF	; 223
 696:	88 35       	cpi	r24, 0x58	; 88
 698:	09 f0       	breq	.+2      	; 0x69c <strtol+0xfe>
 69a:	ba cf       	rjmp	.-140    	; 0x610 <strtol+0x72>
 69c:	19 81       	ldd	r17, Y+1	; 0x01
 69e:	22 96       	adiw	r28, 0x02	; 2
 6a0:	02 60       	ori	r16, 0x02	; 2
 6a2:	80 e1       	ldi	r24, 0x10	; 16
 6a4:	e8 2e       	mov	r14, r24
 6a6:	f1 2c       	mov	r15, r1
 6a8:	81 2c       	mov	r8, r1
 6aa:	91 2c       	mov	r9, r1
 6ac:	a1 2c       	mov	r10, r1
 6ae:	68 e0       	ldi	r22, 0x08	; 8
 6b0:	b6 2e       	mov	r11, r22
 6b2:	40 e0       	ldi	r20, 0x00	; 0
 6b4:	60 e0       	ldi	r22, 0x00	; 0
 6b6:	70 e0       	ldi	r23, 0x00	; 0
 6b8:	cb 01       	movw	r24, r22
 6ba:	27 01       	movw	r4, r14
 6bc:	0f 2c       	mov	r0, r15
 6be:	00 0c       	add	r0, r0
 6c0:	66 08       	sbc	r6, r6
 6c2:	77 08       	sbc	r7, r7
 6c4:	fe 01       	movw	r30, r28
 6c6:	50 ed       	ldi	r21, 0xD0	; 208
 6c8:	35 2e       	mov	r3, r21
 6ca:	31 0e       	add	r3, r17
 6cc:	29 e0       	ldi	r18, 0x09	; 9
 6ce:	23 15       	cp	r18, r3
 6d0:	70 f4       	brcc	.+28     	; 0x6ee <strtol+0x150>
 6d2:	2f eb       	ldi	r18, 0xBF	; 191
 6d4:	21 0f       	add	r18, r17
 6d6:	2a 31       	cpi	r18, 0x1A	; 26
 6d8:	18 f4       	brcc	.+6      	; 0x6e0 <strtol+0x142>
 6da:	39 ec       	ldi	r19, 0xC9	; 201
 6dc:	33 2e       	mov	r3, r19
 6de:	06 c0       	rjmp	.+12     	; 0x6ec <strtol+0x14e>
 6e0:	2f e9       	ldi	r18, 0x9F	; 159
 6e2:	21 0f       	add	r18, r17
 6e4:	2a 31       	cpi	r18, 0x1A	; 26
 6e6:	18 f5       	brcc	.+70     	; 0x72e <strtol+0x190>
 6e8:	29 ea       	ldi	r18, 0xA9	; 169
 6ea:	32 2e       	mov	r3, r18
 6ec:	31 0e       	add	r3, r17
 6ee:	23 2d       	mov	r18, r3
 6f0:	30 e0       	ldi	r19, 0x00	; 0
 6f2:	2e 15       	cp	r18, r14
 6f4:	3f 05       	cpc	r19, r15
 6f6:	dc f4       	brge	.+54     	; 0x72e <strtol+0x190>
 6f8:	47 fd       	sbrc	r20, 7
 6fa:	16 c0       	rjmp	.+44     	; 0x728 <strtol+0x18a>
 6fc:	86 16       	cp	r8, r22
 6fe:	97 06       	cpc	r9, r23
 700:	a8 06       	cpc	r10, r24
 702:	b9 06       	cpc	r11, r25
 704:	70 f0       	brcs	.+28     	; 0x722 <strtol+0x184>
 706:	a3 01       	movw	r20, r6
 708:	92 01       	movw	r18, r4
 70a:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__mulsi3>
 70e:	63 0d       	add	r22, r3
 710:	71 1d       	adc	r23, r1
 712:	81 1d       	adc	r24, r1
 714:	91 1d       	adc	r25, r1
 716:	61 30       	cpi	r22, 0x01	; 1
 718:	71 05       	cpc	r23, r1
 71a:	81 05       	cpc	r24, r1
 71c:	20 e8       	ldi	r18, 0x80	; 128
 71e:	92 07       	cpc	r25, r18
 720:	10 f0       	brcs	.+4      	; 0x726 <strtol+0x188>
 722:	4f ef       	ldi	r20, 0xFF	; 255
 724:	01 c0       	rjmp	.+2      	; 0x728 <strtol+0x18a>
 726:	41 e0       	ldi	r20, 0x01	; 1
 728:	21 96       	adiw	r28, 0x01	; 1
 72a:	10 81       	ld	r17, Z
 72c:	cb cf       	rjmp	.-106    	; 0x6c4 <strtol+0x126>
 72e:	20 2f       	mov	r18, r16
 730:	21 70       	andi	r18, 0x01	; 1
 732:	c1 14       	cp	r12, r1
 734:	d1 04       	cpc	r13, r1
 736:	71 f0       	breq	.+28     	; 0x754 <strtol+0x1b6>
 738:	44 23       	and	r20, r20
 73a:	29 f0       	breq	.+10     	; 0x746 <strtol+0x1a8>
 73c:	21 97       	sbiw	r28, 0x01	; 1
 73e:	f6 01       	movw	r30, r12
 740:	d1 83       	std	Z+1, r29	; 0x01
 742:	c0 83       	st	Z, r28
 744:	07 c0       	rjmp	.+14     	; 0x754 <strtol+0x1b6>
 746:	01 ff       	sbrs	r16, 1
 748:	19 c0       	rjmp	.+50     	; 0x77c <strtol+0x1de>
 74a:	22 97       	sbiw	r28, 0x02	; 2
 74c:	f6 01       	movw	r30, r12
 74e:	d1 83       	std	Z+1, r29	; 0x01
 750:	c0 83       	st	Z, r28
 752:	14 c0       	rjmp	.+40     	; 0x77c <strtol+0x1de>
 754:	47 ff       	sbrs	r20, 7
 756:	12 c0       	rjmp	.+36     	; 0x77c <strtol+0x1de>
 758:	22 23       	and	r18, r18
 75a:	29 f0       	breq	.+10     	; 0x766 <strtol+0x1c8>
 75c:	60 e0       	ldi	r22, 0x00	; 0
 75e:	70 e0       	ldi	r23, 0x00	; 0
 760:	80 e0       	ldi	r24, 0x00	; 0
 762:	90 e8       	ldi	r25, 0x80	; 128
 764:	04 c0       	rjmp	.+8      	; 0x76e <strtol+0x1d0>
 766:	6f ef       	ldi	r22, 0xFF	; 255
 768:	7f ef       	ldi	r23, 0xFF	; 255
 76a:	8f ef       	ldi	r24, 0xFF	; 255
 76c:	9f e7       	ldi	r25, 0x7F	; 127
 76e:	22 e2       	ldi	r18, 0x22	; 34
 770:	30 e0       	ldi	r19, 0x00	; 0
 772:	30 93 4a 03 	sts	0x034A, r19	; 0x80034a <errno+0x1>
 776:	20 93 49 03 	sts	0x0349, r18	; 0x800349 <errno>
 77a:	09 c0       	rjmp	.+18     	; 0x78e <strtol+0x1f0>
 77c:	22 23       	and	r18, r18
 77e:	81 f0       	breq	.+32     	; 0x7a0 <strtol+0x202>
 780:	90 95       	com	r25
 782:	80 95       	com	r24
 784:	70 95       	com	r23
 786:	61 95       	neg	r22
 788:	7f 4f       	sbci	r23, 0xFF	; 255
 78a:	8f 4f       	sbci	r24, 0xFF	; 255
 78c:	9f 4f       	sbci	r25, 0xFF	; 255
 78e:	46 2f       	mov	r20, r22
 790:	37 2f       	mov	r19, r23
 792:	28 2f       	mov	r18, r24
 794:	12 c0       	rjmp	.+36     	; 0x7ba <strtol+0x21c>
 796:	40 e0       	ldi	r20, 0x00	; 0
 798:	30 e0       	ldi	r19, 0x00	; 0
 79a:	20 e0       	ldi	r18, 0x00	; 0
 79c:	90 e0       	ldi	r25, 0x00	; 0
 79e:	0d c0       	rjmp	.+26     	; 0x7ba <strtol+0x21c>
 7a0:	97 ff       	sbrs	r25, 7
 7a2:	f5 cf       	rjmp	.-22     	; 0x78e <strtol+0x1f0>
 7a4:	82 e2       	ldi	r24, 0x22	; 34
 7a6:	90 e0       	ldi	r25, 0x00	; 0
 7a8:	90 93 4a 03 	sts	0x034A, r25	; 0x80034a <errno+0x1>
 7ac:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <errno>
 7b0:	6f ef       	ldi	r22, 0xFF	; 255
 7b2:	7f ef       	ldi	r23, 0xFF	; 255
 7b4:	8f ef       	ldi	r24, 0xFF	; 255
 7b6:	9f e7       	ldi	r25, 0x7F	; 127
 7b8:	ea cf       	rjmp	.-44     	; 0x78e <strtol+0x1f0>
 7ba:	64 2f       	mov	r22, r20
 7bc:	73 2f       	mov	r23, r19
 7be:	82 2f       	mov	r24, r18
 7c0:	cd b7       	in	r28, 0x3d	; 61
 7c2:	de b7       	in	r29, 0x3e	; 62
 7c4:	e1 e1       	ldi	r30, 0x11	; 17
 7c6:	0c 94 57 04 	jmp	0x8ae	; 0x8ae <__epilogue_restores__+0x2>

000007ca <isxdigit>:
 7ca:	91 11       	cpse	r25, r1
 7cc:	0c 94 fa 03 	jmp	0x7f4	; 0x7f4 <__ctype_isfalse>
 7d0:	80 53       	subi	r24, 0x30	; 48
 7d2:	8a 50       	subi	r24, 0x0A	; 10
 7d4:	28 f0       	brcs	.+10     	; 0x7e0 <isxdigit+0x16>
 7d6:	86 5c       	subi	r24, 0xC6	; 198
 7d8:	80 62       	ori	r24, 0x20	; 32
 7da:	81 56       	subi	r24, 0x61	; 97
 7dc:	86 50       	subi	r24, 0x06	; 6
 7de:	b0 f7       	brcc	.-20     	; 0x7cc <isxdigit+0x2>
 7e0:	08 95       	ret

000007e2 <isspace>:
 7e2:	91 11       	cpse	r25, r1
 7e4:	0c 94 fa 03 	jmp	0x7f4	; 0x7f4 <__ctype_isfalse>
 7e8:	80 32       	cpi	r24, 0x20	; 32
 7ea:	19 f0       	breq	.+6      	; 0x7f2 <isspace+0x10>
 7ec:	89 50       	subi	r24, 0x09	; 9
 7ee:	85 50       	subi	r24, 0x05	; 5
 7f0:	c8 f7       	brcc	.-14     	; 0x7e4 <isspace+0x2>
 7f2:	08 95       	ret

000007f4 <__ctype_isfalse>:
 7f4:	99 27       	eor	r25, r25
 7f6:	88 27       	eor	r24, r24

000007f8 <__ctype_istrue>:
 7f8:	08 95       	ret

000007fa <__mulsi3>:
 7fa:	db 01       	movw	r26, r22
 7fc:	8f 93       	push	r24
 7fe:	9f 93       	push	r25
 800:	0e 94 2f 04 	call	0x85e	; 0x85e <__muluhisi3>
 804:	bf 91       	pop	r27
 806:	af 91       	pop	r26
 808:	a2 9f       	mul	r26, r18
 80a:	80 0d       	add	r24, r0
 80c:	91 1d       	adc	r25, r1
 80e:	a3 9f       	mul	r26, r19
 810:	90 0d       	add	r25, r0
 812:	b2 9f       	mul	r27, r18
 814:	90 0d       	add	r25, r0
 816:	11 24       	eor	r1, r1
 818:	08 95       	ret

0000081a <__udivmodsi4>:
 81a:	a1 e2       	ldi	r26, 0x21	; 33
 81c:	1a 2e       	mov	r1, r26
 81e:	aa 1b       	sub	r26, r26
 820:	bb 1b       	sub	r27, r27
 822:	fd 01       	movw	r30, r26
 824:	0d c0       	rjmp	.+26     	; 0x840 <__udivmodsi4_ep>

00000826 <__udivmodsi4_loop>:
 826:	aa 1f       	adc	r26, r26
 828:	bb 1f       	adc	r27, r27
 82a:	ee 1f       	adc	r30, r30
 82c:	ff 1f       	adc	r31, r31
 82e:	a2 17       	cp	r26, r18
 830:	b3 07       	cpc	r27, r19
 832:	e4 07       	cpc	r30, r20
 834:	f5 07       	cpc	r31, r21
 836:	20 f0       	brcs	.+8      	; 0x840 <__udivmodsi4_ep>
 838:	a2 1b       	sub	r26, r18
 83a:	b3 0b       	sbc	r27, r19
 83c:	e4 0b       	sbc	r30, r20
 83e:	f5 0b       	sbc	r31, r21

00000840 <__udivmodsi4_ep>:
 840:	66 1f       	adc	r22, r22
 842:	77 1f       	adc	r23, r23
 844:	88 1f       	adc	r24, r24
 846:	99 1f       	adc	r25, r25
 848:	1a 94       	dec	r1
 84a:	69 f7       	brne	.-38     	; 0x826 <__udivmodsi4_loop>
 84c:	60 95       	com	r22
 84e:	70 95       	com	r23
 850:	80 95       	com	r24
 852:	90 95       	com	r25
 854:	9b 01       	movw	r18, r22
 856:	ac 01       	movw	r20, r24
 858:	bd 01       	movw	r22, r26
 85a:	cf 01       	movw	r24, r30
 85c:	08 95       	ret

0000085e <__muluhisi3>:
 85e:	0e 94 71 04 	call	0x8e2	; 0x8e2 <__umulhisi3>
 862:	a5 9f       	mul	r26, r21
 864:	90 0d       	add	r25, r0
 866:	b4 9f       	mul	r27, r20
 868:	90 0d       	add	r25, r0
 86a:	a4 9f       	mul	r26, r20
 86c:	80 0d       	add	r24, r0
 86e:	91 1d       	adc	r25, r1
 870:	11 24       	eor	r1, r1
 872:	08 95       	ret

00000874 <__prologue_saves__>:
 874:	2f 92       	push	r2
 876:	3f 92       	push	r3
 878:	4f 92       	push	r4
 87a:	5f 92       	push	r5
 87c:	6f 92       	push	r6
 87e:	7f 92       	push	r7
 880:	8f 92       	push	r8
 882:	9f 92       	push	r9
 884:	af 92       	push	r10
 886:	bf 92       	push	r11
 888:	cf 92       	push	r12
 88a:	df 92       	push	r13
 88c:	ef 92       	push	r14
 88e:	ff 92       	push	r15
 890:	0f 93       	push	r16
 892:	1f 93       	push	r17
 894:	cf 93       	push	r28
 896:	df 93       	push	r29
 898:	cd b7       	in	r28, 0x3d	; 61
 89a:	de b7       	in	r29, 0x3e	; 62
 89c:	ca 1b       	sub	r28, r26
 89e:	db 0b       	sbc	r29, r27
 8a0:	0f b6       	in	r0, 0x3f	; 63
 8a2:	f8 94       	cli
 8a4:	de bf       	out	0x3e, r29	; 62
 8a6:	0f be       	out	0x3f, r0	; 63
 8a8:	cd bf       	out	0x3d, r28	; 61
 8aa:	09 94       	ijmp

000008ac <__epilogue_restores__>:
 8ac:	2a 88       	ldd	r2, Y+18	; 0x12
 8ae:	39 88       	ldd	r3, Y+17	; 0x11
 8b0:	48 88       	ldd	r4, Y+16	; 0x10
 8b2:	5f 84       	ldd	r5, Y+15	; 0x0f
 8b4:	6e 84       	ldd	r6, Y+14	; 0x0e
 8b6:	7d 84       	ldd	r7, Y+13	; 0x0d
 8b8:	8c 84       	ldd	r8, Y+12	; 0x0c
 8ba:	9b 84       	ldd	r9, Y+11	; 0x0b
 8bc:	aa 84       	ldd	r10, Y+10	; 0x0a
 8be:	b9 84       	ldd	r11, Y+9	; 0x09
 8c0:	c8 84       	ldd	r12, Y+8	; 0x08
 8c2:	df 80       	ldd	r13, Y+7	; 0x07
 8c4:	ee 80       	ldd	r14, Y+6	; 0x06
 8c6:	fd 80       	ldd	r15, Y+5	; 0x05
 8c8:	0c 81       	ldd	r16, Y+4	; 0x04
 8ca:	1b 81       	ldd	r17, Y+3	; 0x03
 8cc:	aa 81       	ldd	r26, Y+2	; 0x02
 8ce:	b9 81       	ldd	r27, Y+1	; 0x01
 8d0:	ce 0f       	add	r28, r30
 8d2:	d1 1d       	adc	r29, r1
 8d4:	0f b6       	in	r0, 0x3f	; 63
 8d6:	f8 94       	cli
 8d8:	de bf       	out	0x3e, r29	; 62
 8da:	0f be       	out	0x3f, r0	; 63
 8dc:	cd bf       	out	0x3d, r28	; 61
 8de:	ed 01       	movw	r28, r26
 8e0:	08 95       	ret

000008e2 <__umulhisi3>:
 8e2:	a2 9f       	mul	r26, r18
 8e4:	b0 01       	movw	r22, r0
 8e6:	b3 9f       	mul	r27, r19
 8e8:	c0 01       	movw	r24, r0
 8ea:	a3 9f       	mul	r26, r19
 8ec:	70 0d       	add	r23, r0
 8ee:	81 1d       	adc	r24, r1
 8f0:	11 24       	eor	r1, r1
 8f2:	91 1d       	adc	r25, r1
 8f4:	b2 9f       	mul	r27, r18
 8f6:	70 0d       	add	r23, r0
 8f8:	81 1d       	adc	r24, r1
 8fa:	11 24       	eor	r1, r1
 8fc:	91 1d       	adc	r25, r1
 8fe:	08 95       	ret

00000900 <_exit>:
 900:	f8 94       	cli

00000902 <__stop_program>:
 902:	ff cf       	rjmp	.-2      	; 0x902 <__stop_program>
