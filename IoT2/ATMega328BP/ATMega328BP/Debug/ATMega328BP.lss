
ATMega328BP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ac  00800100  00000686  0000071a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000686  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  008001ac  008001ac  000007c6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000007c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000824  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000864  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000121a  00000000  00000000  00000914  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cb2  00000000  00000000  00001b2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006b4  00000000  00000000  000027e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001cc  00000000  00000000  00002e94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006d4  00000000  00000000  00003060  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000478  00000000  00000000  00003734  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00003bac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e6 e8       	ldi	r30, 0x86	; 134
  c8:	f6 e0       	ldi	r31, 0x06	; 6
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	ac 3a       	cpi	r26, 0xAC	; 172
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	ac ea       	ldi	r26, 0xAC	; 172
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a8 3b       	cpi	r26, 0xB8	; 184
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 79 00 	call	0xf2	; 0xf2 <main>
  ea:	0c 94 41 03 	jmp	0x682	; 0x682 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <main>:

uint16_t Add8BitNumbers(uint8_t Number1, uint8_t Number2) {
	return (Number1 + Number2);
}

int main(void) {
  f2:	cf 93       	push	r28
  f4:	df 93       	push	r29
  f6:	00 d0       	rcall	.+0      	; 0xf8 <main+0x6>
  f8:	cd b7       	in	r28, 0x3d	; 61
  fa:	de b7       	in	r29, 0x3e	; 62
	RS232Init();
  fc:	0e 94 1e 01 	call	0x23c	; 0x23c <RS232Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 100:	87 ea       	ldi	r24, 0xA7	; 167
 102:	91 e6       	ldi	r25, 0x61	; 97
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <main+0x12>
 108:	00 c0       	rjmp	.+0      	; 0x10a <main+0x18>
 10a:	00 00       	nop
	_delay_ms(100);
	
	sei();
 10c:	78 94       	sei
	Enable_UART_Receive_Interrupt();
 10e:	0e 94 36 01 	call	0x26c	; 0x26c <Enable_UART_Receive_Interrupt>
	
	State currentState = Modtag_Adresse;
 112:	19 82       	std	Y+1, r1	; 0x01
	uint8_t address = 0x00;
 114:	1a 82       	std	Y+2, r1	; 0x02

	while (1) {
		if(UCSR0A  & (1 << RXC0)){
 116:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 11a:	88 23       	and	r24, r24
 11c:	e4 f7       	brge	.-8      	; 0x116 <main+0x24>
			char recviedChar = uart_getch(NULL);
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 0d 01 	call	0x21a	; 0x21a <uart_getch>
			handle_state_machine(&currentState, recviedChar, &address);
 126:	ae 01       	movw	r20, r28
 128:	4e 5f       	subi	r20, 0xFE	; 254
 12a:	5f 4f       	sbci	r21, 0xFF	; 255
 12c:	68 2f       	mov	r22, r24
 12e:	ce 01       	movw	r24, r28
 130:	01 96       	adiw	r24, 0x01	; 1
 132:	0e 94 9c 00 	call	0x138	; 0x138 <handle_state_machine>
 136:	ef cf       	rjmp	.-34     	; 0x116 <main+0x24>

00000138 <handle_state_machine>:
	Modtag_Adresse,
	Modtag_Bit_Position_I_Adresse,
	Modtag_Bit_Position_Vaerdi
} State;

void handle_state_machine(State *currentState, char recivedChar, uint8_t *address) {
 138:	ef 92       	push	r14
 13a:	ff 92       	push	r15
 13c:	1f 93       	push	r17
 13e:	cf 93       	push	r28
 140:	df 93       	push	r29
 142:	ec 01       	movw	r28, r24
 144:	16 2f       	mov	r17, r22
 146:	7a 01       	movw	r14, r20
	static char hexBuffer[3] = {0};
	static uint8_t hexIndex = 0;
	
	UART_PrintString("Recieved Char: ");
 148:	8c e1       	ldi	r24, 0x1C	; 28
 14a:	91 e0       	ldi	r25, 0x01	; 1
 14c:	0e 94 3c 01 	call	0x278	; 0x278 <UART_PrintString>
	UART_PrintHex((uint8_t)recivedChar);
 150:	81 2f       	mov	r24, r17
 152:	0e 94 4b 01 	call	0x296	; 0x296 <UART_PrintHex>
	UART_PrintString("\n");
 156:	88 e9       	ldi	r24, 0x98	; 152
 158:	91 e0       	ldi	r25, 0x01	; 1
 15a:	0e 94 3c 01 	call	0x278	; 0x278 <UART_PrintString>

	switch (*currentState) {
 15e:	88 81       	ld	r24, Y
 160:	81 30       	cpi	r24, 0x01	; 1
 162:	e1 f1       	breq	.+120    	; 0x1dc <handle_state_machine+0xa4>
 164:	20 f0       	brcs	.+8      	; 0x16e <handle_state_machine+0x36>
 166:	82 30       	cpi	r24, 0x02	; 2
 168:	09 f4       	brne	.+2      	; 0x16c <handle_state_machine+0x34>
 16a:	47 c0       	rjmp	.+142    	; 0x1fa <handle_state_machine+0xc2>
 16c:	4c c0       	rjmp	.+152    	; 0x206 <handle_state_machine+0xce>
		case Modtag_Adresse:
		if (recivedChar == ':') {
 16e:	1a 33       	cpi	r17, 0x3A	; 58
 170:	e9 f4       	brne	.+58     	; 0x1ac <handle_state_machine+0x74>
			*address = (uint8_t)strtol(hexBuffer, NULL, 16);
 172:	40 e1       	ldi	r20, 0x10	; 16
 174:	50 e0       	ldi	r21, 0x00	; 0
 176:	60 e0       	ldi	r22, 0x00	; 0
 178:	70 e0       	ldi	r23, 0x00	; 0
 17a:	8d ea       	ldi	r24, 0xAD	; 173
 17c:	91 e0       	ldi	r25, 0x01	; 1
 17e:	0e 94 90 01 	call	0x320	; 0x320 <strtol>
 182:	f7 01       	movw	r30, r14
 184:	60 83       	st	Z, r22
			
			UART_PrintString("Received address: 0x");
 186:	8c e2       	ldi	r24, 0x2C	; 44
 188:	91 e0       	ldi	r25, 0x01	; 1
 18a:	0e 94 3c 01 	call	0x278	; 0x278 <UART_PrintString>
			UART_PrintHex(*address); // Print the address in hexadecimal
 18e:	f7 01       	movw	r30, r14
 190:	80 81       	ld	r24, Z
 192:	0e 94 4b 01 	call	0x296	; 0x296 <UART_PrintHex>
			UART_PrintString("\n");
 196:	88 e9       	ldi	r24, 0x98	; 152
 198:	91 e0       	ldi	r25, 0x01	; 1
 19a:	0e 94 3c 01 	call	0x278	; 0x278 <UART_PrintString>

			// Reset for the next address
			hexIndex = 0;
 19e:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <__data_end>
			hexBuffer[0] = '\0';
 1a2:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <hexBuffer.2030>
			*currentState = Modtag_Bit_Position_I_Adresse;
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	88 83       	st	Y, r24
 1aa:	31 c0       	rjmp	.+98     	; 0x20e <handle_state_machine+0xd6>
		}
		else if (isxdigit(recivedChar) && hexIndex < 2) {
 1ac:	81 2f       	mov	r24, r17
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	0e 94 a6 02 	call	0x54c	; 0x54c <isxdigit>
 1b4:	89 2b       	or	r24, r25
 1b6:	59 f1       	breq	.+86     	; 0x20e <handle_state_machine+0xd6>
 1b8:	e0 91 ac 01 	lds	r30, 0x01AC	; 0x8001ac <__data_end>
 1bc:	e2 30       	cpi	r30, 0x02	; 2
 1be:	38 f5       	brcc	.+78     	; 0x20e <handle_state_machine+0xd6>
			hexBuffer[hexIndex++] = recivedChar;
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	8e 0f       	add	r24, r30
 1c4:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <__data_end>
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	e3 55       	subi	r30, 0x53	; 83
 1cc:	fe 4f       	sbci	r31, 0xFE	; 254
 1ce:	10 83       	st	Z, r17
			hexBuffer[hexIndex] = '\0';
 1d0:	e8 2f       	mov	r30, r24
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	e3 55       	subi	r30, 0x53	; 83
 1d6:	fe 4f       	sbci	r31, 0xFE	; 254
 1d8:	10 82       	st	Z, r1
 1da:	19 c0       	rjmp	.+50     	; 0x20e <handle_state_machine+0xd6>
		}
		break;

		case Modtag_Bit_Position_I_Adresse:
		UART_PrintString("Enter bit position for address: 0x");
 1dc:	81 e4       	ldi	r24, 0x41	; 65
 1de:	91 e0       	ldi	r25, 0x01	; 1
 1e0:	0e 94 3c 01 	call	0x278	; 0x278 <UART_PrintString>
		UART_PrintHex(*address);
 1e4:	f7 01       	movw	r30, r14
 1e6:	80 81       	ld	r24, Z
 1e8:	0e 94 4b 01 	call	0x296	; 0x296 <UART_PrintHex>
		UART_PrintString("\n");
 1ec:	88 e9       	ldi	r24, 0x98	; 152
 1ee:	91 e0       	ldi	r25, 0x01	; 1
 1f0:	0e 94 3c 01 	call	0x278	; 0x278 <UART_PrintString>

		*currentState = Modtag_Bit_Position_Vaerdi;
 1f4:	82 e0       	ldi	r24, 0x02	; 2
 1f6:	88 83       	st	Y, r24
		break;
 1f8:	0a c0       	rjmp	.+20     	; 0x20e <handle_state_machine+0xd6>

		case Modtag_Bit_Position_Vaerdi:
		UART_PrintString("Enter bit value (0 or 1) for position\n");
 1fa:	84 e6       	ldi	r24, 0x64	; 100
 1fc:	91 e0       	ldi	r25, 0x01	; 1
 1fe:	0e 94 3c 01 	call	0x278	; 0x278 <UART_PrintString>
		
		*currentState = Modtag_Adresse;  // Reset to wait for the next address
 202:	18 82       	st	Y, r1
		break;
 204:	04 c0       	rjmp	.+8      	; 0x20e <handle_state_machine+0xd6>

		default:
		UART_PrintString("Unknown state\n");
 206:	8b e8       	ldi	r24, 0x8B	; 139
 208:	91 e0       	ldi	r25, 0x01	; 1
 20a:	0e 94 3c 01 	call	0x278	; 0x278 <UART_PrintString>
		break;
	}
}
 20e:	df 91       	pop	r29
 210:	cf 91       	pop	r28
 212:	1f 91       	pop	r17
 214:	ff 90       	pop	r15
 216:	ef 90       	pop	r14
 218:	08 95       	ret

0000021a <uart_getch>:
		uart_putch(*str++, NULL);
	}
}

void UART_PrintChar(char c) {
	uart_putch(c, NULL);
 21a:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
 21e:	88 23       	and	r24, r24
 220:	e4 f7       	brge	.-8      	; 0x21a <uart_getch>
 222:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	08 95       	ret

0000022a <uart_putch>:
 22a:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
 22e:	95 ff       	sbrs	r25, 5
 230:	fc cf       	rjmp	.-8      	; 0x22a <uart_putch>
 232:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	08 95       	ret

0000023c <RS232Init>:
 23c:	83 e3       	ldi	r24, 0x33	; 51
 23e:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f80cc>
 242:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f80cd>
 246:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
 24a:	88 e1       	ldi	r24, 0x18	; 24
 24c:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7f80c9>
 250:	86 e0       	ldi	r24, 0x06	; 6
 252:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7f80ca>
 256:	e0 eb       	ldi	r30, 0xB0	; 176
 258:	f1 e0       	ldi	r31, 0x01	; 1
 25a:	8e e0       	ldi	r24, 0x0E	; 14
 25c:	91 e0       	ldi	r25, 0x01	; 1
 25e:	93 83       	std	Z+3, r25	; 0x03
 260:	82 83       	std	Z+2, r24	; 0x02
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	91 e0       	ldi	r25, 0x01	; 1
 266:	91 83       	std	Z+1, r25	; 0x01
 268:	80 83       	st	Z, r24
 26a:	08 95       	ret

0000026c <Enable_UART_Receive_Interrupt>:
 26c:	e9 ec       	ldi	r30, 0xC9	; 201
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	80 81       	ld	r24, Z
 272:	80 68       	ori	r24, 0x80	; 128
 274:	80 83       	st	Z, r24
 276:	08 95       	ret

00000278 <UART_PrintString>:
 278:	cf 93       	push	r28
 27a:	df 93       	push	r29
 27c:	ec 01       	movw	r28, r24
 27e:	05 c0       	rjmp	.+10     	; 0x28a <UART_PrintString+0x12>
 280:	21 96       	adiw	r28, 0x01	; 1
 282:	60 e0       	ldi	r22, 0x00	; 0
 284:	70 e0       	ldi	r23, 0x00	; 0
 286:	0e 94 15 01 	call	0x22a	; 0x22a <uart_putch>
 28a:	88 81       	ld	r24, Y
 28c:	81 11       	cpse	r24, r1
 28e:	f8 cf       	rjmp	.-16     	; 0x280 <UART_PrintString+0x8>
 290:	df 91       	pop	r29
 292:	cf 91       	pop	r28
 294:	08 95       	ret

00000296 <UART_PrintHex>:
}

void UART_PrintHex(uint8_t value) {
 296:	ef 92       	push	r14
 298:	ff 92       	push	r15
 29a:	1f 93       	push	r17
 29c:	cf 93       	push	r28
 29e:	df 93       	push	r29
 2a0:	cd b7       	in	r28, 0x3d	; 61
 2a2:	de b7       	in	r29, 0x3e	; 62
 2a4:	61 97       	sbiw	r28, 0x11	; 17
 2a6:	0f b6       	in	r0, 0x3f	; 63
 2a8:	f8 94       	cli
 2aa:	de bf       	out	0x3e, r29	; 62
 2ac:	0f be       	out	0x3f, r0	; 63
 2ae:	cd bf       	out	0x3d, r28	; 61
 2b0:	18 2f       	mov	r17, r24
	const char hexDigits[] = "0123456789ABCDEF";
 2b2:	81 e1       	ldi	r24, 0x11	; 17
 2b4:	ea e9       	ldi	r30, 0x9A	; 154
 2b6:	f1 e0       	ldi	r31, 0x01	; 1
 2b8:	de 01       	movw	r26, r28
 2ba:	11 96       	adiw	r26, 0x01	; 1
 2bc:	01 90       	ld	r0, Z+
 2be:	0d 92       	st	X+, r0
 2c0:	8a 95       	dec	r24
 2c2:	e1 f7       	brne	.-8      	; 0x2bc <UART_PrintHex+0x26>
	uart_putch(hexDigits[value >> 4], stdout); // Send high nibble
 2c4:	0f 2e       	mov	r0, r31
 2c6:	f0 eb       	ldi	r31, 0xB0	; 176
 2c8:	ef 2e       	mov	r14, r31
 2ca:	f1 e0       	ldi	r31, 0x01	; 1
 2cc:	ff 2e       	mov	r15, r31
 2ce:	f0 2d       	mov	r31, r0
 2d0:	f7 01       	movw	r30, r14
 2d2:	62 81       	ldd	r22, Z+2	; 0x02
 2d4:	73 81       	ldd	r23, Z+3	; 0x03
 2d6:	81 2f       	mov	r24, r17
 2d8:	82 95       	swap	r24
 2da:	8f 70       	andi	r24, 0x0F	; 15
 2dc:	e1 e0       	ldi	r30, 0x01	; 1
 2de:	f0 e0       	ldi	r31, 0x00	; 0
 2e0:	ec 0f       	add	r30, r28
 2e2:	fd 1f       	adc	r31, r29
 2e4:	e8 0f       	add	r30, r24
 2e6:	f1 1d       	adc	r31, r1
 2e8:	80 81       	ld	r24, Z
 2ea:	0e 94 15 01 	call	0x22a	; 0x22a <uart_putch>
	uart_putch(hexDigits[value & 0x0F], stdout); // Send low nibble
 2ee:	f7 01       	movw	r30, r14
 2f0:	62 81       	ldd	r22, Z+2	; 0x02
 2f2:	73 81       	ldd	r23, Z+3	; 0x03
 2f4:	1f 70       	andi	r17, 0x0F	; 15
 2f6:	e1 e0       	ldi	r30, 0x01	; 1
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	ec 0f       	add	r30, r28
 2fc:	fd 1f       	adc	r31, r29
 2fe:	e1 0f       	add	r30, r17
 300:	f1 1d       	adc	r31, r1
 302:	80 81       	ld	r24, Z
 304:	0e 94 15 01 	call	0x22a	; 0x22a <uart_putch>
}
 308:	61 96       	adiw	r28, 0x11	; 17
 30a:	0f b6       	in	r0, 0x3f	; 63
 30c:	f8 94       	cli
 30e:	de bf       	out	0x3e, r29	; 62
 310:	0f be       	out	0x3f, r0	; 63
 312:	cd bf       	out	0x3d, r28	; 61
 314:	df 91       	pop	r29
 316:	cf 91       	pop	r28
 318:	1f 91       	pop	r17
 31a:	ff 90       	pop	r15
 31c:	ef 90       	pop	r14
 31e:	08 95       	ret

00000320 <strtol>:
 320:	a0 e0       	ldi	r26, 0x00	; 0
 322:	b0 e0       	ldi	r27, 0x00	; 0
 324:	e6 e9       	ldi	r30, 0x96	; 150
 326:	f1 e0       	ldi	r31, 0x01	; 1
 328:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__prologue_saves__+0x2>
 32c:	5c 01       	movw	r10, r24
 32e:	6b 01       	movw	r12, r22
 330:	7a 01       	movw	r14, r20
 332:	61 15       	cp	r22, r1
 334:	71 05       	cpc	r23, r1
 336:	19 f0       	breq	.+6      	; 0x33e <strtol+0x1e>
 338:	fb 01       	movw	r30, r22
 33a:	91 83       	std	Z+1, r25	; 0x01
 33c:	80 83       	st	Z, r24
 33e:	e1 14       	cp	r14, r1
 340:	f1 04       	cpc	r15, r1
 342:	29 f0       	breq	.+10     	; 0x34e <strtol+0x2e>
 344:	c7 01       	movw	r24, r14
 346:	02 97       	sbiw	r24, 0x02	; 2
 348:	83 97       	sbiw	r24, 0x23	; 35
 34a:	08 f0       	brcs	.+2      	; 0x34e <strtol+0x2e>
 34c:	e5 c0       	rjmp	.+458    	; 0x518 <__EEPROM_REGION_LENGTH__+0x118>
 34e:	e5 01       	movw	r28, r10
 350:	21 96       	adiw	r28, 0x01	; 1
 352:	f5 01       	movw	r30, r10
 354:	10 81       	ld	r17, Z
 356:	81 2f       	mov	r24, r17
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	0e 94 b2 02 	call	0x564	; 0x564 <isspace>
 35e:	89 2b       	or	r24, r25
 360:	11 f0       	breq	.+4      	; 0x366 <strtol+0x46>
 362:	5e 01       	movw	r10, r28
 364:	f4 cf       	rjmp	.-24     	; 0x34e <strtol+0x2e>
 366:	1d 32       	cpi	r17, 0x2D	; 45
 368:	29 f4       	brne	.+10     	; 0x374 <strtol+0x54>
 36a:	21 96       	adiw	r28, 0x01	; 1
 36c:	f5 01       	movw	r30, r10
 36e:	11 81       	ldd	r17, Z+1	; 0x01
 370:	01 e0       	ldi	r16, 0x01	; 1
 372:	07 c0       	rjmp	.+14     	; 0x382 <strtol+0x62>
 374:	1b 32       	cpi	r17, 0x2B	; 43
 376:	21 f4       	brne	.+8      	; 0x380 <strtol+0x60>
 378:	e5 01       	movw	r28, r10
 37a:	22 96       	adiw	r28, 0x02	; 2
 37c:	f5 01       	movw	r30, r10
 37e:	11 81       	ldd	r17, Z+1	; 0x01
 380:	00 e0       	ldi	r16, 0x00	; 0
 382:	e1 14       	cp	r14, r1
 384:	f1 04       	cpc	r15, r1
 386:	09 f1       	breq	.+66     	; 0x3ca <strtol+0xaa>
 388:	f0 e1       	ldi	r31, 0x10	; 16
 38a:	ef 16       	cp	r14, r31
 38c:	f1 04       	cpc	r15, r1
 38e:	29 f4       	brne	.+10     	; 0x39a <strtol+0x7a>
 390:	3f c0       	rjmp	.+126    	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 392:	10 e3       	ldi	r17, 0x30	; 48
 394:	e1 14       	cp	r14, r1
 396:	f1 04       	cpc	r15, r1
 398:	21 f1       	breq	.+72     	; 0x3e2 <strtol+0xc2>
 39a:	28 e0       	ldi	r18, 0x08	; 8
 39c:	e2 16       	cp	r14, r18
 39e:	f1 04       	cpc	r15, r1
 3a0:	01 f1       	breq	.+64     	; 0x3e2 <strtol+0xc2>
 3a2:	54 f4       	brge	.+20     	; 0x3b8 <strtol+0x98>
 3a4:	e2 e0       	ldi	r30, 0x02	; 2
 3a6:	ee 16       	cp	r14, r30
 3a8:	f1 04       	cpc	r15, r1
 3aa:	21 f5       	brne	.+72     	; 0x3f4 <strtol+0xd4>
 3ac:	81 2c       	mov	r8, r1
 3ae:	91 2c       	mov	r9, r1
 3b0:	a1 2c       	mov	r10, r1
 3b2:	b0 e4       	ldi	r27, 0x40	; 64
 3b4:	bb 2e       	mov	r11, r27
 3b6:	3e c0       	rjmp	.+124    	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 3b8:	fa e0       	ldi	r31, 0x0A	; 10
 3ba:	ef 16       	cp	r14, r31
 3bc:	f1 04       	cpc	r15, r1
 3be:	39 f0       	breq	.+14     	; 0x3ce <strtol+0xae>
 3c0:	20 e1       	ldi	r18, 0x10	; 16
 3c2:	e2 16       	cp	r14, r18
 3c4:	f1 04       	cpc	r15, r1
 3c6:	b1 f4       	brne	.+44     	; 0x3f4 <strtol+0xd4>
 3c8:	30 c0       	rjmp	.+96     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 3ca:	10 33       	cpi	r17, 0x30	; 48
 3cc:	19 f1       	breq	.+70     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 3ce:	fa e0       	ldi	r31, 0x0A	; 10
 3d0:	ef 2e       	mov	r14, r31
 3d2:	f1 2c       	mov	r15, r1
 3d4:	ac ec       	ldi	r26, 0xCC	; 204
 3d6:	8a 2e       	mov	r8, r26
 3d8:	98 2c       	mov	r9, r8
 3da:	a8 2c       	mov	r10, r8
 3dc:	ac e0       	ldi	r26, 0x0C	; 12
 3de:	ba 2e       	mov	r11, r26
 3e0:	29 c0       	rjmp	.+82     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 3e2:	78 e0       	ldi	r23, 0x08	; 8
 3e4:	e7 2e       	mov	r14, r23
 3e6:	f1 2c       	mov	r15, r1
 3e8:	81 2c       	mov	r8, r1
 3ea:	91 2c       	mov	r9, r1
 3ec:	a1 2c       	mov	r10, r1
 3ee:	e0 e1       	ldi	r30, 0x10	; 16
 3f0:	be 2e       	mov	r11, r30
 3f2:	20 c0       	rjmp	.+64     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 3f4:	60 e0       	ldi	r22, 0x00	; 0
 3f6:	70 e0       	ldi	r23, 0x00	; 0
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	90 e8       	ldi	r25, 0x80	; 128
 3fc:	97 01       	movw	r18, r14
 3fe:	0f 2c       	mov	r0, r15
 400:	00 0c       	add	r0, r0
 402:	44 0b       	sbc	r20, r20
 404:	55 0b       	sbc	r21, r21
 406:	0e 94 ce 02 	call	0x59c	; 0x59c <__udivmodsi4>
 40a:	49 01       	movw	r8, r18
 40c:	5a 01       	movw	r10, r20
 40e:	12 c0       	rjmp	.+36     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 410:	10 33       	cpi	r17, 0x30	; 48
 412:	59 f4       	brne	.+22     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 414:	88 81       	ld	r24, Y
 416:	8f 7d       	andi	r24, 0xDF	; 223
 418:	88 35       	cpi	r24, 0x58	; 88
 41a:	09 f0       	breq	.+2      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 41c:	ba cf       	rjmp	.-140    	; 0x392 <strtol+0x72>
 41e:	19 81       	ldd	r17, Y+1	; 0x01
 420:	22 96       	adiw	r28, 0x02	; 2
 422:	02 60       	ori	r16, 0x02	; 2
 424:	80 e1       	ldi	r24, 0x10	; 16
 426:	e8 2e       	mov	r14, r24
 428:	f1 2c       	mov	r15, r1
 42a:	81 2c       	mov	r8, r1
 42c:	91 2c       	mov	r9, r1
 42e:	a1 2c       	mov	r10, r1
 430:	68 e0       	ldi	r22, 0x08	; 8
 432:	b6 2e       	mov	r11, r22
 434:	40 e0       	ldi	r20, 0x00	; 0
 436:	60 e0       	ldi	r22, 0x00	; 0
 438:	70 e0       	ldi	r23, 0x00	; 0
 43a:	cb 01       	movw	r24, r22
 43c:	27 01       	movw	r4, r14
 43e:	0f 2c       	mov	r0, r15
 440:	00 0c       	add	r0, r0
 442:	66 08       	sbc	r6, r6
 444:	77 08       	sbc	r7, r7
 446:	fe 01       	movw	r30, r28
 448:	50 ed       	ldi	r21, 0xD0	; 208
 44a:	35 2e       	mov	r3, r21
 44c:	31 0e       	add	r3, r17
 44e:	29 e0       	ldi	r18, 0x09	; 9
 450:	23 15       	cp	r18, r3
 452:	70 f4       	brcc	.+28     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 454:	2f eb       	ldi	r18, 0xBF	; 191
 456:	21 0f       	add	r18, r17
 458:	2a 31       	cpi	r18, 0x1A	; 26
 45a:	18 f4       	brcc	.+6      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 45c:	39 ec       	ldi	r19, 0xC9	; 201
 45e:	33 2e       	mov	r3, r19
 460:	06 c0       	rjmp	.+12     	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 462:	2f e9       	ldi	r18, 0x9F	; 159
 464:	21 0f       	add	r18, r17
 466:	2a 31       	cpi	r18, 0x1A	; 26
 468:	18 f5       	brcc	.+70     	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
 46a:	29 ea       	ldi	r18, 0xA9	; 169
 46c:	32 2e       	mov	r3, r18
 46e:	31 0e       	add	r3, r17
 470:	23 2d       	mov	r18, r3
 472:	30 e0       	ldi	r19, 0x00	; 0
 474:	2e 15       	cp	r18, r14
 476:	3f 05       	cpc	r19, r15
 478:	dc f4       	brge	.+54     	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
 47a:	47 fd       	sbrc	r20, 7
 47c:	16 c0       	rjmp	.+44     	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
 47e:	86 16       	cp	r8, r22
 480:	97 06       	cpc	r9, r23
 482:	a8 06       	cpc	r10, r24
 484:	b9 06       	cpc	r11, r25
 486:	70 f0       	brcs	.+28     	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
 488:	a3 01       	movw	r20, r6
 48a:	92 01       	movw	r18, r4
 48c:	0e 94 be 02 	call	0x57c	; 0x57c <__mulsi3>
 490:	63 0d       	add	r22, r3
 492:	71 1d       	adc	r23, r1
 494:	81 1d       	adc	r24, r1
 496:	91 1d       	adc	r25, r1
 498:	61 30       	cpi	r22, 0x01	; 1
 49a:	71 05       	cpc	r23, r1
 49c:	81 05       	cpc	r24, r1
 49e:	20 e8       	ldi	r18, 0x80	; 128
 4a0:	92 07       	cpc	r25, r18
 4a2:	10 f0       	brcs	.+4      	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
 4a4:	4f ef       	ldi	r20, 0xFF	; 255
 4a6:	01 c0       	rjmp	.+2      	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
 4a8:	41 e0       	ldi	r20, 0x01	; 1
 4aa:	21 96       	adiw	r28, 0x01	; 1
 4ac:	10 81       	ld	r17, Z
 4ae:	cb cf       	rjmp	.-106    	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 4b0:	20 2f       	mov	r18, r16
 4b2:	21 70       	andi	r18, 0x01	; 1
 4b4:	c1 14       	cp	r12, r1
 4b6:	d1 04       	cpc	r13, r1
 4b8:	71 f0       	breq	.+28     	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
 4ba:	44 23       	and	r20, r20
 4bc:	29 f0       	breq	.+10     	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
 4be:	21 97       	sbiw	r28, 0x01	; 1
 4c0:	f6 01       	movw	r30, r12
 4c2:	d1 83       	std	Z+1, r29	; 0x01
 4c4:	c0 83       	st	Z, r28
 4c6:	07 c0       	rjmp	.+14     	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
 4c8:	01 ff       	sbrs	r16, 1
 4ca:	19 c0       	rjmp	.+50     	; 0x4fe <__EEPROM_REGION_LENGTH__+0xfe>
 4cc:	22 97       	sbiw	r28, 0x02	; 2
 4ce:	f6 01       	movw	r30, r12
 4d0:	d1 83       	std	Z+1, r29	; 0x01
 4d2:	c0 83       	st	Z, r28
 4d4:	14 c0       	rjmp	.+40     	; 0x4fe <__EEPROM_REGION_LENGTH__+0xfe>
 4d6:	47 ff       	sbrs	r20, 7
 4d8:	12 c0       	rjmp	.+36     	; 0x4fe <__EEPROM_REGION_LENGTH__+0xfe>
 4da:	22 23       	and	r18, r18
 4dc:	29 f0       	breq	.+10     	; 0x4e8 <__EEPROM_REGION_LENGTH__+0xe8>
 4de:	60 e0       	ldi	r22, 0x00	; 0
 4e0:	70 e0       	ldi	r23, 0x00	; 0
 4e2:	80 e0       	ldi	r24, 0x00	; 0
 4e4:	90 e8       	ldi	r25, 0x80	; 128
 4e6:	04 c0       	rjmp	.+8      	; 0x4f0 <__EEPROM_REGION_LENGTH__+0xf0>
 4e8:	6f ef       	ldi	r22, 0xFF	; 255
 4ea:	7f ef       	ldi	r23, 0xFF	; 255
 4ec:	8f ef       	ldi	r24, 0xFF	; 255
 4ee:	9f e7       	ldi	r25, 0x7F	; 127
 4f0:	22 e2       	ldi	r18, 0x22	; 34
 4f2:	30 e0       	ldi	r19, 0x00	; 0
 4f4:	30 93 b7 01 	sts	0x01B7, r19	; 0x8001b7 <errno+0x1>
 4f8:	20 93 b6 01 	sts	0x01B6, r18	; 0x8001b6 <errno>
 4fc:	09 c0       	rjmp	.+18     	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
 4fe:	22 23       	and	r18, r18
 500:	81 f0       	breq	.+32     	; 0x522 <__EEPROM_REGION_LENGTH__+0x122>
 502:	90 95       	com	r25
 504:	80 95       	com	r24
 506:	70 95       	com	r23
 508:	61 95       	neg	r22
 50a:	7f 4f       	sbci	r23, 0xFF	; 255
 50c:	8f 4f       	sbci	r24, 0xFF	; 255
 50e:	9f 4f       	sbci	r25, 0xFF	; 255
 510:	46 2f       	mov	r20, r22
 512:	37 2f       	mov	r19, r23
 514:	28 2f       	mov	r18, r24
 516:	12 c0       	rjmp	.+36     	; 0x53c <__EEPROM_REGION_LENGTH__+0x13c>
 518:	40 e0       	ldi	r20, 0x00	; 0
 51a:	30 e0       	ldi	r19, 0x00	; 0
 51c:	20 e0       	ldi	r18, 0x00	; 0
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	0d c0       	rjmp	.+26     	; 0x53c <__EEPROM_REGION_LENGTH__+0x13c>
 522:	97 ff       	sbrs	r25, 7
 524:	f5 cf       	rjmp	.-22     	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
 526:	82 e2       	ldi	r24, 0x22	; 34
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <errno+0x1>
 52e:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <errno>
 532:	6f ef       	ldi	r22, 0xFF	; 255
 534:	7f ef       	ldi	r23, 0xFF	; 255
 536:	8f ef       	ldi	r24, 0xFF	; 255
 538:	9f e7       	ldi	r25, 0x7F	; 127
 53a:	ea cf       	rjmp	.-44     	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
 53c:	64 2f       	mov	r22, r20
 53e:	73 2f       	mov	r23, r19
 540:	82 2f       	mov	r24, r18
 542:	cd b7       	in	r28, 0x3d	; 61
 544:	de b7       	in	r29, 0x3e	; 62
 546:	e1 e1       	ldi	r30, 0x11	; 17
 548:	0c 94 18 03 	jmp	0x630	; 0x630 <__epilogue_restores__+0x2>

0000054c <isxdigit>:
 54c:	91 11       	cpse	r25, r1
 54e:	0c 94 bb 02 	jmp	0x576	; 0x576 <__ctype_isfalse>
 552:	80 53       	subi	r24, 0x30	; 48
 554:	8a 50       	subi	r24, 0x0A	; 10
 556:	28 f0       	brcs	.+10     	; 0x562 <isxdigit+0x16>
 558:	86 5c       	subi	r24, 0xC6	; 198
 55a:	80 62       	ori	r24, 0x20	; 32
 55c:	81 56       	subi	r24, 0x61	; 97
 55e:	86 50       	subi	r24, 0x06	; 6
 560:	b0 f7       	brcc	.-20     	; 0x54e <isxdigit+0x2>
 562:	08 95       	ret

00000564 <isspace>:
 564:	91 11       	cpse	r25, r1
 566:	0c 94 bb 02 	jmp	0x576	; 0x576 <__ctype_isfalse>
 56a:	80 32       	cpi	r24, 0x20	; 32
 56c:	19 f0       	breq	.+6      	; 0x574 <isspace+0x10>
 56e:	89 50       	subi	r24, 0x09	; 9
 570:	85 50       	subi	r24, 0x05	; 5
 572:	c8 f7       	brcc	.-14     	; 0x566 <isspace+0x2>
 574:	08 95       	ret

00000576 <__ctype_isfalse>:
 576:	99 27       	eor	r25, r25
 578:	88 27       	eor	r24, r24

0000057a <__ctype_istrue>:
 57a:	08 95       	ret

0000057c <__mulsi3>:
 57c:	db 01       	movw	r26, r22
 57e:	8f 93       	push	r24
 580:	9f 93       	push	r25
 582:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <__muluhisi3>
 586:	bf 91       	pop	r27
 588:	af 91       	pop	r26
 58a:	a2 9f       	mul	r26, r18
 58c:	80 0d       	add	r24, r0
 58e:	91 1d       	adc	r25, r1
 590:	a3 9f       	mul	r26, r19
 592:	90 0d       	add	r25, r0
 594:	b2 9f       	mul	r27, r18
 596:	90 0d       	add	r25, r0
 598:	11 24       	eor	r1, r1
 59a:	08 95       	ret

0000059c <__udivmodsi4>:
 59c:	a1 e2       	ldi	r26, 0x21	; 33
 59e:	1a 2e       	mov	r1, r26
 5a0:	aa 1b       	sub	r26, r26
 5a2:	bb 1b       	sub	r27, r27
 5a4:	fd 01       	movw	r30, r26
 5a6:	0d c0       	rjmp	.+26     	; 0x5c2 <__udivmodsi4_ep>

000005a8 <__udivmodsi4_loop>:
 5a8:	aa 1f       	adc	r26, r26
 5aa:	bb 1f       	adc	r27, r27
 5ac:	ee 1f       	adc	r30, r30
 5ae:	ff 1f       	adc	r31, r31
 5b0:	a2 17       	cp	r26, r18
 5b2:	b3 07       	cpc	r27, r19
 5b4:	e4 07       	cpc	r30, r20
 5b6:	f5 07       	cpc	r31, r21
 5b8:	20 f0       	brcs	.+8      	; 0x5c2 <__udivmodsi4_ep>
 5ba:	a2 1b       	sub	r26, r18
 5bc:	b3 0b       	sbc	r27, r19
 5be:	e4 0b       	sbc	r30, r20
 5c0:	f5 0b       	sbc	r31, r21

000005c2 <__udivmodsi4_ep>:
 5c2:	66 1f       	adc	r22, r22
 5c4:	77 1f       	adc	r23, r23
 5c6:	88 1f       	adc	r24, r24
 5c8:	99 1f       	adc	r25, r25
 5ca:	1a 94       	dec	r1
 5cc:	69 f7       	brne	.-38     	; 0x5a8 <__udivmodsi4_loop>
 5ce:	60 95       	com	r22
 5d0:	70 95       	com	r23
 5d2:	80 95       	com	r24
 5d4:	90 95       	com	r25
 5d6:	9b 01       	movw	r18, r22
 5d8:	ac 01       	movw	r20, r24
 5da:	bd 01       	movw	r22, r26
 5dc:	cf 01       	movw	r24, r30
 5de:	08 95       	ret

000005e0 <__muluhisi3>:
 5e0:	0e 94 32 03 	call	0x664	; 0x664 <__umulhisi3>
 5e4:	a5 9f       	mul	r26, r21
 5e6:	90 0d       	add	r25, r0
 5e8:	b4 9f       	mul	r27, r20
 5ea:	90 0d       	add	r25, r0
 5ec:	a4 9f       	mul	r26, r20
 5ee:	80 0d       	add	r24, r0
 5f0:	91 1d       	adc	r25, r1
 5f2:	11 24       	eor	r1, r1
 5f4:	08 95       	ret

000005f6 <__prologue_saves__>:
 5f6:	2f 92       	push	r2
 5f8:	3f 92       	push	r3
 5fa:	4f 92       	push	r4
 5fc:	5f 92       	push	r5
 5fe:	6f 92       	push	r6
 600:	7f 92       	push	r7
 602:	8f 92       	push	r8
 604:	9f 92       	push	r9
 606:	af 92       	push	r10
 608:	bf 92       	push	r11
 60a:	cf 92       	push	r12
 60c:	df 92       	push	r13
 60e:	ef 92       	push	r14
 610:	ff 92       	push	r15
 612:	0f 93       	push	r16
 614:	1f 93       	push	r17
 616:	cf 93       	push	r28
 618:	df 93       	push	r29
 61a:	cd b7       	in	r28, 0x3d	; 61
 61c:	de b7       	in	r29, 0x3e	; 62
 61e:	ca 1b       	sub	r28, r26
 620:	db 0b       	sbc	r29, r27
 622:	0f b6       	in	r0, 0x3f	; 63
 624:	f8 94       	cli
 626:	de bf       	out	0x3e, r29	; 62
 628:	0f be       	out	0x3f, r0	; 63
 62a:	cd bf       	out	0x3d, r28	; 61
 62c:	09 94       	ijmp

0000062e <__epilogue_restores__>:
 62e:	2a 88       	ldd	r2, Y+18	; 0x12
 630:	39 88       	ldd	r3, Y+17	; 0x11
 632:	48 88       	ldd	r4, Y+16	; 0x10
 634:	5f 84       	ldd	r5, Y+15	; 0x0f
 636:	6e 84       	ldd	r6, Y+14	; 0x0e
 638:	7d 84       	ldd	r7, Y+13	; 0x0d
 63a:	8c 84       	ldd	r8, Y+12	; 0x0c
 63c:	9b 84       	ldd	r9, Y+11	; 0x0b
 63e:	aa 84       	ldd	r10, Y+10	; 0x0a
 640:	b9 84       	ldd	r11, Y+9	; 0x09
 642:	c8 84       	ldd	r12, Y+8	; 0x08
 644:	df 80       	ldd	r13, Y+7	; 0x07
 646:	ee 80       	ldd	r14, Y+6	; 0x06
 648:	fd 80       	ldd	r15, Y+5	; 0x05
 64a:	0c 81       	ldd	r16, Y+4	; 0x04
 64c:	1b 81       	ldd	r17, Y+3	; 0x03
 64e:	aa 81       	ldd	r26, Y+2	; 0x02
 650:	b9 81       	ldd	r27, Y+1	; 0x01
 652:	ce 0f       	add	r28, r30
 654:	d1 1d       	adc	r29, r1
 656:	0f b6       	in	r0, 0x3f	; 63
 658:	f8 94       	cli
 65a:	de bf       	out	0x3e, r29	; 62
 65c:	0f be       	out	0x3f, r0	; 63
 65e:	cd bf       	out	0x3d, r28	; 61
 660:	ed 01       	movw	r28, r26
 662:	08 95       	ret

00000664 <__umulhisi3>:
 664:	a2 9f       	mul	r26, r18
 666:	b0 01       	movw	r22, r0
 668:	b3 9f       	mul	r27, r19
 66a:	c0 01       	movw	r24, r0
 66c:	a3 9f       	mul	r26, r19
 66e:	70 0d       	add	r23, r0
 670:	81 1d       	adc	r24, r1
 672:	11 24       	eor	r1, r1
 674:	91 1d       	adc	r25, r1
 676:	b2 9f       	mul	r27, r18
 678:	70 0d       	add	r23, r0
 67a:	81 1d       	adc	r24, r1
 67c:	11 24       	eor	r1, r1
 67e:	91 1d       	adc	r25, r1
 680:	08 95       	ret

00000682 <_exit>:
 682:	f8 94       	cli

00000684 <__stop_program>:
 684:	ff cf       	rjmp	.-2      	; 0x684 <__stop_program>
