
ATMega328BP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b4  00800100  00000300  00000394  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000300  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  008001b4  008001b4  00000448  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000478  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  000004b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001376  00000000  00000000  00000580  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cd4  00000000  00000000  000018f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007ad  00000000  00000000  000025ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000200  00000000  00000000  00002d78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006b8  00000000  00000000  00002f78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000613  00000000  00000000  00003630  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00003c43  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e0 e0       	ldi	r30, 0x00	; 0
  c8:	f3 e0       	ldi	r31, 0x03	; 3
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a4 3b       	cpi	r26, 0xB4	; 180
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a4 eb       	ldi	r26, 0xB4	; 180
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	aa 3b       	cpi	r26, 0xBA	; 186
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <main>
  ea:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <setBit>:
	return value | (1 << position);
}

uint8_t clearBit(uint8_t value, uint8_t position) {
	return value & ~(1 << position);
}
  f2:	21 e0       	ldi	r18, 0x01	; 1
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	02 c0       	rjmp	.+4      	; 0xfc <setBit+0xa>
  f8:	22 0f       	add	r18, r18
  fa:	33 1f       	adc	r19, r19
  fc:	6a 95       	dec	r22
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <setBit+0x6>
 100:	82 2b       	or	r24, r18
 102:	08 95       	ret

00000104 <simulateBitSetting>:


void simulateBitSetting(uint8_t initialValue) {
 104:	df 92       	push	r13
 106:	ef 92       	push	r14
 108:	ff 92       	push	r15
 10a:	0f 93       	push	r16
 10c:	1f 93       	push	r17
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	00 d0       	rcall	.+0      	; 0x114 <simulateBitSetting+0x10>
 114:	cd b7       	in	r28, 0x3d	; 61
 116:	de b7       	in	r29, 0x3e	; 62
 118:	d8 2e       	mov	r13, r24
	UART_PrintString("Initial Value: 0x");
 11a:	80 e2       	ldi	r24, 0x20	; 32
 11c:	91 e0       	ldi	r25, 0x01	; 1
 11e:	0e 94 36 01 	call	0x26c	; 0x26c <UART_PrintString>
	UART_PrintHex(initialValue);
 122:	8d 2d       	mov	r24, r13
 124:	0e 94 45 01 	call	0x28a	; 0x28a <UART_PrintHex>
	UART_PrintString(" (binary: ");
 128:	82 e3       	ldi	r24, 0x32	; 50
 12a:	91 e0       	ldi	r25, 0x01	; 1
 12c:	0e 94 36 01 	call	0x26c	; 0x26c <UART_PrintString>

	for (int i = 7; i >= 0; i--) {
 130:	07 e0       	ldi	r16, 0x07	; 7
 132:	10 e0       	ldi	r17, 0x00	; 0
 134:	13 c0       	rjmp	.+38     	; 0x15c <simulateBitSetting+0x58>
		UART_PrintString((initialValue >> i) & 1 ? "1" : "0");
 136:	8d 2d       	mov	r24, r13
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	00 2e       	mov	r0, r16
 13c:	02 c0       	rjmp	.+4      	; 0x142 <simulateBitSetting+0x3e>
 13e:	95 95       	asr	r25
 140:	87 95       	ror	r24
 142:	0a 94       	dec	r0
 144:	e2 f7       	brpl	.-8      	; 0x13e <simulateBitSetting+0x3a>
 146:	80 ff       	sbrs	r24, 0
 148:	03 c0       	rjmp	.+6      	; 0x150 <simulateBitSetting+0x4c>
 14a:	8c e1       	ldi	r24, 0x1C	; 28
 14c:	91 e0       	ldi	r25, 0x01	; 1
 14e:	02 c0       	rjmp	.+4      	; 0x154 <simulateBitSetting+0x50>
 150:	8e e1       	ldi	r24, 0x1E	; 30
 152:	91 e0       	ldi	r25, 0x01	; 1
 154:	0e 94 36 01 	call	0x26c	; 0x26c <UART_PrintString>
void simulateBitSetting(uint8_t initialValue) {
	UART_PrintString("Initial Value: 0x");
	UART_PrintHex(initialValue);
	UART_PrintString(" (binary: ");

	for (int i = 7; i >= 0; i--) {
 158:	01 50       	subi	r16, 0x01	; 1
 15a:	11 09       	sbc	r17, r1
 15c:	11 23       	and	r17, r17
 15e:	5c f7       	brge	.-42     	; 0x136 <simulateBitSetting+0x32>
		UART_PrintString((initialValue >> i) & 1 ? "1" : "0");
	}
	UART_PrintString(")\n");
 160:	8d e3       	ldi	r24, 0x3D	; 61
 162:	91 e0       	ldi	r25, 0x01	; 1
 164:	0e 94 36 01 	call	0x26c	; 0x26c <UART_PrintString>

	for (uint8_t i = 0; i < 8; i++) {
 168:	e1 2c       	mov	r14, r1
 16a:	39 c0       	rjmp	.+114    	; 0x1de <simulateBitSetting+0xda>
		uint8_t updatedValue = setBit(initialValue, i);
 16c:	6e 2d       	mov	r22, r14
 16e:	8d 2d       	mov	r24, r13
 170:	0e 94 79 00 	call	0xf2	; 0xf2 <setBit>
 174:	f8 2e       	mov	r15, r24

		UART_PrintString("Setting bit position ");
 176:	80 e4       	ldi	r24, 0x40	; 64
 178:	91 e0       	ldi	r25, 0x01	; 1
 17a:	0e 94 36 01 	call	0x26c	; 0x26c <UART_PrintString>
		
		char posStr[2] = { '0' + i, '\0' };
 17e:	80 e3       	ldi	r24, 0x30	; 48
 180:	8e 0d       	add	r24, r14
 182:	89 83       	std	Y+1, r24	; 0x01
 184:	1a 82       	std	Y+2, r1	; 0x02
		UART_PrintString(posStr);
 186:	ce 01       	movw	r24, r28
 188:	01 96       	adiw	r24, 0x01	; 1
 18a:	0e 94 36 01 	call	0x26c	; 0x26c <UART_PrintString>

		UART_PrintString(": 0x");
 18e:	8d e2       	ldi	r24, 0x2D	; 45
 190:	91 e0       	ldi	r25, 0x01	; 1
 192:	0e 94 36 01 	call	0x26c	; 0x26c <UART_PrintString>
		UART_PrintHex(updatedValue);
 196:	8f 2d       	mov	r24, r15
 198:	0e 94 45 01 	call	0x28a	; 0x28a <UART_PrintHex>
		UART_PrintString(" (binary: ");
 19c:	82 e3       	ldi	r24, 0x32	; 50
 19e:	91 e0       	ldi	r25, 0x01	; 1
 1a0:	0e 94 36 01 	call	0x26c	; 0x26c <UART_PrintString>

		for (int j = 7; j >= 0; j--) {
 1a4:	07 e0       	ldi	r16, 0x07	; 7
 1a6:	10 e0       	ldi	r17, 0x00	; 0
 1a8:	13 c0       	rjmp	.+38     	; 0x1d0 <simulateBitSetting+0xcc>
			UART_PrintString((updatedValue >> j) & 1 ? "1" : "0");
 1aa:	8f 2d       	mov	r24, r15
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	00 2e       	mov	r0, r16
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <simulateBitSetting+0xb2>
 1b2:	95 95       	asr	r25
 1b4:	87 95       	ror	r24
 1b6:	0a 94       	dec	r0
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <simulateBitSetting+0xae>
 1ba:	80 ff       	sbrs	r24, 0
 1bc:	03 c0       	rjmp	.+6      	; 0x1c4 <simulateBitSetting+0xc0>
 1be:	8c e1       	ldi	r24, 0x1C	; 28
 1c0:	91 e0       	ldi	r25, 0x01	; 1
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <simulateBitSetting+0xc4>
 1c4:	8e e1       	ldi	r24, 0x1E	; 30
 1c6:	91 e0       	ldi	r25, 0x01	; 1
 1c8:	0e 94 36 01 	call	0x26c	; 0x26c <UART_PrintString>

		UART_PrintString(": 0x");
		UART_PrintHex(updatedValue);
		UART_PrintString(" (binary: ");

		for (int j = 7; j >= 0; j--) {
 1cc:	01 50       	subi	r16, 0x01	; 1
 1ce:	11 09       	sbc	r17, r1
 1d0:	11 23       	and	r17, r17
 1d2:	5c f7       	brge	.-42     	; 0x1aa <simulateBitSetting+0xa6>
			UART_PrintString((updatedValue >> j) & 1 ? "1" : "0");
		}
		UART_PrintString(")\n");
 1d4:	8d e3       	ldi	r24, 0x3D	; 61
 1d6:	91 e0       	ldi	r25, 0x01	; 1
 1d8:	0e 94 36 01 	call	0x26c	; 0x26c <UART_PrintString>
	for (int i = 7; i >= 0; i--) {
		UART_PrintString((initialValue >> i) & 1 ? "1" : "0");
	}
	UART_PrintString(")\n");

	for (uint8_t i = 0; i < 8; i++) {
 1dc:	e3 94       	inc	r14
 1de:	87 e0       	ldi	r24, 0x07	; 7
 1e0:	8e 15       	cp	r24, r14
 1e2:	20 f6       	brcc	.-120    	; 0x16c <simulateBitSetting+0x68>
		for (int j = 7; j >= 0; j--) {
			UART_PrintString((updatedValue >> j) & 1 ? "1" : "0");
		}
		UART_PrintString(")\n");
	}
}
 1e4:	0f 90       	pop	r0
 1e6:	0f 90       	pop	r0
 1e8:	df 91       	pop	r29
 1ea:	cf 91       	pop	r28
 1ec:	1f 91       	pop	r17
 1ee:	0f 91       	pop	r16
 1f0:	ff 90       	pop	r15
 1f2:	ef 90       	pop	r14
 1f4:	df 90       	pop	r13
 1f6:	08 95       	ret

000001f8 <main>:
uint16_t Add8BitNumbers(uint8_t Number1, uint8_t Number2) {
	return (Number1 + Number2);
}

int main(void) {
	RS232Init();
 1f8:	0e 94 1e 01 	call	0x23c	; 0x23c <RS232Init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fc:	87 ea       	ldi	r24, 0xA7	; 167
 1fe:	91 e6       	ldi	r25, 0x61	; 97
 200:	01 97       	sbiw	r24, 0x01	; 1
 202:	f1 f7       	brne	.-4      	; 0x200 <main+0x8>
 204:	00 c0       	rjmp	.+0      	; 0x206 <main+0xe>
 206:	00 00       	nop

	uint8_t Var1 = 0xF8;
	uint8_t Var2 = 0x01;


	sei();
 208:	78 94       	sei

	simulateBitSetting(Var1);
 20a:	88 ef       	ldi	r24, 0xF8	; 248
 20c:	0e 94 82 00 	call	0x104	; 0x104 <simulateBitSetting>

	UART_PrintString("Hello UART!\n");
 210:	85 e9       	ldi	r24, 0x95	; 149
 212:	91 e0       	ldi	r25, 0x01	; 1
 214:	0e 94 36 01 	call	0x26c	; 0x26c <UART_PrintString>
 218:	ff cf       	rjmp	.-2      	; 0x218 <main+0x20>

0000021a <uart_getch>:
		uart_putch(*str++, NULL);
	}
}

void UART_PrintChar(char c) {
	uart_putch(c, NULL);
 21a:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
 21e:	88 23       	and	r24, r24
 220:	e4 f7       	brge	.-8      	; 0x21a <uart_getch>
 222:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	08 95       	ret

0000022a <uart_putch>:
 22a:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
 22e:	95 ff       	sbrs	r25, 5
 230:	fc cf       	rjmp	.-8      	; 0x22a <uart_putch>
 232:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	08 95       	ret

0000023c <RS232Init>:
 23c:	83 e3       	ldi	r24, 0x33	; 51
 23e:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f80cc>
 242:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f80cd>
 246:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
 24a:	88 e1       	ldi	r24, 0x18	; 24
 24c:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7f80c9>
 250:	86 e0       	ldi	r24, 0x06	; 6
 252:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7f80ca>
 256:	e4 eb       	ldi	r30, 0xB4	; 180
 258:	f1 e0       	ldi	r31, 0x01	; 1
 25a:	8e e0       	ldi	r24, 0x0E	; 14
 25c:	91 e0       	ldi	r25, 0x01	; 1
 25e:	93 83       	std	Z+3, r25	; 0x03
 260:	82 83       	std	Z+2, r24	; 0x02
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	91 e0       	ldi	r25, 0x01	; 1
 266:	91 83       	std	Z+1, r25	; 0x01
 268:	80 83       	st	Z, r24
 26a:	08 95       	ret

0000026c <UART_PrintString>:
 26c:	cf 93       	push	r28
 26e:	df 93       	push	r29
 270:	ec 01       	movw	r28, r24
 272:	05 c0       	rjmp	.+10     	; 0x27e <UART_PrintString+0x12>
 274:	21 96       	adiw	r28, 0x01	; 1
 276:	60 e0       	ldi	r22, 0x00	; 0
 278:	70 e0       	ldi	r23, 0x00	; 0
 27a:	0e 94 15 01 	call	0x22a	; 0x22a <uart_putch>
 27e:	88 81       	ld	r24, Y
 280:	81 11       	cpse	r24, r1
 282:	f8 cf       	rjmp	.-16     	; 0x274 <UART_PrintString+0x8>
 284:	df 91       	pop	r29
 286:	cf 91       	pop	r28
 288:	08 95       	ret

0000028a <UART_PrintHex>:
}

void UART_PrintHex(uint8_t value) {
 28a:	1f 93       	push	r17
 28c:	cf 93       	push	r28
 28e:	df 93       	push	r29
 290:	cd b7       	in	r28, 0x3d	; 61
 292:	de b7       	in	r29, 0x3e	; 62
 294:	61 97       	sbiw	r28, 0x11	; 17
 296:	0f b6       	in	r0, 0x3f	; 63
 298:	f8 94       	cli
 29a:	de bf       	out	0x3e, r29	; 62
 29c:	0f be       	out	0x3f, r0	; 63
 29e:	cd bf       	out	0x3d, r28	; 61
 2a0:	18 2f       	mov	r17, r24
	const char hexDigits[] = "0123456789ABCDEF";
 2a2:	81 e1       	ldi	r24, 0x11	; 17
 2a4:	e2 ea       	ldi	r30, 0xA2	; 162
 2a6:	f1 e0       	ldi	r31, 0x01	; 1
 2a8:	de 01       	movw	r26, r28
 2aa:	11 96       	adiw	r26, 0x01	; 1
 2ac:	01 90       	ld	r0, Z+
 2ae:	0d 92       	st	X+, r0
 2b0:	8a 95       	dec	r24
 2b2:	e1 f7       	brne	.-8      	; 0x2ac <UART_PrintHex+0x22>
	uart_putch(hexDigits[value >> 4], NULL); // Send high nibble
 2b4:	81 2f       	mov	r24, r17
 2b6:	82 95       	swap	r24
 2b8:	8f 70       	andi	r24, 0x0F	; 15
 2ba:	e1 e0       	ldi	r30, 0x01	; 1
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	ec 0f       	add	r30, r28
 2c0:	fd 1f       	adc	r31, r29
 2c2:	e8 0f       	add	r30, r24
 2c4:	f1 1d       	adc	r31, r1
 2c6:	60 e0       	ldi	r22, 0x00	; 0
 2c8:	70 e0       	ldi	r23, 0x00	; 0
 2ca:	80 81       	ld	r24, Z
 2cc:	0e 94 15 01 	call	0x22a	; 0x22a <uart_putch>
	uart_putch(hexDigits[value & 0x0F], NULL); // Send low nibble
 2d0:	1f 70       	andi	r17, 0x0F	; 15
 2d2:	e1 e0       	ldi	r30, 0x01	; 1
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	ec 0f       	add	r30, r28
 2d8:	fd 1f       	adc	r31, r29
 2da:	e1 0f       	add	r30, r17
 2dc:	f1 1d       	adc	r31, r1
 2de:	60 e0       	ldi	r22, 0x00	; 0
 2e0:	70 e0       	ldi	r23, 0x00	; 0
 2e2:	80 81       	ld	r24, Z
 2e4:	0e 94 15 01 	call	0x22a	; 0x22a <uart_putch>
}
 2e8:	61 96       	adiw	r28, 0x11	; 17
 2ea:	0f b6       	in	r0, 0x3f	; 63
 2ec:	f8 94       	cli
 2ee:	de bf       	out	0x3e, r29	; 62
 2f0:	0f be       	out	0x3f, r0	; 63
 2f2:	cd bf       	out	0x3d, r28	; 61
 2f4:	df 91       	pop	r29
 2f6:	cf 91       	pop	r28
 2f8:	1f 91       	pop	r17
 2fa:	08 95       	ret

000002fc <_exit>:
 2fc:	f8 94       	cli

000002fe <__stop_program>:
 2fe:	ff cf       	rjmp	.-2      	; 0x2fe <__stop_program>
