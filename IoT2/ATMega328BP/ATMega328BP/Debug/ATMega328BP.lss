
ATMega328BP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000262  00800100  0000158c  00001620  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000158c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800362  00800362  00001882  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001882  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000018e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00001920  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012cb  00000000  00000000  00001a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d19  00000000  00000000  00002ceb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b02  00000000  00000000  00003a04  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003e8  00000000  00000000  00004508  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000929  00000000  00000000  000048f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000840  00000000  00000000  00005219  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00005a59  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
       4:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__vector_1>
       8:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <__vector_2>
       c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      70:	0c 94 54 02 	jmp	0x4a8	; 0x4a8 <__vector_28>
      74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
      b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
      b4:	11 24       	eor	r1, r1
      b6:	1f be       	out	0x3f, r1	; 63
      b8:	cf ef       	ldi	r28, 0xFF	; 255
      ba:	d8 e0       	ldi	r29, 0x08	; 8
      bc:	de bf       	out	0x3e, r29	; 62
      be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
      c0:	13 e0       	ldi	r17, 0x03	; 3
      c2:	a0 e0       	ldi	r26, 0x00	; 0
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	ec e8       	ldi	r30, 0x8C	; 140
      c8:	f5 e1       	ldi	r31, 0x15	; 21
      ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
      cc:	05 90       	lpm	r0, Z+
      ce:	0d 92       	st	X+, r0
      d0:	a2 36       	cpi	r26, 0x62	; 98
      d2:	b1 07       	cpc	r27, r17
      d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
      d6:	23 e0       	ldi	r18, 0x03	; 3
      d8:	a2 e6       	ldi	r26, 0x62	; 98
      da:	b3 e0       	ldi	r27, 0x03	; 3
      dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
      de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
      e0:	a3 37       	cpi	r26, 0x73	; 115
      e2:	b2 07       	cpc	r27, r18
      e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
      e6:	0e 94 9f 01 	call	0x33e	; 0x33e <main>
      ea:	0c 94 c4 0a 	jmp	0x1588	; 0x1588 <_exit>

000000ee <__bad_interrupt>:
      ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <NoCallbackIsPerformedOnExternalInterrupt>:
	}
	else
	{
		return (false);
	}
}
      f2:	cf 93       	push	r28
      f4:	df 93       	push	r29
      f6:	00 d0       	rcall	.+0      	; 0xf8 <NoCallbackIsPerformedOnExternalInterrupt+0x6>
      f8:	cd b7       	in	r28, 0x3d	; 61
      fa:	de b7       	in	r29, 0x3e	; 62
      fc:	9a 83       	std	Y+2, r25	; 0x02
      fe:	89 83       	std	Y+1, r24	; 0x01
     100:	00 00       	nop
     102:	0f 90       	pop	r0
     104:	0f 90       	pop	r0
     106:	df 91       	pop	r29
     108:	cf 91       	pop	r28
     10a:	08 95       	ret

0000010c <AttachAndEnableExternalInterrupt>:
     10c:	cf 93       	push	r28
     10e:	df 93       	push	r29
     110:	00 d0       	rcall	.+0      	; 0x112 <AttachAndEnableExternalInterrupt+0x6>
     112:	00 d0       	rcall	.+0      	; 0x114 <AttachAndEnableExternalInterrupt+0x8>
     114:	cd b7       	in	r28, 0x3d	; 61
     116:	de b7       	in	r29, 0x3e	; 62
     118:	89 83       	std	Y+1, r24	; 0x01
     11a:	7b 83       	std	Y+3, r23	; 0x03
     11c:	6a 83       	std	Y+2, r22	; 0x02
     11e:	4c 83       	std	Y+4, r20	; 0x04
     120:	89 81       	ldd	r24, Y+1	; 0x01
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	08 f0       	brcs	.+2      	; 0x128 <AttachAndEnableExternalInterrupt+0x1c>
     126:	5b c0       	rjmp	.+182    	; 0x1de <AttachAndEnableExternalInterrupt+0xd2>
     128:	89 81       	ldd	r24, Y+1	; 0x01
     12a:	88 2f       	mov	r24, r24
     12c:	90 e0       	ldi	r25, 0x00	; 0
     12e:	88 0f       	add	r24, r24
     130:	99 1f       	adc	r25, r25
     132:	88 0f       	add	r24, r24
     134:	99 1f       	adc	r25, r25
     136:	80 50       	subi	r24, 0x00	; 0
     138:	9f 4f       	sbci	r25, 0xFF	; 255
     13a:	fc 01       	movw	r30, r24
     13c:	80 81       	ld	r24, Z
     13e:	91 81       	ldd	r25, Z+1	; 0x01
     140:	89 57       	subi	r24, 0x79	; 121
     142:	90 40       	sbci	r25, 0x00	; 0
     144:	11 f0       	breq	.+4      	; 0x14a <AttachAndEnableExternalInterrupt+0x3e>
     146:	80 e0       	ldi	r24, 0x00	; 0
     148:	4b c0       	rjmp	.+150    	; 0x1e0 <AttachAndEnableExternalInterrupt+0xd4>
     14a:	89 81       	ldd	r24, Y+1	; 0x01
     14c:	88 2f       	mov	r24, r24
     14e:	90 e0       	ldi	r25, 0x00	; 0
     150:	00 97       	sbiw	r24, 0x00	; 0
     152:	19 f0       	breq	.+6      	; 0x15a <AttachAndEnableExternalInterrupt+0x4e>
     154:	01 97       	sbiw	r24, 0x01	; 1
     156:	b9 f0       	breq	.+46     	; 0x186 <AttachAndEnableExternalInterrupt+0x7a>
     158:	32 c0       	rjmp	.+100    	; 0x1be <AttachAndEnableExternalInterrupt+0xb2>
     15a:	89 e6       	ldi	r24, 0x69	; 105
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	29 e6       	ldi	r18, 0x69	; 105
     160:	30 e0       	ldi	r19, 0x00	; 0
     162:	f9 01       	movw	r30, r18
     164:	20 81       	ld	r18, Z
     166:	32 2f       	mov	r19, r18
     168:	3c 7f       	andi	r19, 0xFC	; 252
     16a:	2c 81       	ldd	r18, Y+4	; 0x04
     16c:	23 2b       	or	r18, r19
     16e:	fc 01       	movw	r30, r24
     170:	20 83       	st	Z, r18
     172:	8d e3       	ldi	r24, 0x3D	; 61
     174:	90 e0       	ldi	r25, 0x00	; 0
     176:	2d e3       	ldi	r18, 0x3D	; 61
     178:	30 e0       	ldi	r19, 0x00	; 0
     17a:	f9 01       	movw	r30, r18
     17c:	20 81       	ld	r18, Z
     17e:	21 60       	ori	r18, 0x01	; 1
     180:	fc 01       	movw	r30, r24
     182:	20 83       	st	Z, r18
     184:	1c c0       	rjmp	.+56     	; 0x1be <AttachAndEnableExternalInterrupt+0xb2>
     186:	89 e6       	ldi	r24, 0x69	; 105
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	29 e6       	ldi	r18, 0x69	; 105
     18c:	30 e0       	ldi	r19, 0x00	; 0
     18e:	f9 01       	movw	r30, r18
     190:	20 81       	ld	r18, Z
     192:	42 2f       	mov	r20, r18
     194:	43 7f       	andi	r20, 0xF3	; 243
     196:	2c 81       	ldd	r18, Y+4	; 0x04
     198:	22 2f       	mov	r18, r18
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	22 0f       	add	r18, r18
     19e:	33 1f       	adc	r19, r19
     1a0:	22 0f       	add	r18, r18
     1a2:	33 1f       	adc	r19, r19
     1a4:	24 2b       	or	r18, r20
     1a6:	fc 01       	movw	r30, r24
     1a8:	20 83       	st	Z, r18
     1aa:	8d e3       	ldi	r24, 0x3D	; 61
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	2d e3       	ldi	r18, 0x3D	; 61
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	f9 01       	movw	r30, r18
     1b4:	20 81       	ld	r18, Z
     1b6:	22 60       	ori	r18, 0x02	; 2
     1b8:	fc 01       	movw	r30, r24
     1ba:	20 83       	st	Z, r18
     1bc:	00 00       	nop
     1be:	89 81       	ldd	r24, Y+1	; 0x01
     1c0:	88 2f       	mov	r24, r24
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	88 0f       	add	r24, r24
     1c6:	99 1f       	adc	r25, r25
     1c8:	88 0f       	add	r24, r24
     1ca:	99 1f       	adc	r25, r25
     1cc:	80 50       	subi	r24, 0x00	; 0
     1ce:	9f 4f       	sbci	r25, 0xFF	; 255
     1d0:	2a 81       	ldd	r18, Y+2	; 0x02
     1d2:	3b 81       	ldd	r19, Y+3	; 0x03
     1d4:	fc 01       	movw	r30, r24
     1d6:	31 83       	std	Z+1, r19	; 0x01
     1d8:	20 83       	st	Z, r18
     1da:	81 e0       	ldi	r24, 0x01	; 1
     1dc:	01 c0       	rjmp	.+2      	; 0x1e0 <AttachAndEnableExternalInterrupt+0xd4>
     1de:	80 e0       	ldi	r24, 0x00	; 0
     1e0:	0f 90       	pop	r0
     1e2:	0f 90       	pop	r0
     1e4:	0f 90       	pop	r0
     1e6:	0f 90       	pop	r0
     1e8:	df 91       	pop	r29
     1ea:	cf 91       	pop	r28
     1ec:	08 95       	ret

000001ee <__vector_1>:

ISR(INT0_vect)
{
     1ee:	1f 92       	push	r1
     1f0:	0f 92       	push	r0
     1f2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     1f6:	0f 92       	push	r0
     1f8:	11 24       	eor	r1, r1
     1fa:	2f 93       	push	r18
     1fc:	3f 93       	push	r19
     1fe:	4f 93       	push	r20
     200:	5f 93       	push	r21
     202:	6f 93       	push	r22
     204:	7f 93       	push	r23
     206:	8f 93       	push	r24
     208:	9f 93       	push	r25
     20a:	af 93       	push	r26
     20c:	bf 93       	push	r27
     20e:	ef 93       	push	r30
     210:	ff 93       	push	r31
     212:	cf 93       	push	r28
     214:	df 93       	push	r29
     216:	cd b7       	in	r28, 0x3d	; 61
     218:	de b7       	in	r29, 0x3e	; 62
	interruptCount++;
     21a:	80 91 62 03 	lds	r24, 0x0362	; 0x800362 <__data_end>
     21e:	90 91 63 03 	lds	r25, 0x0363	; 0x800363 <__data_end+0x1>
     222:	01 96       	adiw	r24, 0x01	; 1
     224:	90 93 63 03 	sts	0x0363, r25	; 0x800363 <__data_end+0x1>
     228:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <__data_end>
	
	ExternalInterruptCallbackStructArray[0].NumberOfExternalInterruptsOnPin++;
     22c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     230:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     234:	01 96       	adiw	r24, 0x01	; 1
     236:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     23a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
	ExternalInterruptCallbackStructArray[0].ThisFunctionPointer(ExternalInterruptCallbackStructArray[0].NumberOfExternalInterruptsOnPin); 	
     23e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     242:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     246:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     24a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     24e:	f9 01       	movw	r30, r18
     250:	09 95       	icall
}
     252:	00 00       	nop
     254:	df 91       	pop	r29
     256:	cf 91       	pop	r28
     258:	ff 91       	pop	r31
     25a:	ef 91       	pop	r30
     25c:	bf 91       	pop	r27
     25e:	af 91       	pop	r26
     260:	9f 91       	pop	r25
     262:	8f 91       	pop	r24
     264:	7f 91       	pop	r23
     266:	6f 91       	pop	r22
     268:	5f 91       	pop	r21
     26a:	4f 91       	pop	r20
     26c:	3f 91       	pop	r19
     26e:	2f 91       	pop	r18
     270:	0f 90       	pop	r0
     272:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     276:	0f 90       	pop	r0
     278:	1f 90       	pop	r1
     27a:	18 95       	reti

0000027c <MyExternalInterruptHandler>:

void MyExternalInterruptHandler(uint16_t interruptCount) {
     27c:	cf 93       	push	r28
     27e:	df 93       	push	r29
     280:	00 d0       	rcall	.+0      	; 0x282 <MyExternalInterruptHandler+0x6>
     282:	cd b7       	in	r28, 0x3d	; 61
     284:	de b7       	in	r29, 0x3e	; 62
     286:	9a 83       	std	Y+2, r25	; 0x02
     288:	89 83       	std	Y+1, r24	; 0x01
	UART_PrintString("External interrupt triggered!\n");
     28a:	84 e2       	ldi	r24, 0x24	; 36
     28c:	91 e0       	ldi	r25, 0x01	; 1
     28e:	0e 94 99 04 	call	0x932	; 0x932 <UART_PrintString>
	UART_PrintInt(interruptCount);
     292:	89 81       	ldd	r24, Y+1	; 0x01
     294:	9a 81       	ldd	r25, Y+2	; 0x02
     296:	0e 94 0f 05 	call	0xa1e	; 0xa1e <UART_PrintInt>
	UART_PrintString("\n");
     29a:	83 e4       	ldi	r24, 0x43	; 67
     29c:	91 e0       	ldi	r25, 0x01	; 1
     29e:	0e 94 99 04 	call	0x932	; 0x932 <UART_PrintString>
	
	PORTB ^= (1 << PORTB1) | (1 << PORTB2) | (1 << PORTB3);
     2a2:	85 e2       	ldi	r24, 0x25	; 37
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	25 e2       	ldi	r18, 0x25	; 37
     2a8:	30 e0       	ldi	r19, 0x00	; 0
     2aa:	f9 01       	movw	r30, r18
     2ac:	30 81       	ld	r19, Z
     2ae:	2e e0       	ldi	r18, 0x0E	; 14
     2b0:	23 27       	eor	r18, r19
     2b2:	fc 01       	movw	r30, r24
     2b4:	20 83       	st	Z, r18
}
     2b6:	00 00       	nop
     2b8:	0f 90       	pop	r0
     2ba:	0f 90       	pop	r0
     2bc:	df 91       	pop	r29
     2be:	cf 91       	pop	r28
     2c0:	08 95       	ret

000002c2 <__vector_2>:

ISR(INT1_vect)
{
     2c2:	1f 92       	push	r1
     2c4:	0f 92       	push	r0
     2c6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     2ca:	0f 92       	push	r0
     2cc:	11 24       	eor	r1, r1
     2ce:	2f 93       	push	r18
     2d0:	3f 93       	push	r19
     2d2:	4f 93       	push	r20
     2d4:	5f 93       	push	r21
     2d6:	6f 93       	push	r22
     2d8:	7f 93       	push	r23
     2da:	8f 93       	push	r24
     2dc:	9f 93       	push	r25
     2de:	af 93       	push	r26
     2e0:	bf 93       	push	r27
     2e2:	ef 93       	push	r30
     2e4:	ff 93       	push	r31
     2e6:	cf 93       	push	r28
     2e8:	df 93       	push	r29
     2ea:	cd b7       	in	r28, 0x3d	; 61
     2ec:	de b7       	in	r29, 0x3e	; 62
	ExternalInterruptCallbackStructArray[1].NumberOfExternalInterruptsOnPin++;
     2ee:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
     2f2:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__DATA_REGION_ORIGIN__+0x7>
     2f6:	01 96       	adiw	r24, 0x01	; 1
     2f8:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <__DATA_REGION_ORIGIN__+0x7>
     2fc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
	ExternalInterruptCallbackStructArray[1].ThisFunctionPointer(ExternalInterruptCallbackStructArray[1].NumberOfExternalInterruptsOnPin);
     300:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
     304:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
     308:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
     30c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <__DATA_REGION_ORIGIN__+0x7>
     310:	f9 01       	movw	r30, r18
     312:	09 95       	icall
}
     314:	00 00       	nop
     316:	df 91       	pop	r29
     318:	cf 91       	pop	r28
     31a:	ff 91       	pop	r31
     31c:	ef 91       	pop	r30
     31e:	bf 91       	pop	r27
     320:	af 91       	pop	r26
     322:	9f 91       	pop	r25
     324:	8f 91       	pop	r24
     326:	7f 91       	pop	r23
     328:	6f 91       	pop	r22
     32a:	5f 91       	pop	r21
     32c:	4f 91       	pop	r20
     32e:	3f 91       	pop	r19
     330:	2f 91       	pop	r18
     332:	0f 90       	pop	r0
     334:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     338:	0f 90       	pop	r0
     33a:	1f 90       	pop	r1
     33c:	18 95       	reti

0000033e <main>:

volatile uint16_t interruptCount = 0;
State currentState = Modtag_Adresse;
uint8_t address = 0x00;

int main(void) {
     33e:	cf 93       	push	r28
     340:	df 93       	push	r29
     342:	cd b7       	in	r28, 0x3d	; 61
     344:	de b7       	in	r29, 0x3e	; 62
     346:	60 97       	sbiw	r28, 0x10	; 16
     348:	0f b6       	in	r0, 0x3f	; 63
     34a:	f8 94       	cli
     34c:	de bf       	out	0x3e, r29	; 62
     34e:	0f be       	out	0x3f, r0	; 63
     350:	cd bf       	out	0x3d, r28	; 61
	RS232Init();
     352:	0e 94 18 04 	call	0x830	; 0x830 <RS232Init>
	Enable_UART_Receive_Interrupt();
     356:	0e 94 4e 04 	call	0x89c	; 0x89c <Enable_UART_Receive_Interrupt>
	
	sei(); // Enable global interrupts
     35a:	78 94       	sei
	AttachAndEnableExternalInterrupt(EXTERNAL_INTERRUPT_0, MyExternalInterruptHandler, FALLING_EDGE_GENERATE_INTERRUPT);
     35c:	42 e0       	ldi	r20, 0x02	; 2
     35e:	6e e3       	ldi	r22, 0x3E	; 62
     360:	71 e0       	ldi	r23, 0x01	; 1
     362:	80 e0       	ldi	r24, 0x00	; 0
     364:	0e 94 86 00 	call	0x10c	; 0x10c <AttachAndEnableExternalInterrupt>
	
	// Set D2 (INT0) as input
	DDRD &= ~(1 << DDD2);
     368:	8a e2       	ldi	r24, 0x2A	; 42
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	2a e2       	ldi	r18, 0x2A	; 42
     36e:	30 e0       	ldi	r19, 0x00	; 0
     370:	f9 01       	movw	r30, r18
     372:	20 81       	ld	r18, Z
     374:	2b 7f       	andi	r18, 0xFB	; 251
     376:	fc 01       	movw	r30, r24
     378:	20 83       	st	Z, r18
	
	// Set D13 as output
	DDRB |= (1 << DDRB1) | (1 << DDRB2) | (1 << DDRB3);
     37a:	84 e2       	ldi	r24, 0x24	; 36
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	24 e2       	ldi	r18, 0x24	; 36
     380:	30 e0       	ldi	r19, 0x00	; 0
     382:	f9 01       	movw	r30, r18
     384:	20 81       	ld	r18, Z
     386:	2e 60       	ori	r18, 0x0E	; 14
     388:	fc 01       	movw	r30, r24
     38a:	20 83       	st	Z, r18
	
	while (1) {
		char receivedChar = uart_getch(NULL);
     38c:	80 e0       	ldi	r24, 0x00	; 0
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	0e 94 5f 04 	call	0x8be	; 0x8be <uart_getch>
     394:	89 83       	std	Y+1, r24	; 0x01
		char receivedByte = UDR1;
     396:	8e ec       	ldi	r24, 0xCE	; 206
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	fc 01       	movw	r30, r24
     39c:	80 81       	ld	r24, Z
     39e:	8a 83       	std	Y+2, r24	; 0x02
		PORTB ^= (1 << PORTB5);
     3a0:	85 e2       	ldi	r24, 0x25	; 37
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	25 e2       	ldi	r18, 0x25	; 37
     3a6:	30 e0       	ldi	r19, 0x00	; 0
     3a8:	f9 01       	movw	r30, r18
     3aa:	30 81       	ld	r19, Z
     3ac:	20 e2       	ldi	r18, 0x20	; 32
     3ae:	23 27       	eor	r18, r19
     3b0:	fc 01       	movw	r30, r24
     3b2:	20 83       	st	Z, r18
     3b4:	80 e0       	ldi	r24, 0x00	; 0
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	aa e7       	ldi	r26, 0x7A	; 122
     3ba:	b4 e4       	ldi	r27, 0x44	; 68
     3bc:	8b 83       	std	Y+3, r24	; 0x03
     3be:	9c 83       	std	Y+4, r25	; 0x04
     3c0:	ad 83       	std	Y+5, r26	; 0x05
     3c2:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     3c4:	20 e0       	ldi	r18, 0x00	; 0
     3c6:	30 e0       	ldi	r19, 0x00	; 0
     3c8:	4a e7       	ldi	r20, 0x7A	; 122
     3ca:	53 e4       	ldi	r21, 0x43	; 67
     3cc:	6b 81       	ldd	r22, Y+3	; 0x03
     3ce:	7c 81       	ldd	r23, Y+4	; 0x04
     3d0:	8d 81       	ldd	r24, Y+5	; 0x05
     3d2:	9e 81       	ldd	r25, Y+6	; 0x06
     3d4:	0e 94 cb 05 	call	0xb96	; 0xb96 <__mulsf3>
     3d8:	dc 01       	movw	r26, r24
     3da:	cb 01       	movw	r24, r22
     3dc:	8f 83       	std	Y+7, r24	; 0x07
     3de:	98 87       	std	Y+8, r25	; 0x08
     3e0:	a9 87       	std	Y+9, r26	; 0x09
     3e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     3e4:	20 e0       	ldi	r18, 0x00	; 0
     3e6:	30 e0       	ldi	r19, 0x00	; 0
     3e8:	40 e8       	ldi	r20, 0x80	; 128
     3ea:	5f e3       	ldi	r21, 0x3F	; 63
     3ec:	6f 81       	ldd	r22, Y+7	; 0x07
     3ee:	78 85       	ldd	r23, Y+8	; 0x08
     3f0:	89 85       	ldd	r24, Y+9	; 0x09
     3f2:	9a 85       	ldd	r25, Y+10	; 0x0a
     3f4:	0e 94 45 05 	call	0xa8a	; 0xa8a <__cmpsf2>
     3f8:	88 23       	and	r24, r24
     3fa:	2c f4       	brge	.+10     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
		__ticks = 1;
     3fc:	81 e0       	ldi	r24, 0x01	; 1
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	9c 87       	std	Y+12, r25	; 0x0c
     402:	8b 87       	std	Y+11, r24	; 0x0b
     404:	3f c0       	rjmp	.+126    	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
	else if (__tmp > 65535)
     406:	20 e0       	ldi	r18, 0x00	; 0
     408:	3f ef       	ldi	r19, 0xFF	; 255
     40a:	4f e7       	ldi	r20, 0x7F	; 127
     40c:	57 e4       	ldi	r21, 0x47	; 71
     40e:	6f 81       	ldd	r22, Y+7	; 0x07
     410:	78 85       	ldd	r23, Y+8	; 0x08
     412:	89 85       	ldd	r24, Y+9	; 0x09
     414:	9a 85       	ldd	r25, Y+10	; 0x0a
     416:	0e 94 c6 05 	call	0xb8c	; 0xb8c <__gesf2>
     41a:	18 16       	cp	r1, r24
     41c:	4c f5       	brge	.+82     	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     41e:	20 e0       	ldi	r18, 0x00	; 0
     420:	30 e0       	ldi	r19, 0x00	; 0
     422:	40 e2       	ldi	r20, 0x20	; 32
     424:	51 e4       	ldi	r21, 0x41	; 65
     426:	6b 81       	ldd	r22, Y+3	; 0x03
     428:	7c 81       	ldd	r23, Y+4	; 0x04
     42a:	8d 81       	ldd	r24, Y+5	; 0x05
     42c:	9e 81       	ldd	r25, Y+6	; 0x06
     42e:	0e 94 cb 05 	call	0xb96	; 0xb96 <__mulsf3>
     432:	dc 01       	movw	r26, r24
     434:	cb 01       	movw	r24, r22
     436:	bc 01       	movw	r22, r24
     438:	cd 01       	movw	r24, r26
     43a:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fixunssfsi>
     43e:	dc 01       	movw	r26, r24
     440:	cb 01       	movw	r24, r22
     442:	9c 87       	std	Y+12, r25	; 0x0c
     444:	8b 87       	std	Y+11, r24	; 0x0b
     446:	0f c0       	rjmp	.+30     	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
     448:	89 e1       	ldi	r24, 0x19	; 25
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	9e 87       	std	Y+14, r25	; 0x0e
     44e:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     450:	8d 85       	ldd	r24, Y+13	; 0x0d
     452:	9e 85       	ldd	r25, Y+14	; 0x0e
     454:	01 97       	sbiw	r24, 0x01	; 1
     456:	f1 f7       	brne	.-4      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
     458:	9e 87       	std	Y+14, r25	; 0x0e
     45a:	8d 87       	std	Y+13, r24	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     45c:	8b 85       	ldd	r24, Y+11	; 0x0b
     45e:	9c 85       	ldd	r25, Y+12	; 0x0c
     460:	01 97       	sbiw	r24, 0x01	; 1
     462:	9c 87       	std	Y+12, r25	; 0x0c
     464:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     466:	8b 85       	ldd	r24, Y+11	; 0x0b
     468:	9c 85       	ldd	r25, Y+12	; 0x0c
     46a:	89 2b       	or	r24, r25
     46c:	69 f7       	brne	.-38     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
     46e:	14 c0       	rjmp	.+40     	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     470:	6f 81       	ldd	r22, Y+7	; 0x07
     472:	78 85       	ldd	r23, Y+8	; 0x08
     474:	89 85       	ldd	r24, Y+9	; 0x09
     476:	9a 85       	ldd	r25, Y+10	; 0x0a
     478:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fixunssfsi>
     47c:	dc 01       	movw	r26, r24
     47e:	cb 01       	movw	r24, r22
     480:	9c 87       	std	Y+12, r25	; 0x0c
     482:	8b 87       	std	Y+11, r24	; 0x0b
     484:	8b 85       	ldd	r24, Y+11	; 0x0b
     486:	9c 85       	ldd	r25, Y+12	; 0x0c
     488:	98 8b       	std	Y+16, r25	; 0x10
     48a:	8f 87       	std	Y+15, r24	; 0x0f
     48c:	8f 85       	ldd	r24, Y+15	; 0x0f
     48e:	98 89       	ldd	r25, Y+16	; 0x10
     490:	01 97       	sbiw	r24, 0x01	; 1
     492:	f1 f7       	brne	.-4      	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
     494:	98 8b       	std	Y+16, r25	; 0x10
     496:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1000);
		handle_state_machine(&currentState, receivedByte, &address);
     498:	45 e6       	ldi	r20, 0x65	; 101
     49a:	53 e0       	ldi	r21, 0x03	; 3
     49c:	6a 81       	ldd	r22, Y+2	; 0x02
     49e:	84 e6       	ldi	r24, 0x64	; 100
     4a0:	93 e0       	ldi	r25, 0x03	; 3
     4a2:	0e 94 c5 02 	call	0x58a	; 0x58a <handle_state_machine>
	}
     4a6:	72 cf       	rjmp	.-284    	; 0x38c <main+0x4e>

000004a8 <__vector_28>:

	return 0;
}

ISR(USART1_RX_vect) {
     4a8:	1f 92       	push	r1
     4aa:	0f 92       	push	r0
     4ac:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     4b0:	0f 92       	push	r0
     4b2:	11 24       	eor	r1, r1
     4b4:	2f 93       	push	r18
     4b6:	3f 93       	push	r19
     4b8:	4f 93       	push	r20
     4ba:	5f 93       	push	r21
     4bc:	6f 93       	push	r22
     4be:	7f 93       	push	r23
     4c0:	8f 93       	push	r24
     4c2:	9f 93       	push	r25
     4c4:	af 93       	push	r26
     4c6:	bf 93       	push	r27
     4c8:	ef 93       	push	r30
     4ca:	ff 93       	push	r31
     4cc:	cf 93       	push	r28
     4ce:	df 93       	push	r29
     4d0:	1f 92       	push	r1
     4d2:	cd b7       	in	r28, 0x3d	; 61
     4d4:	de b7       	in	r29, 0x3e	; 62
	if (UCSR1A & ((1 << FE1) | (1 << DOR1))) {
     4d6:	88 ec       	ldi	r24, 0xC8	; 200
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	fc 01       	movw	r30, r24
     4dc:	80 81       	ld	r24, Z
     4de:	88 2f       	mov	r24, r24
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	88 71       	andi	r24, 0x18	; 24
     4e4:	99 27       	eor	r25, r25
     4e6:	89 2b       	or	r24, r25
     4e8:	71 f1       	breq	.+92     	; 0x546 <__vector_28+0x9e>
		UART_PrintString("UART Error: ");
     4ea:	85 e4       	ldi	r24, 0x45	; 69
     4ec:	91 e0       	ldi	r25, 0x01	; 1
     4ee:	0e 94 99 04 	call	0x932	; 0x932 <UART_PrintString>
		if (UCSR1A & (1 << FE1)) {
     4f2:	88 ec       	ldi	r24, 0xC8	; 200
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	fc 01       	movw	r30, r24
     4f8:	80 81       	ld	r24, Z
     4fa:	88 2f       	mov	r24, r24
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	80 71       	andi	r24, 0x10	; 16
     500:	99 27       	eor	r25, r25
     502:	89 2b       	or	r24, r25
     504:	21 f0       	breq	.+8      	; 0x50e <__vector_28+0x66>
			UART_PrintString("Framing Error ");
     506:	82 e5       	ldi	r24, 0x52	; 82
     508:	91 e0       	ldi	r25, 0x01	; 1
     50a:	0e 94 99 04 	call	0x932	; 0x932 <UART_PrintString>
		}
		if (UCSR1A & (1 << DOR1)) {
     50e:	88 ec       	ldi	r24, 0xC8	; 200
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	fc 01       	movw	r30, r24
     514:	80 81       	ld	r24, Z
     516:	88 2f       	mov	r24, r24
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	88 70       	andi	r24, 0x08	; 8
     51c:	99 27       	eor	r25, r25
     51e:	89 2b       	or	r24, r25
     520:	21 f0       	breq	.+8      	; 0x52a <__vector_28+0x82>
			UART_PrintString("Data Overrun ");
     522:	81 e6       	ldi	r24, 0x61	; 97
     524:	91 e0       	ldi	r25, 0x01	; 1
     526:	0e 94 99 04 	call	0x932	; 0x932 <UART_PrintString>
		}
		UART_PrintString("\n");
     52a:	8f e6       	ldi	r24, 0x6F	; 111
     52c:	91 e0       	ldi	r25, 0x01	; 1
     52e:	0e 94 99 04 	call	0x932	; 0x932 <UART_PrintString>
		
		UCSR1A |= (1 << FE1) | (1 << DOR1);
     532:	88 ec       	ldi	r24, 0xC8	; 200
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	28 ec       	ldi	r18, 0xC8	; 200
     538:	30 e0       	ldi	r19, 0x00	; 0
     53a:	f9 01       	movw	r30, r18
     53c:	20 81       	ld	r18, Z
     53e:	28 61       	ori	r18, 0x18	; 24
     540:	fc 01       	movw	r30, r24
     542:	20 83       	st	Z, r18
		} else {
		char receivedByte = UDR1;
		
		handle_state_machine(&currentState, receivedByte, &address);
	}
     544:	0c c0       	rjmp	.+24     	; 0x55e <__vector_28+0xb6>
		}
		UART_PrintString("\n");
		
		UCSR1A |= (1 << FE1) | (1 << DOR1);
		} else {
		char receivedByte = UDR1;
     546:	8e ec       	ldi	r24, 0xCE	; 206
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	fc 01       	movw	r30, r24
     54c:	80 81       	ld	r24, Z
     54e:	89 83       	std	Y+1, r24	; 0x01
		
		handle_state_machine(&currentState, receivedByte, &address);
     550:	45 e6       	ldi	r20, 0x65	; 101
     552:	53 e0       	ldi	r21, 0x03	; 3
     554:	69 81       	ldd	r22, Y+1	; 0x01
     556:	84 e6       	ldi	r24, 0x64	; 100
     558:	93 e0       	ldi	r25, 0x03	; 3
     55a:	0e 94 c5 02 	call	0x58a	; 0x58a <handle_state_machine>
	}
     55e:	00 00       	nop
     560:	0f 90       	pop	r0
     562:	df 91       	pop	r29
     564:	cf 91       	pop	r28
     566:	ff 91       	pop	r31
     568:	ef 91       	pop	r30
     56a:	bf 91       	pop	r27
     56c:	af 91       	pop	r26
     56e:	9f 91       	pop	r25
     570:	8f 91       	pop	r24
     572:	7f 91       	pop	r23
     574:	6f 91       	pop	r22
     576:	5f 91       	pop	r21
     578:	4f 91       	pop	r20
     57a:	3f 91       	pop	r19
     57c:	2f 91       	pop	r18
     57e:	0f 90       	pop	r0
     580:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
     584:	0f 90       	pop	r0
     586:	1f 90       	pop	r1
     588:	18 95       	reti

0000058a <handle_state_machine>:
	Modtag_Adresse,
	Modtag_Bit_Position_I_Adresse,
	Modtag_Bit_Position_Vaerdi
} State;

void handle_state_machine(State *currentState, char recivedChar, uint8_t *address) {
     58a:	cf 93       	push	r28
     58c:	df 93       	push	r29
     58e:	00 d0       	rcall	.+0      	; 0x590 <handle_state_machine+0x6>
     590:	00 d0       	rcall	.+0      	; 0x592 <handle_state_machine+0x8>
     592:	00 d0       	rcall	.+0      	; 0x594 <handle_state_machine+0xa>
     594:	cd b7       	in	r28, 0x3d	; 61
     596:	de b7       	in	r29, 0x3e	; 62
     598:	9b 83       	std	Y+3, r25	; 0x03
     59a:	8a 83       	std	Y+2, r24	; 0x02
     59c:	6c 83       	std	Y+4, r22	; 0x04
     59e:	5e 83       	std	Y+6, r21	; 0x06
     5a0:	4d 83       	std	Y+5, r20	; 0x05
	static char hexBuffer[3] = {0};  
	static uint8_t hexIndex = 0;
	static uint8_t bitPosition = 0;

	UART_PrintString("Received Char (Hex): ");
     5a2:	81 e7       	ldi	r24, 0x71	; 113
     5a4:	91 e0       	ldi	r25, 0x01	; 1
     5a6:	0e 94 99 04 	call	0x932	; 0x932 <UART_PrintString>
	UART_PrintHex((uint8_t)recivedChar);  
     5aa:	8c 81       	ldd	r24, Y+4	; 0x04
     5ac:	0e 94 ca 04 	call	0x994	; 0x994 <UART_PrintHex>
	UART_PrintString(" ASCII Value: ");
     5b0:	87 e8       	ldi	r24, 0x87	; 135
     5b2:	91 e0       	ldi	r25, 0x01	; 1
     5b4:	0e 94 99 04 	call	0x932	; 0x932 <UART_PrintString>
	UART_PrintInt((uint8_t)recivedChar);  
     5b8:	8c 81       	ldd	r24, Y+4	; 0x04
     5ba:	0e 94 0f 05 	call	0xa1e	; 0xa1e <UART_PrintInt>
	UART_PrintString("\n");
     5be:	86 e9       	ldi	r24, 0x96	; 150
     5c0:	91 e0       	ldi	r25, 0x01	; 1
     5c2:	0e 94 99 04 	call	0x932	; 0x932 <UART_PrintString>

	UART_PrintString("Current State: ");
     5c6:	88 e9       	ldi	r24, 0x98	; 152
     5c8:	91 e0       	ldi	r25, 0x01	; 1
     5ca:	0e 94 99 04 	call	0x932	; 0x932 <UART_PrintString>
	switch (*currentState) {
     5ce:	8a 81       	ldd	r24, Y+2	; 0x02
     5d0:	9b 81       	ldd	r25, Y+3	; 0x03
     5d2:	fc 01       	movw	r30, r24
     5d4:	80 81       	ld	r24, Z
     5d6:	88 2f       	mov	r24, r24
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	81 30       	cpi	r24, 0x01	; 1
     5dc:	91 05       	cpc	r25, r1
     5de:	51 f0       	breq	.+20     	; 0x5f4 <handle_state_machine+0x6a>
     5e0:	82 30       	cpi	r24, 0x02	; 2
     5e2:	91 05       	cpc	r25, r1
     5e4:	61 f0       	breq	.+24     	; 0x5fe <handle_state_machine+0x74>
     5e6:	89 2b       	or	r24, r25
     5e8:	79 f4       	brne	.+30     	; 0x608 <handle_state_machine+0x7e>
		case Modtag_Adresse:
		UART_PrintString("Modtag_Adresse\n");
     5ea:	88 ea       	ldi	r24, 0xA8	; 168
     5ec:	91 e0       	ldi	r25, 0x01	; 1
     5ee:	0e 94 99 04 	call	0x932	; 0x932 <UART_PrintString>
		break;
     5f2:	0f c0       	rjmp	.+30     	; 0x612 <handle_state_machine+0x88>
		case Modtag_Bit_Position_I_Adresse:
		UART_PrintString("Modtag_Bit_Position_I_Adresse\n");
     5f4:	88 eb       	ldi	r24, 0xB8	; 184
     5f6:	91 e0       	ldi	r25, 0x01	; 1
     5f8:	0e 94 99 04 	call	0x932	; 0x932 <UART_PrintString>
		break;
     5fc:	0a c0       	rjmp	.+20     	; 0x612 <handle_state_machine+0x88>
		case Modtag_Bit_Position_Vaerdi:
		UART_PrintString("Modtag_Bit_Position_Vaerdi\n");
     5fe:	87 ed       	ldi	r24, 0xD7	; 215
     600:	91 e0       	ldi	r25, 0x01	; 1
     602:	0e 94 99 04 	call	0x932	; 0x932 <UART_PrintString>
		break;
     606:	05 c0       	rjmp	.+10     	; 0x612 <handle_state_machine+0x88>
		default:
		UART_PrintString("Unknown State\n");
     608:	83 ef       	ldi	r24, 0xF3	; 243
     60a:	91 e0       	ldi	r25, 0x01	; 1
     60c:	0e 94 99 04 	call	0x932	; 0x932 <UART_PrintString>
		break;
     610:	00 00       	nop
	}

	switch (*currentState) {
     612:	8a 81       	ldd	r24, Y+2	; 0x02
     614:	9b 81       	ldd	r25, Y+3	; 0x03
     616:	fc 01       	movw	r30, r24
     618:	80 81       	ld	r24, Z
     61a:	88 2f       	mov	r24, r24
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	81 30       	cpi	r24, 0x01	; 1
     620:	91 05       	cpc	r25, r1
     622:	09 f4       	brne	.+2      	; 0x626 <handle_state_machine+0x9c>
     624:	66 c0       	rjmp	.+204    	; 0x6f2 <handle_state_machine+0x168>
     626:	82 30       	cpi	r24, 0x02	; 2
     628:	91 05       	cpc	r25, r1
     62a:	09 f4       	brne	.+2      	; 0x62e <handle_state_machine+0xa4>
     62c:	87 c0       	rjmp	.+270    	; 0x73c <handle_state_machine+0x1b2>
     62e:	89 2b       	or	r24, r25
     630:	09 f0       	breq	.+2      	; 0x634 <handle_state_machine+0xaa>
     632:	f0 c0       	rjmp	.+480    	; 0x814 <__DATA_REGION_LENGTH__+0x14>
		case Modtag_Adresse:
		if (recivedChar == ':') {
     634:	8c 81       	ldd	r24, Y+4	; 0x04
     636:	8a 33       	cpi	r24, 0x3A	; 58
     638:	59 f5       	brne	.+86     	; 0x690 <handle_state_machine+0x106>
			*address = (uint8_t)strtol(hexBuffer, NULL, 16);
     63a:	40 e1       	ldi	r20, 0x10	; 16
     63c:	50 e0       	ldi	r21, 0x00	; 0
     63e:	60 e0       	ldi	r22, 0x00	; 0
     640:	70 e0       	ldi	r23, 0x00	; 0
     642:	86 e6       	ldi	r24, 0x66	; 102
     644:	93 e0       	ldi	r25, 0x03	; 3
     646:	0e 94 60 06 	call	0xcc0	; 0xcc0 <strtol>
     64a:	dc 01       	movw	r26, r24
     64c:	cb 01       	movw	r24, r22
     64e:	28 2f       	mov	r18, r24
     650:	8d 81       	ldd	r24, Y+5	; 0x05
     652:	9e 81       	ldd	r25, Y+6	; 0x06
     654:	fc 01       	movw	r30, r24
     656:	20 83       	st	Z, r18

			UART_PrintString("Received address: 0x");
     658:	82 e0       	ldi	r24, 0x02	; 2
     65a:	92 e0       	ldi	r25, 0x02	; 2
     65c:	0e 94 99 04 	call	0x932	; 0x932 <UART_PrintString>
			UART_PrintHex(*address);
     660:	8d 81       	ldd	r24, Y+5	; 0x05
     662:	9e 81       	ldd	r25, Y+6	; 0x06
     664:	fc 01       	movw	r30, r24
     666:	80 81       	ld	r24, Z
     668:	0e 94 ca 04 	call	0x994	; 0x994 <UART_PrintHex>
			UART_PrintString("\n");
     66c:	86 e9       	ldi	r24, 0x96	; 150
     66e:	91 e0       	ldi	r25, 0x01	; 1
     670:	0e 94 99 04 	call	0x932	; 0x932 <UART_PrintString>

			hexIndex = 0;
     674:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <hexIndex.2065>
			hexBuffer[0] = '\0';
     678:	10 92 66 03 	sts	0x0366, r1	; 0x800366 <hexBuffer.2064>

			UART_PrintString("Transitioning to Modtag_Bit_Position_I_Adresse\n");
     67c:	87 e1       	ldi	r24, 0x17	; 23
     67e:	92 e0       	ldi	r25, 0x02	; 2
     680:	0e 94 99 04 	call	0x932	; 0x932 <UART_PrintString>
			*currentState = Modtag_Bit_Position_I_Adresse;
     684:	8a 81       	ldd	r24, Y+2	; 0x02
     686:	9b 81       	ldd	r25, Y+3	; 0x03
     688:	21 e0       	ldi	r18, 0x01	; 1
     68a:	fc 01       	movw	r30, r24
     68c:	20 83       	st	Z, r18
			UART_PrintString("\n");

			hexIndex = 0;
			hexBuffer[0] = '\0';
		}
		break;
     68e:	c7 c0       	rjmp	.+398    	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
			hexIndex = 0;
			hexBuffer[0] = '\0';

			UART_PrintString("Transitioning to Modtag_Bit_Position_I_Adresse\n");
			*currentState = Modtag_Bit_Position_I_Adresse;
			} else if (isxdigit(recivedChar) && hexIndex < 2) {
     690:	8c 81       	ldd	r24, Y+4	; 0x04
     692:	88 2f       	mov	r24, r24
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	0e 94 76 07 	call	0xeec	; 0xeec <isxdigit>
     69a:	89 2b       	or	r24, r25
     69c:	d1 f0       	breq	.+52     	; 0x6d2 <handle_state_machine+0x148>
     69e:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <hexIndex.2065>
     6a2:	82 30       	cpi	r24, 0x02	; 2
     6a4:	b0 f4       	brcc	.+44     	; 0x6d2 <handle_state_machine+0x148>
			hexBuffer[hexIndex++] = recivedChar;
     6a6:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <hexIndex.2065>
     6aa:	91 e0       	ldi	r25, 0x01	; 1
     6ac:	98 0f       	add	r25, r24
     6ae:	90 93 69 03 	sts	0x0369, r25	; 0x800369 <hexIndex.2065>
     6b2:	88 2f       	mov	r24, r24
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	8a 59       	subi	r24, 0x9A	; 154
     6b8:	9c 4f       	sbci	r25, 0xFC	; 252
     6ba:	2c 81       	ldd	r18, Y+4	; 0x04
     6bc:	fc 01       	movw	r30, r24
     6be:	20 83       	st	Z, r18
			hexBuffer[hexIndex] = '\0';  
     6c0:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <hexIndex.2065>
     6c4:	88 2f       	mov	r24, r24
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	8a 59       	subi	r24, 0x9A	; 154
     6ca:	9c 4f       	sbci	r25, 0xFC	; 252
     6cc:	fc 01       	movw	r30, r24
     6ce:	10 82       	st	Z, r1
			UART_PrintString("\n");

			hexIndex = 0;
			hexBuffer[0] = '\0';
		}
		break;
     6d0:	a6 c0       	rjmp	.+332    	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
			*currentState = Modtag_Bit_Position_I_Adresse;
			} else if (isxdigit(recivedChar) && hexIndex < 2) {
			hexBuffer[hexIndex++] = recivedChar;
			hexBuffer[hexIndex] = '\0';  
			} else {
			UART_PrintString("Unexpected character received: ");
     6d2:	87 e4       	ldi	r24, 0x47	; 71
     6d4:	92 e0       	ldi	r25, 0x02	; 2
     6d6:	0e 94 99 04 	call	0x932	; 0x932 <UART_PrintString>
			UART_PrintChar(recivedChar);
     6da:	8c 81       	ldd	r24, Y+4	; 0x04
     6dc:	0e 94 ba 04 	call	0x974	; 0x974 <UART_PrintChar>
			UART_PrintString("\n");
     6e0:	86 e9       	ldi	r24, 0x96	; 150
     6e2:	91 e0       	ldi	r25, 0x01	; 1
     6e4:	0e 94 99 04 	call	0x932	; 0x932 <UART_PrintString>

			hexIndex = 0;
     6e8:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <hexIndex.2065>
			hexBuffer[0] = '\0';
     6ec:	10 92 66 03 	sts	0x0366, r1	; 0x800366 <hexBuffer.2064>
		}
		break;
     6f0:	96 c0       	rjmp	.+300    	; 0x81e <__DATA_REGION_LENGTH__+0x1e>

		case Modtag_Bit_Position_I_Adresse:
		if (recivedChar >= '0' && recivedChar <= '7') {
     6f2:	8c 81       	ldd	r24, Y+4	; 0x04
     6f4:	80 33       	cpi	r24, 0x30	; 48
     6f6:	c8 f0       	brcs	.+50     	; 0x72a <handle_state_machine+0x1a0>
     6f8:	8c 81       	ldd	r24, Y+4	; 0x04
     6fa:	88 33       	cpi	r24, 0x38	; 56
     6fc:	b0 f4       	brcc	.+44     	; 0x72a <handle_state_machine+0x1a0>
			bitPosition = recivedChar - '0';  
     6fe:	8c 81       	ldd	r24, Y+4	; 0x04
     700:	80 53       	subi	r24, 0x30	; 48
     702:	80 93 6a 03 	sts	0x036A, r24	; 0x80036a <bitPosition.2066>
			UART_PrintString("Enter bit position for address: 0x");
     706:	87 e6       	ldi	r24, 0x67	; 103
     708:	92 e0       	ldi	r25, 0x02	; 2
     70a:	0e 94 99 04 	call	0x932	; 0x932 <UART_PrintString>
			UART_PrintHex(bitPosition);
     70e:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <bitPosition.2066>
     712:	0e 94 ca 04 	call	0x994	; 0x994 <UART_PrintHex>
			UART_PrintString("\n");
     716:	86 e9       	ldi	r24, 0x96	; 150
     718:	91 e0       	ldi	r25, 0x01	; 1
     71a:	0e 94 99 04 	call	0x932	; 0x932 <UART_PrintString>

			*currentState = Modtag_Bit_Position_Vaerdi;
     71e:	8a 81       	ldd	r24, Y+2	; 0x02
     720:	9b 81       	ldd	r25, Y+3	; 0x03
     722:	22 e0       	ldi	r18, 0x02	; 2
     724:	fc 01       	movw	r30, r24
     726:	20 83       	st	Z, r18
			} else {
			UART_PrintString("Invalid bit position, please enter a valid position (0-7)\n");
			*currentState = Modtag_Adresse;
		}
		break;
     728:	7a c0       	rjmp	.+244    	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
			UART_PrintHex(bitPosition);
			UART_PrintString("\n");

			*currentState = Modtag_Bit_Position_Vaerdi;
			} else {
			UART_PrintString("Invalid bit position, please enter a valid position (0-7)\n");
     72a:	8a e8       	ldi	r24, 0x8A	; 138
     72c:	92 e0       	ldi	r25, 0x02	; 2
     72e:	0e 94 99 04 	call	0x932	; 0x932 <UART_PrintString>
			*currentState = Modtag_Adresse;
     732:	8a 81       	ldd	r24, Y+2	; 0x02
     734:	9b 81       	ldd	r25, Y+3	; 0x03
     736:	fc 01       	movw	r30, r24
     738:	10 82       	st	Z, r1
		}
		break;
     73a:	71 c0       	rjmp	.+226    	; 0x81e <__DATA_REGION_LENGTH__+0x1e>

		case Modtag_Bit_Position_Vaerdi:
		if (recivedChar == '\n' || recivedChar == '\r' || recivedChar == ':') {
     73c:	8c 81       	ldd	r24, Y+4	; 0x04
     73e:	8a 30       	cpi	r24, 0x0A	; 10
     740:	31 f0       	breq	.+12     	; 0x74e <handle_state_machine+0x1c4>
     742:	8c 81       	ldd	r24, Y+4	; 0x04
     744:	8d 30       	cpi	r24, 0x0D	; 13
     746:	19 f0       	breq	.+6      	; 0x74e <handle_state_machine+0x1c4>
     748:	8c 81       	ldd	r24, Y+4	; 0x04
     74a:	8a 33       	cpi	r24, 0x3A	; 58
     74c:	61 f4       	brne	.+24     	; 0x766 <handle_state_machine+0x1dc>
			UART_PrintString("Ignoring unwanted character: ");
     74e:	85 ec       	ldi	r24, 0xC5	; 197
     750:	92 e0       	ldi	r25, 0x02	; 2
     752:	0e 94 99 04 	call	0x932	; 0x932 <UART_PrintString>
			UART_PrintChar(recivedChar); 
     756:	8c 81       	ldd	r24, Y+4	; 0x04
     758:	0e 94 ba 04 	call	0x974	; 0x974 <UART_PrintChar>
			UART_PrintString("\n");
     75c:	86 e9       	ldi	r24, 0x96	; 150
     75e:	91 e0       	ldi	r25, 0x01	; 1
     760:	0e 94 99 04 	call	0x932	; 0x932 <UART_PrintString>
			return;  
     764:	5c c0       	rjmp	.+184    	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
		}

		UART_PrintString("Received Char for Bit Value: ");
     766:	83 ee       	ldi	r24, 0xE3	; 227
     768:	92 e0       	ldi	r25, 0x02	; 2
     76a:	0e 94 99 04 	call	0x932	; 0x932 <UART_PrintString>
		UART_PrintChar(recivedChar); 
     76e:	8c 81       	ldd	r24, Y+4	; 0x04
     770:	0e 94 ba 04 	call	0x974	; 0x974 <UART_PrintChar>
		UART_PrintString("\n");
     774:	86 e9       	ldi	r24, 0x96	; 150
     776:	91 e0       	ldi	r25, 0x01	; 1
     778:	0e 94 99 04 	call	0x932	; 0x932 <UART_PrintString>

		if (recivedChar == '0' || recivedChar == '1') {
     77c:	8c 81       	ldd	r24, Y+4	; 0x04
     77e:	80 33       	cpi	r24, 0x30	; 48
     780:	19 f0       	breq	.+6      	; 0x788 <handle_state_machine+0x1fe>
     782:	8c 81       	ldd	r24, Y+4	; 0x04
     784:	81 33       	cpi	r24, 0x31	; 49
     786:	e1 f5       	brne	.+120    	; 0x800 <__DATA_REGION_LENGTH__>
			uint8_t bitMask = (1 << bitPosition);
     788:	80 91 6a 03 	lds	r24, 0x036A	; 0x80036a <bitPosition.2066>
     78c:	28 2f       	mov	r18, r24
     78e:	30 e0       	ldi	r19, 0x00	; 0
     790:	81 e0       	ldi	r24, 0x01	; 1
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	02 c0       	rjmp	.+4      	; 0x79a <handle_state_machine+0x210>
     796:	88 0f       	add	r24, r24
     798:	99 1f       	adc	r25, r25
     79a:	2a 95       	dec	r18
     79c:	e2 f7       	brpl	.-8      	; 0x796 <handle_state_machine+0x20c>
     79e:	89 83       	std	Y+1, r24	; 0x01
			if (recivedChar == '1') {
     7a0:	8c 81       	ldd	r24, Y+4	; 0x04
     7a2:	81 33       	cpi	r24, 0x31	; 49
     7a4:	61 f4       	brne	.+24     	; 0x7be <handle_state_machine+0x234>
				*address |= bitMask;  
     7a6:	8d 81       	ldd	r24, Y+5	; 0x05
     7a8:	9e 81       	ldd	r25, Y+6	; 0x06
     7aa:	fc 01       	movw	r30, r24
     7ac:	90 81       	ld	r25, Z
     7ae:	89 81       	ldd	r24, Y+1	; 0x01
     7b0:	29 2f       	mov	r18, r25
     7b2:	28 2b       	or	r18, r24
     7b4:	8d 81       	ldd	r24, Y+5	; 0x05
     7b6:	9e 81       	ldd	r25, Y+6	; 0x06
     7b8:	fc 01       	movw	r30, r24
     7ba:	20 83       	st	Z, r18
     7bc:	0d c0       	rjmp	.+26     	; 0x7d8 <handle_state_machine+0x24e>
				} else {
				*address &= ~bitMask;  
     7be:	8d 81       	ldd	r24, Y+5	; 0x05
     7c0:	9e 81       	ldd	r25, Y+6	; 0x06
     7c2:	fc 01       	movw	r30, r24
     7c4:	80 81       	ld	r24, Z
     7c6:	98 2f       	mov	r25, r24
     7c8:	89 81       	ldd	r24, Y+1	; 0x01
     7ca:	80 95       	com	r24
     7cc:	89 23       	and	r24, r25
     7ce:	28 2f       	mov	r18, r24
     7d0:	8d 81       	ldd	r24, Y+5	; 0x05
     7d2:	9e 81       	ldd	r25, Y+6	; 0x06
     7d4:	fc 01       	movw	r30, r24
     7d6:	20 83       	st	Z, r18
			}

			UART_PrintString("Updated address: 0x");
     7d8:	81 e0       	ldi	r24, 0x01	; 1
     7da:	93 e0       	ldi	r25, 0x03	; 3
     7dc:	0e 94 99 04 	call	0x932	; 0x932 <UART_PrintString>
			UART_PrintHex(*address);
     7e0:	8d 81       	ldd	r24, Y+5	; 0x05
     7e2:	9e 81       	ldd	r25, Y+6	; 0x06
     7e4:	fc 01       	movw	r30, r24
     7e6:	80 81       	ld	r24, Z
     7e8:	0e 94 ca 04 	call	0x994	; 0x994 <UART_PrintHex>
			UART_PrintString("\n");
     7ec:	86 e9       	ldi	r24, 0x96	; 150
     7ee:	91 e0       	ldi	r25, 0x01	; 1
     7f0:	0e 94 99 04 	call	0x932	; 0x932 <UART_PrintString>

			*currentState = Modtag_Adresse;
     7f4:	8a 81       	ldd	r24, Y+2	; 0x02
     7f6:	9b 81       	ldd	r25, Y+3	; 0x03
     7f8:	fc 01       	movw	r30, r24
     7fa:	10 82       	st	Z, r1

		UART_PrintString("Received Char for Bit Value: ");
		UART_PrintChar(recivedChar); 
		UART_PrintString("\n");

		if (recivedChar == '0' || recivedChar == '1') {
     7fc:	00 00       	nop
			} else {
			UART_PrintString("Invalid bit value, please enter 0 or 1\n");

			*currentState = Modtag_Bit_Position_I_Adresse;
		}
		break;
     7fe:	0f c0       	rjmp	.+30     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
			UART_PrintHex(*address);
			UART_PrintString("\n");

			*currentState = Modtag_Adresse;
			} else {
			UART_PrintString("Invalid bit value, please enter 0 or 1\n");
     800:	85 e1       	ldi	r24, 0x15	; 21
     802:	93 e0       	ldi	r25, 0x03	; 3
     804:	0e 94 99 04 	call	0x932	; 0x932 <UART_PrintString>

			*currentState = Modtag_Bit_Position_I_Adresse;
     808:	8a 81       	ldd	r24, Y+2	; 0x02
     80a:	9b 81       	ldd	r25, Y+3	; 0x03
     80c:	21 e0       	ldi	r18, 0x01	; 1
     80e:	fc 01       	movw	r30, r24
     810:	20 83       	st	Z, r18
		}
		break;
     812:	05 c0       	rjmp	.+10     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>

		default:
		UART_PrintString("Unknown state\n");
     814:	8d e3       	ldi	r24, 0x3D	; 61
     816:	93 e0       	ldi	r25, 0x03	; 3
     818:	0e 94 99 04 	call	0x932	; 0x932 <UART_PrintString>
		break;
     81c:	00 00       	nop
	}
}
     81e:	26 96       	adiw	r28, 0x06	; 6
     820:	0f b6       	in	r0, 0x3f	; 63
     822:	f8 94       	cli
     824:	de bf       	out	0x3e, r29	; 62
     826:	0f be       	out	0x3f, r0	; 63
     828:	cd bf       	out	0x3d, r28	; 61
     82a:	df 91       	pop	r29
     82c:	cf 91       	pop	r28
     82e:	08 95       	ret

00000830 <RS232Init>:
		binaryStr[i] = (value & (1 << (7 - i))) ? '1' : '0';
	}
	binaryStr[8] = '\0';
	UART_PrintString(binaryStr);
	UART_PrintString("\n");
}
     830:	cf 93       	push	r28
     832:	df 93       	push	r29
     834:	00 d0       	rcall	.+0      	; 0x836 <RS232Init+0x6>
     836:	cd b7       	in	r28, 0x3d	; 61
     838:	de b7       	in	r29, 0x3e	; 62
     83a:	87 e6       	ldi	r24, 0x67	; 103
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	9a 83       	std	Y+2, r25	; 0x02
     840:	89 83       	std	Y+1, r24	; 0x01
     842:	8c ec       	ldi	r24, 0xCC	; 204
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	29 81       	ldd	r18, Y+1	; 0x01
     848:	fc 01       	movw	r30, r24
     84a:	20 83       	st	Z, r18
     84c:	8d ec       	ldi	r24, 0xCD	; 205
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	29 81       	ldd	r18, Y+1	; 0x01
     852:	3a 81       	ldd	r19, Y+2	; 0x02
     854:	23 2f       	mov	r18, r19
     856:	33 27       	eor	r19, r19
     858:	fc 01       	movw	r30, r24
     85a:	20 83       	st	Z, r18
     85c:	88 ec       	ldi	r24, 0xC8	; 200
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	fc 01       	movw	r30, r24
     862:	10 82       	st	Z, r1
     864:	89 ec       	ldi	r24, 0xC9	; 201
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	28 e1       	ldi	r18, 0x18	; 24
     86a:	fc 01       	movw	r30, r24
     86c:	20 83       	st	Z, r18
     86e:	8a ec       	ldi	r24, 0xCA	; 202
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	26 e0       	ldi	r18, 0x06	; 6
     874:	fc 01       	movw	r30, r24
     876:	20 83       	st	Z, r18
     878:	88 e0       	ldi	r24, 0x08	; 8
     87a:	91 e0       	ldi	r25, 0x01	; 1
     87c:	90 93 6e 03 	sts	0x036E, r25	; 0x80036e <__iob+0x3>
     880:	80 93 6d 03 	sts	0x036D, r24	; 0x80036d <__iob+0x2>
     884:	86 e1       	ldi	r24, 0x16	; 22
     886:	91 e0       	ldi	r25, 0x01	; 1
     888:	90 93 6c 03 	sts	0x036C, r25	; 0x80036c <__iob+0x1>
     88c:	80 93 6b 03 	sts	0x036B, r24	; 0x80036b <__iob>
     890:	00 00       	nop
     892:	0f 90       	pop	r0
     894:	0f 90       	pop	r0
     896:	df 91       	pop	r29
     898:	cf 91       	pop	r28
     89a:	08 95       	ret

0000089c <Enable_UART_Receive_Interrupt>:
     89c:	cf 93       	push	r28
     89e:	df 93       	push	r29
     8a0:	cd b7       	in	r28, 0x3d	; 61
     8a2:	de b7       	in	r29, 0x3e	; 62
     8a4:	89 ec       	ldi	r24, 0xC9	; 201
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	29 ec       	ldi	r18, 0xC9	; 201
     8aa:	30 e0       	ldi	r19, 0x00	; 0
     8ac:	f9 01       	movw	r30, r18
     8ae:	20 81       	ld	r18, Z
     8b0:	20 68       	ori	r18, 0x80	; 128
     8b2:	fc 01       	movw	r30, r24
     8b4:	20 83       	st	Z, r18
     8b6:	00 00       	nop
     8b8:	df 91       	pop	r29
     8ba:	cf 91       	pop	r28
     8bc:	08 95       	ret

000008be <uart_getch>:
     8be:	cf 93       	push	r28
     8c0:	df 93       	push	r29
     8c2:	00 d0       	rcall	.+0      	; 0x8c4 <uart_getch+0x6>
     8c4:	cd b7       	in	r28, 0x3d	; 61
     8c6:	de b7       	in	r29, 0x3e	; 62
     8c8:	9a 83       	std	Y+2, r25	; 0x02
     8ca:	89 83       	std	Y+1, r24	; 0x01
     8cc:	00 00       	nop
     8ce:	88 ec       	ldi	r24, 0xC8	; 200
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	fc 01       	movw	r30, r24
     8d4:	80 81       	ld	r24, Z
     8d6:	88 23       	and	r24, r24
     8d8:	d4 f7       	brge	.-12     	; 0x8ce <uart_getch+0x10>
     8da:	8e ec       	ldi	r24, 0xCE	; 206
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	fc 01       	movw	r30, r24
     8e0:	80 81       	ld	r24, Z
     8e2:	88 2f       	mov	r24, r24
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	0f 90       	pop	r0
     8e8:	0f 90       	pop	r0
     8ea:	df 91       	pop	r29
     8ec:	cf 91       	pop	r28
     8ee:	08 95       	ret

000008f0 <uart_putch>:
     8f0:	cf 93       	push	r28
     8f2:	df 93       	push	r29
     8f4:	00 d0       	rcall	.+0      	; 0x8f6 <uart_putch+0x6>
     8f6:	1f 92       	push	r1
     8f8:	cd b7       	in	r28, 0x3d	; 61
     8fa:	de b7       	in	r29, 0x3e	; 62
     8fc:	89 83       	std	Y+1, r24	; 0x01
     8fe:	7b 83       	std	Y+3, r23	; 0x03
     900:	6a 83       	std	Y+2, r22	; 0x02
     902:	00 00       	nop
     904:	88 ec       	ldi	r24, 0xC8	; 200
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	fc 01       	movw	r30, r24
     90a:	80 81       	ld	r24, Z
     90c:	88 2f       	mov	r24, r24
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	80 72       	andi	r24, 0x20	; 32
     912:	99 27       	eor	r25, r25
     914:	89 2b       	or	r24, r25
     916:	b1 f3       	breq	.-20     	; 0x904 <__stack+0x5>
     918:	8e ec       	ldi	r24, 0xCE	; 206
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	29 81       	ldd	r18, Y+1	; 0x01
     91e:	fc 01       	movw	r30, r24
     920:	20 83       	st	Z, r18
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	0f 90       	pop	r0
     928:	0f 90       	pop	r0
     92a:	0f 90       	pop	r0
     92c:	df 91       	pop	r29
     92e:	cf 91       	pop	r28
     930:	08 95       	ret

00000932 <UART_PrintString>:
     932:	cf 93       	push	r28
     934:	df 93       	push	r29
     936:	00 d0       	rcall	.+0      	; 0x938 <UART_PrintString+0x6>
     938:	cd b7       	in	r28, 0x3d	; 61
     93a:	de b7       	in	r29, 0x3e	; 62
     93c:	9a 83       	std	Y+2, r25	; 0x02
     93e:	89 83       	std	Y+1, r24	; 0x01
     940:	0d c0       	rjmp	.+26     	; 0x95c <UART_PrintString+0x2a>
     942:	89 81       	ldd	r24, Y+1	; 0x01
     944:	9a 81       	ldd	r25, Y+2	; 0x02
     946:	9c 01       	movw	r18, r24
     948:	2f 5f       	subi	r18, 0xFF	; 255
     94a:	3f 4f       	sbci	r19, 0xFF	; 255
     94c:	3a 83       	std	Y+2, r19	; 0x02
     94e:	29 83       	std	Y+1, r18	; 0x01
     950:	fc 01       	movw	r30, r24
     952:	80 81       	ld	r24, Z
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	0e 94 78 04 	call	0x8f0	; 0x8f0 <uart_putch>
     95c:	89 81       	ldd	r24, Y+1	; 0x01
     95e:	9a 81       	ldd	r25, Y+2	; 0x02
     960:	fc 01       	movw	r30, r24
     962:	80 81       	ld	r24, Z
     964:	88 23       	and	r24, r24
     966:	69 f7       	brne	.-38     	; 0x942 <UART_PrintString+0x10>
     968:	00 00       	nop
     96a:	0f 90       	pop	r0
     96c:	0f 90       	pop	r0
     96e:	df 91       	pop	r29
     970:	cf 91       	pop	r28
     972:	08 95       	ret

00000974 <UART_PrintChar>:
     974:	cf 93       	push	r28
     976:	df 93       	push	r29
     978:	1f 92       	push	r1
     97a:	cd b7       	in	r28, 0x3d	; 61
     97c:	de b7       	in	r29, 0x3e	; 62
     97e:	89 83       	std	Y+1, r24	; 0x01
     980:	60 e0       	ldi	r22, 0x00	; 0
     982:	70 e0       	ldi	r23, 0x00	; 0
     984:	89 81       	ldd	r24, Y+1	; 0x01
     986:	0e 94 78 04 	call	0x8f0	; 0x8f0 <uart_putch>
     98a:	00 00       	nop
     98c:	0f 90       	pop	r0
     98e:	df 91       	pop	r29
     990:	cf 91       	pop	r28
     992:	08 95       	ret

00000994 <UART_PrintHex>:
     994:	cf 93       	push	r28
     996:	df 93       	push	r29
     998:	cd b7       	in	r28, 0x3d	; 61
     99a:	de b7       	in	r29, 0x3e	; 62
     99c:	62 97       	sbiw	r28, 0x12	; 18
     99e:	0f b6       	in	r0, 0x3f	; 63
     9a0:	f8 94       	cli
     9a2:	de bf       	out	0x3e, r29	; 62
     9a4:	0f be       	out	0x3f, r0	; 63
     9a6:	cd bf       	out	0x3d, r28	; 61
     9a8:	8a 8b       	std	Y+18, r24	; 0x12
     9aa:	21 e1       	ldi	r18, 0x11	; 17
     9ac:	ec e4       	ldi	r30, 0x4C	; 76
     9ae:	f3 e0       	ldi	r31, 0x03	; 3
     9b0:	ce 01       	movw	r24, r28
     9b2:	01 96       	adiw	r24, 0x01	; 1
     9b4:	dc 01       	movw	r26, r24
     9b6:	01 90       	ld	r0, Z+
     9b8:	0d 92       	st	X+, r0
     9ba:	2a 95       	dec	r18
     9bc:	e1 f7       	brne	.-8      	; 0x9b6 <UART_PrintHex+0x22>
     9be:	40 91 6d 03 	lds	r20, 0x036D	; 0x80036d <__iob+0x2>
     9c2:	50 91 6e 03 	lds	r21, 0x036E	; 0x80036e <__iob+0x3>
     9c6:	8a 89       	ldd	r24, Y+18	; 0x12
     9c8:	82 95       	swap	r24
     9ca:	8f 70       	andi	r24, 0x0F	; 15
     9cc:	88 2f       	mov	r24, r24
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	9e 01       	movw	r18, r28
     9d2:	2f 5f       	subi	r18, 0xFF	; 255
     9d4:	3f 4f       	sbci	r19, 0xFF	; 255
     9d6:	82 0f       	add	r24, r18
     9d8:	93 1f       	adc	r25, r19
     9da:	fc 01       	movw	r30, r24
     9dc:	80 81       	ld	r24, Z
     9de:	ba 01       	movw	r22, r20
     9e0:	0e 94 78 04 	call	0x8f0	; 0x8f0 <uart_putch>
     9e4:	40 91 6d 03 	lds	r20, 0x036D	; 0x80036d <__iob+0x2>
     9e8:	50 91 6e 03 	lds	r21, 0x036E	; 0x80036e <__iob+0x3>
     9ec:	8a 89       	ldd	r24, Y+18	; 0x12
     9ee:	88 2f       	mov	r24, r24
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	8f 70       	andi	r24, 0x0F	; 15
     9f4:	99 27       	eor	r25, r25
     9f6:	9e 01       	movw	r18, r28
     9f8:	2f 5f       	subi	r18, 0xFF	; 255
     9fa:	3f 4f       	sbci	r19, 0xFF	; 255
     9fc:	82 0f       	add	r24, r18
     9fe:	93 1f       	adc	r25, r19
     a00:	fc 01       	movw	r30, r24
     a02:	80 81       	ld	r24, Z
     a04:	ba 01       	movw	r22, r20
     a06:	0e 94 78 04 	call	0x8f0	; 0x8f0 <uart_putch>
     a0a:	00 00       	nop
     a0c:	62 96       	adiw	r28, 0x12	; 18
     a0e:	0f b6       	in	r0, 0x3f	; 63
     a10:	f8 94       	cli
     a12:	de bf       	out	0x3e, r29	; 62
     a14:	0f be       	out	0x3f, r0	; 63
     a16:	cd bf       	out	0x3d, r28	; 61
     a18:	df 91       	pop	r29
     a1a:	cf 91       	pop	r28
     a1c:	08 95       	ret

00000a1e <UART_PrintInt>:

void UART_PrintInt(uint8_t value) {
     a1e:	cf 93       	push	r28
     a20:	df 93       	push	r29
     a22:	cd b7       	in	r28, 0x3d	; 61
     a24:	de b7       	in	r29, 0x3e	; 62
     a26:	2d 97       	sbiw	r28, 0x0d	; 13
     a28:	0f b6       	in	r0, 0x3f	; 63
     a2a:	f8 94       	cli
     a2c:	de bf       	out	0x3e, r29	; 62
     a2e:	0f be       	out	0x3f, r0	; 63
     a30:	cd bf       	out	0x3d, r28	; 61
     a32:	8d 87       	std	Y+13, r24	; 0x0d
	char buffer[12]; 
	sprintf(buffer, "%d", value);
     a34:	8d 85       	ldd	r24, Y+13	; 0x0d
     a36:	88 2f       	mov	r24, r24
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	29 2f       	mov	r18, r25
     a3c:	2f 93       	push	r18
     a3e:	8f 93       	push	r24
     a40:	8f e5       	ldi	r24, 0x5F	; 95
     a42:	93 e0       	ldi	r25, 0x03	; 3
     a44:	89 2f       	mov	r24, r25
     a46:	8f 93       	push	r24
     a48:	8f e5       	ldi	r24, 0x5F	; 95
     a4a:	93 e0       	ldi	r25, 0x03	; 3
     a4c:	8f 93       	push	r24
     a4e:	ce 01       	movw	r24, r28
     a50:	01 96       	adiw	r24, 0x01	; 1
     a52:	9f 93       	push	r25
     a54:	8f 93       	push	r24
     a56:	0e 94 8b 07 	call	0xf16	; 0xf16 <sprintf>
     a5a:	0f 90       	pop	r0
     a5c:	0f 90       	pop	r0
     a5e:	0f 90       	pop	r0
     a60:	0f 90       	pop	r0
     a62:	0f 90       	pop	r0
     a64:	0f 90       	pop	r0
	UART_PrintString(buffer);
     a66:	ce 01       	movw	r24, r28
     a68:	01 96       	adiw	r24, 0x01	; 1
     a6a:	0e 94 99 04 	call	0x932	; 0x932 <UART_PrintString>
	UART_PrintString("\n");
     a6e:	8d e5       	ldi	r24, 0x5D	; 93
     a70:	93 e0       	ldi	r25, 0x03	; 3
     a72:	0e 94 99 04 	call	0x932	; 0x932 <UART_PrintString>
}
     a76:	00 00       	nop
     a78:	2d 96       	adiw	r28, 0x0d	; 13
     a7a:	0f b6       	in	r0, 0x3f	; 63
     a7c:	f8 94       	cli
     a7e:	de bf       	out	0x3e, r29	; 62
     a80:	0f be       	out	0x3f, r0	; 63
     a82:	cd bf       	out	0x3d, r28	; 61
     a84:	df 91       	pop	r29
     a86:	cf 91       	pop	r28
     a88:	08 95       	ret

00000a8a <__cmpsf2>:
     a8a:	0e 94 79 05 	call	0xaf2	; 0xaf2 <__fp_cmp>
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__cmpsf2+0x8>
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	08 95       	ret

00000a94 <__fixunssfsi>:
     a94:	0e 94 a5 05 	call	0xb4a	; 0xb4a <__fp_splitA>
     a98:	88 f0       	brcs	.+34     	; 0xabc <__fixunssfsi+0x28>
     a9a:	9f 57       	subi	r25, 0x7F	; 127
     a9c:	98 f0       	brcs	.+38     	; 0xac4 <__fixunssfsi+0x30>
     a9e:	b9 2f       	mov	r27, r25
     aa0:	99 27       	eor	r25, r25
     aa2:	b7 51       	subi	r27, 0x17	; 23
     aa4:	b0 f0       	brcs	.+44     	; 0xad2 <__fixunssfsi+0x3e>
     aa6:	e1 f0       	breq	.+56     	; 0xae0 <__fixunssfsi+0x4c>
     aa8:	66 0f       	add	r22, r22
     aaa:	77 1f       	adc	r23, r23
     aac:	88 1f       	adc	r24, r24
     aae:	99 1f       	adc	r25, r25
     ab0:	1a f0       	brmi	.+6      	; 0xab8 <__fixunssfsi+0x24>
     ab2:	ba 95       	dec	r27
     ab4:	c9 f7       	brne	.-14     	; 0xaa8 <__fixunssfsi+0x14>
     ab6:	14 c0       	rjmp	.+40     	; 0xae0 <__fixunssfsi+0x4c>
     ab8:	b1 30       	cpi	r27, 0x01	; 1
     aba:	91 f0       	breq	.+36     	; 0xae0 <__fixunssfsi+0x4c>
     abc:	0e 94 bf 05 	call	0xb7e	; 0xb7e <__fp_zero>
     ac0:	b1 e0       	ldi	r27, 0x01	; 1
     ac2:	08 95       	ret
     ac4:	0c 94 bf 05 	jmp	0xb7e	; 0xb7e <__fp_zero>
     ac8:	67 2f       	mov	r22, r23
     aca:	78 2f       	mov	r23, r24
     acc:	88 27       	eor	r24, r24
     ace:	b8 5f       	subi	r27, 0xF8	; 248
     ad0:	39 f0       	breq	.+14     	; 0xae0 <__fixunssfsi+0x4c>
     ad2:	b9 3f       	cpi	r27, 0xF9	; 249
     ad4:	cc f3       	brlt	.-14     	; 0xac8 <__fixunssfsi+0x34>
     ad6:	86 95       	lsr	r24
     ad8:	77 95       	ror	r23
     ada:	67 95       	ror	r22
     adc:	b3 95       	inc	r27
     ade:	d9 f7       	brne	.-10     	; 0xad6 <__fixunssfsi+0x42>
     ae0:	3e f4       	brtc	.+14     	; 0xaf0 <__fixunssfsi+0x5c>
     ae2:	90 95       	com	r25
     ae4:	80 95       	com	r24
     ae6:	70 95       	com	r23
     ae8:	61 95       	neg	r22
     aea:	7f 4f       	sbci	r23, 0xFF	; 255
     aec:	8f 4f       	sbci	r24, 0xFF	; 255
     aee:	9f 4f       	sbci	r25, 0xFF	; 255
     af0:	08 95       	ret

00000af2 <__fp_cmp>:
     af2:	99 0f       	add	r25, r25
     af4:	00 08       	sbc	r0, r0
     af6:	55 0f       	add	r21, r21
     af8:	aa 0b       	sbc	r26, r26
     afa:	e0 e8       	ldi	r30, 0x80	; 128
     afc:	fe ef       	ldi	r31, 0xFE	; 254
     afe:	16 16       	cp	r1, r22
     b00:	17 06       	cpc	r1, r23
     b02:	e8 07       	cpc	r30, r24
     b04:	f9 07       	cpc	r31, r25
     b06:	c0 f0       	brcs	.+48     	; 0xb38 <__fp_cmp+0x46>
     b08:	12 16       	cp	r1, r18
     b0a:	13 06       	cpc	r1, r19
     b0c:	e4 07       	cpc	r30, r20
     b0e:	f5 07       	cpc	r31, r21
     b10:	98 f0       	brcs	.+38     	; 0xb38 <__fp_cmp+0x46>
     b12:	62 1b       	sub	r22, r18
     b14:	73 0b       	sbc	r23, r19
     b16:	84 0b       	sbc	r24, r20
     b18:	95 0b       	sbc	r25, r21
     b1a:	39 f4       	brne	.+14     	; 0xb2a <__fp_cmp+0x38>
     b1c:	0a 26       	eor	r0, r26
     b1e:	61 f0       	breq	.+24     	; 0xb38 <__fp_cmp+0x46>
     b20:	23 2b       	or	r18, r19
     b22:	24 2b       	or	r18, r20
     b24:	25 2b       	or	r18, r21
     b26:	21 f4       	brne	.+8      	; 0xb30 <__fp_cmp+0x3e>
     b28:	08 95       	ret
     b2a:	0a 26       	eor	r0, r26
     b2c:	09 f4       	brne	.+2      	; 0xb30 <__fp_cmp+0x3e>
     b2e:	a1 40       	sbci	r26, 0x01	; 1
     b30:	a6 95       	lsr	r26
     b32:	8f ef       	ldi	r24, 0xFF	; 255
     b34:	81 1d       	adc	r24, r1
     b36:	81 1d       	adc	r24, r1
     b38:	08 95       	ret

00000b3a <__fp_split3>:
     b3a:	57 fd       	sbrc	r21, 7
     b3c:	90 58       	subi	r25, 0x80	; 128
     b3e:	44 0f       	add	r20, r20
     b40:	55 1f       	adc	r21, r21
     b42:	59 f0       	breq	.+22     	; 0xb5a <__fp_splitA+0x10>
     b44:	5f 3f       	cpi	r21, 0xFF	; 255
     b46:	71 f0       	breq	.+28     	; 0xb64 <__fp_splitA+0x1a>
     b48:	47 95       	ror	r20

00000b4a <__fp_splitA>:
     b4a:	88 0f       	add	r24, r24
     b4c:	97 fb       	bst	r25, 7
     b4e:	99 1f       	adc	r25, r25
     b50:	61 f0       	breq	.+24     	; 0xb6a <__fp_splitA+0x20>
     b52:	9f 3f       	cpi	r25, 0xFF	; 255
     b54:	79 f0       	breq	.+30     	; 0xb74 <__fp_splitA+0x2a>
     b56:	87 95       	ror	r24
     b58:	08 95       	ret
     b5a:	12 16       	cp	r1, r18
     b5c:	13 06       	cpc	r1, r19
     b5e:	14 06       	cpc	r1, r20
     b60:	55 1f       	adc	r21, r21
     b62:	f2 cf       	rjmp	.-28     	; 0xb48 <__fp_split3+0xe>
     b64:	46 95       	lsr	r20
     b66:	f1 df       	rcall	.-30     	; 0xb4a <__fp_splitA>
     b68:	08 c0       	rjmp	.+16     	; 0xb7a <__fp_splitA+0x30>
     b6a:	16 16       	cp	r1, r22
     b6c:	17 06       	cpc	r1, r23
     b6e:	18 06       	cpc	r1, r24
     b70:	99 1f       	adc	r25, r25
     b72:	f1 cf       	rjmp	.-30     	; 0xb56 <__fp_splitA+0xc>
     b74:	86 95       	lsr	r24
     b76:	71 05       	cpc	r23, r1
     b78:	61 05       	cpc	r22, r1
     b7a:	08 94       	sec
     b7c:	08 95       	ret

00000b7e <__fp_zero>:
     b7e:	e8 94       	clt

00000b80 <__fp_szero>:
     b80:	bb 27       	eor	r27, r27
     b82:	66 27       	eor	r22, r22
     b84:	77 27       	eor	r23, r23
     b86:	cb 01       	movw	r24, r22
     b88:	97 f9       	bld	r25, 7
     b8a:	08 95       	ret

00000b8c <__gesf2>:
     b8c:	0e 94 79 05 	call	0xaf2	; 0xaf2 <__fp_cmp>
     b90:	08 f4       	brcc	.+2      	; 0xb94 <__gesf2+0x8>
     b92:	8f ef       	ldi	r24, 0xFF	; 255
     b94:	08 95       	ret

00000b96 <__mulsf3>:
     b96:	0e 94 de 05 	call	0xbbc	; 0xbbc <__mulsf3x>
     b9a:	0c 94 4f 06 	jmp	0xc9e	; 0xc9e <__fp_round>
     b9e:	0e 94 41 06 	call	0xc82	; 0xc82 <__fp_pscA>
     ba2:	38 f0       	brcs	.+14     	; 0xbb2 <__mulsf3+0x1c>
     ba4:	0e 94 48 06 	call	0xc90	; 0xc90 <__fp_pscB>
     ba8:	20 f0       	brcs	.+8      	; 0xbb2 <__mulsf3+0x1c>
     baa:	95 23       	and	r25, r21
     bac:	11 f0       	breq	.+4      	; 0xbb2 <__mulsf3+0x1c>
     bae:	0c 94 38 06 	jmp	0xc70	; 0xc70 <__fp_inf>
     bb2:	0c 94 3e 06 	jmp	0xc7c	; 0xc7c <__fp_nan>
     bb6:	11 24       	eor	r1, r1
     bb8:	0c 94 c0 05 	jmp	0xb80	; 0xb80 <__fp_szero>

00000bbc <__mulsf3x>:
     bbc:	0e 94 9d 05 	call	0xb3a	; 0xb3a <__fp_split3>
     bc0:	70 f3       	brcs	.-36     	; 0xb9e <__mulsf3+0x8>

00000bc2 <__mulsf3_pse>:
     bc2:	95 9f       	mul	r25, r21
     bc4:	c1 f3       	breq	.-16     	; 0xbb6 <__mulsf3+0x20>
     bc6:	95 0f       	add	r25, r21
     bc8:	50 e0       	ldi	r21, 0x00	; 0
     bca:	55 1f       	adc	r21, r21
     bcc:	62 9f       	mul	r22, r18
     bce:	f0 01       	movw	r30, r0
     bd0:	72 9f       	mul	r23, r18
     bd2:	bb 27       	eor	r27, r27
     bd4:	f0 0d       	add	r31, r0
     bd6:	b1 1d       	adc	r27, r1
     bd8:	63 9f       	mul	r22, r19
     bda:	aa 27       	eor	r26, r26
     bdc:	f0 0d       	add	r31, r0
     bde:	b1 1d       	adc	r27, r1
     be0:	aa 1f       	adc	r26, r26
     be2:	64 9f       	mul	r22, r20
     be4:	66 27       	eor	r22, r22
     be6:	b0 0d       	add	r27, r0
     be8:	a1 1d       	adc	r26, r1
     bea:	66 1f       	adc	r22, r22
     bec:	82 9f       	mul	r24, r18
     bee:	22 27       	eor	r18, r18
     bf0:	b0 0d       	add	r27, r0
     bf2:	a1 1d       	adc	r26, r1
     bf4:	62 1f       	adc	r22, r18
     bf6:	73 9f       	mul	r23, r19
     bf8:	b0 0d       	add	r27, r0
     bfa:	a1 1d       	adc	r26, r1
     bfc:	62 1f       	adc	r22, r18
     bfe:	83 9f       	mul	r24, r19
     c00:	a0 0d       	add	r26, r0
     c02:	61 1d       	adc	r22, r1
     c04:	22 1f       	adc	r18, r18
     c06:	74 9f       	mul	r23, r20
     c08:	33 27       	eor	r19, r19
     c0a:	a0 0d       	add	r26, r0
     c0c:	61 1d       	adc	r22, r1
     c0e:	23 1f       	adc	r18, r19
     c10:	84 9f       	mul	r24, r20
     c12:	60 0d       	add	r22, r0
     c14:	21 1d       	adc	r18, r1
     c16:	82 2f       	mov	r24, r18
     c18:	76 2f       	mov	r23, r22
     c1a:	6a 2f       	mov	r22, r26
     c1c:	11 24       	eor	r1, r1
     c1e:	9f 57       	subi	r25, 0x7F	; 127
     c20:	50 40       	sbci	r21, 0x00	; 0
     c22:	9a f0       	brmi	.+38     	; 0xc4a <__mulsf3_pse+0x88>
     c24:	f1 f0       	breq	.+60     	; 0xc62 <__mulsf3_pse+0xa0>
     c26:	88 23       	and	r24, r24
     c28:	4a f0       	brmi	.+18     	; 0xc3c <__mulsf3_pse+0x7a>
     c2a:	ee 0f       	add	r30, r30
     c2c:	ff 1f       	adc	r31, r31
     c2e:	bb 1f       	adc	r27, r27
     c30:	66 1f       	adc	r22, r22
     c32:	77 1f       	adc	r23, r23
     c34:	88 1f       	adc	r24, r24
     c36:	91 50       	subi	r25, 0x01	; 1
     c38:	50 40       	sbci	r21, 0x00	; 0
     c3a:	a9 f7       	brne	.-22     	; 0xc26 <__mulsf3_pse+0x64>
     c3c:	9e 3f       	cpi	r25, 0xFE	; 254
     c3e:	51 05       	cpc	r21, r1
     c40:	80 f0       	brcs	.+32     	; 0xc62 <__mulsf3_pse+0xa0>
     c42:	0c 94 38 06 	jmp	0xc70	; 0xc70 <__fp_inf>
     c46:	0c 94 c0 05 	jmp	0xb80	; 0xb80 <__fp_szero>
     c4a:	5f 3f       	cpi	r21, 0xFF	; 255
     c4c:	e4 f3       	brlt	.-8      	; 0xc46 <__mulsf3_pse+0x84>
     c4e:	98 3e       	cpi	r25, 0xE8	; 232
     c50:	d4 f3       	brlt	.-12     	; 0xc46 <__mulsf3_pse+0x84>
     c52:	86 95       	lsr	r24
     c54:	77 95       	ror	r23
     c56:	67 95       	ror	r22
     c58:	b7 95       	ror	r27
     c5a:	f7 95       	ror	r31
     c5c:	e7 95       	ror	r30
     c5e:	9f 5f       	subi	r25, 0xFF	; 255
     c60:	c1 f7       	brne	.-16     	; 0xc52 <__mulsf3_pse+0x90>
     c62:	fe 2b       	or	r31, r30
     c64:	88 0f       	add	r24, r24
     c66:	91 1d       	adc	r25, r1
     c68:	96 95       	lsr	r25
     c6a:	87 95       	ror	r24
     c6c:	97 f9       	bld	r25, 7
     c6e:	08 95       	ret

00000c70 <__fp_inf>:
     c70:	97 f9       	bld	r25, 7
     c72:	9f 67       	ori	r25, 0x7F	; 127
     c74:	80 e8       	ldi	r24, 0x80	; 128
     c76:	70 e0       	ldi	r23, 0x00	; 0
     c78:	60 e0       	ldi	r22, 0x00	; 0
     c7a:	08 95       	ret

00000c7c <__fp_nan>:
     c7c:	9f ef       	ldi	r25, 0xFF	; 255
     c7e:	80 ec       	ldi	r24, 0xC0	; 192
     c80:	08 95       	ret

00000c82 <__fp_pscA>:
     c82:	00 24       	eor	r0, r0
     c84:	0a 94       	dec	r0
     c86:	16 16       	cp	r1, r22
     c88:	17 06       	cpc	r1, r23
     c8a:	18 06       	cpc	r1, r24
     c8c:	09 06       	cpc	r0, r25
     c8e:	08 95       	ret

00000c90 <__fp_pscB>:
     c90:	00 24       	eor	r0, r0
     c92:	0a 94       	dec	r0
     c94:	12 16       	cp	r1, r18
     c96:	13 06       	cpc	r1, r19
     c98:	14 06       	cpc	r1, r20
     c9a:	05 06       	cpc	r0, r21
     c9c:	08 95       	ret

00000c9e <__fp_round>:
     c9e:	09 2e       	mov	r0, r25
     ca0:	03 94       	inc	r0
     ca2:	00 0c       	add	r0, r0
     ca4:	11 f4       	brne	.+4      	; 0xcaa <__fp_round+0xc>
     ca6:	88 23       	and	r24, r24
     ca8:	52 f0       	brmi	.+20     	; 0xcbe <__fp_round+0x20>
     caa:	bb 0f       	add	r27, r27
     cac:	40 f4       	brcc	.+16     	; 0xcbe <__fp_round+0x20>
     cae:	bf 2b       	or	r27, r31
     cb0:	11 f4       	brne	.+4      	; 0xcb6 <__fp_round+0x18>
     cb2:	60 ff       	sbrs	r22, 0
     cb4:	04 c0       	rjmp	.+8      	; 0xcbe <__fp_round+0x20>
     cb6:	6f 5f       	subi	r22, 0xFF	; 255
     cb8:	7f 4f       	sbci	r23, 0xFF	; 255
     cba:	8f 4f       	sbci	r24, 0xFF	; 255
     cbc:	9f 4f       	sbci	r25, 0xFF	; 255
     cbe:	08 95       	ret

00000cc0 <strtol>:
     cc0:	a0 e0       	ldi	r26, 0x00	; 0
     cc2:	b0 e0       	ldi	r27, 0x00	; 0
     cc4:	e6 e6       	ldi	r30, 0x66	; 102
     cc6:	f6 e0       	ldi	r31, 0x06	; 6
     cc8:	0c 94 7f 0a 	jmp	0x14fe	; 0x14fe <__prologue_saves__+0x2>
     ccc:	5c 01       	movw	r10, r24
     cce:	6b 01       	movw	r12, r22
     cd0:	7a 01       	movw	r14, r20
     cd2:	61 15       	cp	r22, r1
     cd4:	71 05       	cpc	r23, r1
     cd6:	19 f0       	breq	.+6      	; 0xcde <strtol+0x1e>
     cd8:	fb 01       	movw	r30, r22
     cda:	91 83       	std	Z+1, r25	; 0x01
     cdc:	80 83       	st	Z, r24
     cde:	e1 14       	cp	r14, r1
     ce0:	f1 04       	cpc	r15, r1
     ce2:	29 f0       	breq	.+10     	; 0xcee <strtol+0x2e>
     ce4:	c7 01       	movw	r24, r14
     ce6:	02 97       	sbiw	r24, 0x02	; 2
     ce8:	83 97       	sbiw	r24, 0x23	; 35
     cea:	08 f0       	brcs	.+2      	; 0xcee <strtol+0x2e>
     cec:	e5 c0       	rjmp	.+458    	; 0xeb8 <strtol+0x1f8>
     cee:	e5 01       	movw	r28, r10
     cf0:	21 96       	adiw	r28, 0x01	; 1
     cf2:	f5 01       	movw	r30, r10
     cf4:	10 81       	ld	r17, Z
     cf6:	81 2f       	mov	r24, r17
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	0e 94 82 07 	call	0xf04	; 0xf04 <isspace>
     cfe:	89 2b       	or	r24, r25
     d00:	11 f0       	breq	.+4      	; 0xd06 <strtol+0x46>
     d02:	5e 01       	movw	r10, r28
     d04:	f4 cf       	rjmp	.-24     	; 0xcee <strtol+0x2e>
     d06:	1d 32       	cpi	r17, 0x2D	; 45
     d08:	29 f4       	brne	.+10     	; 0xd14 <strtol+0x54>
     d0a:	21 96       	adiw	r28, 0x01	; 1
     d0c:	f5 01       	movw	r30, r10
     d0e:	11 81       	ldd	r17, Z+1	; 0x01
     d10:	01 e0       	ldi	r16, 0x01	; 1
     d12:	07 c0       	rjmp	.+14     	; 0xd22 <strtol+0x62>
     d14:	1b 32       	cpi	r17, 0x2B	; 43
     d16:	21 f4       	brne	.+8      	; 0xd20 <strtol+0x60>
     d18:	e5 01       	movw	r28, r10
     d1a:	22 96       	adiw	r28, 0x02	; 2
     d1c:	f5 01       	movw	r30, r10
     d1e:	11 81       	ldd	r17, Z+1	; 0x01
     d20:	00 e0       	ldi	r16, 0x00	; 0
     d22:	e1 14       	cp	r14, r1
     d24:	f1 04       	cpc	r15, r1
     d26:	09 f1       	breq	.+66     	; 0xd6a <strtol+0xaa>
     d28:	f0 e1       	ldi	r31, 0x10	; 16
     d2a:	ef 16       	cp	r14, r31
     d2c:	f1 04       	cpc	r15, r1
     d2e:	29 f4       	brne	.+10     	; 0xd3a <strtol+0x7a>
     d30:	3f c0       	rjmp	.+126    	; 0xdb0 <strtol+0xf0>
     d32:	10 e3       	ldi	r17, 0x30	; 48
     d34:	e1 14       	cp	r14, r1
     d36:	f1 04       	cpc	r15, r1
     d38:	21 f1       	breq	.+72     	; 0xd82 <strtol+0xc2>
     d3a:	28 e0       	ldi	r18, 0x08	; 8
     d3c:	e2 16       	cp	r14, r18
     d3e:	f1 04       	cpc	r15, r1
     d40:	01 f1       	breq	.+64     	; 0xd82 <strtol+0xc2>
     d42:	54 f4       	brge	.+20     	; 0xd58 <strtol+0x98>
     d44:	e2 e0       	ldi	r30, 0x02	; 2
     d46:	ee 16       	cp	r14, r30
     d48:	f1 04       	cpc	r15, r1
     d4a:	21 f5       	brne	.+72     	; 0xd94 <strtol+0xd4>
     d4c:	81 2c       	mov	r8, r1
     d4e:	91 2c       	mov	r9, r1
     d50:	a1 2c       	mov	r10, r1
     d52:	b0 e4       	ldi	r27, 0x40	; 64
     d54:	bb 2e       	mov	r11, r27
     d56:	3e c0       	rjmp	.+124    	; 0xdd4 <strtol+0x114>
     d58:	fa e0       	ldi	r31, 0x0A	; 10
     d5a:	ef 16       	cp	r14, r31
     d5c:	f1 04       	cpc	r15, r1
     d5e:	39 f0       	breq	.+14     	; 0xd6e <strtol+0xae>
     d60:	20 e1       	ldi	r18, 0x10	; 16
     d62:	e2 16       	cp	r14, r18
     d64:	f1 04       	cpc	r15, r1
     d66:	b1 f4       	brne	.+44     	; 0xd94 <strtol+0xd4>
     d68:	30 c0       	rjmp	.+96     	; 0xdca <strtol+0x10a>
     d6a:	10 33       	cpi	r17, 0x30	; 48
     d6c:	19 f1       	breq	.+70     	; 0xdb4 <strtol+0xf4>
     d6e:	fa e0       	ldi	r31, 0x0A	; 10
     d70:	ef 2e       	mov	r14, r31
     d72:	f1 2c       	mov	r15, r1
     d74:	ac ec       	ldi	r26, 0xCC	; 204
     d76:	8a 2e       	mov	r8, r26
     d78:	98 2c       	mov	r9, r8
     d7a:	a8 2c       	mov	r10, r8
     d7c:	ac e0       	ldi	r26, 0x0C	; 12
     d7e:	ba 2e       	mov	r11, r26
     d80:	29 c0       	rjmp	.+82     	; 0xdd4 <strtol+0x114>
     d82:	78 e0       	ldi	r23, 0x08	; 8
     d84:	e7 2e       	mov	r14, r23
     d86:	f1 2c       	mov	r15, r1
     d88:	81 2c       	mov	r8, r1
     d8a:	91 2c       	mov	r9, r1
     d8c:	a1 2c       	mov	r10, r1
     d8e:	e0 e1       	ldi	r30, 0x10	; 16
     d90:	be 2e       	mov	r11, r30
     d92:	20 c0       	rjmp	.+64     	; 0xdd4 <strtol+0x114>
     d94:	60 e0       	ldi	r22, 0x00	; 0
     d96:	70 e0       	ldi	r23, 0x00	; 0
     d98:	80 e0       	ldi	r24, 0x00	; 0
     d9a:	90 e8       	ldi	r25, 0x80	; 128
     d9c:	97 01       	movw	r18, r14
     d9e:	0f 2c       	mov	r0, r15
     da0:	00 0c       	add	r0, r0
     da2:	44 0b       	sbc	r20, r20
     da4:	55 0b       	sbc	r21, r21
     da6:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__udivmodsi4>
     daa:	49 01       	movw	r8, r18
     dac:	5a 01       	movw	r10, r20
     dae:	12 c0       	rjmp	.+36     	; 0xdd4 <strtol+0x114>
     db0:	10 33       	cpi	r17, 0x30	; 48
     db2:	59 f4       	brne	.+22     	; 0xdca <strtol+0x10a>
     db4:	88 81       	ld	r24, Y
     db6:	8f 7d       	andi	r24, 0xDF	; 223
     db8:	88 35       	cpi	r24, 0x58	; 88
     dba:	09 f0       	breq	.+2      	; 0xdbe <strtol+0xfe>
     dbc:	ba cf       	rjmp	.-140    	; 0xd32 <strtol+0x72>
     dbe:	19 81       	ldd	r17, Y+1	; 0x01
     dc0:	22 96       	adiw	r28, 0x02	; 2
     dc2:	02 60       	ori	r16, 0x02	; 2
     dc4:	80 e1       	ldi	r24, 0x10	; 16
     dc6:	e8 2e       	mov	r14, r24
     dc8:	f1 2c       	mov	r15, r1
     dca:	81 2c       	mov	r8, r1
     dcc:	91 2c       	mov	r9, r1
     dce:	a1 2c       	mov	r10, r1
     dd0:	68 e0       	ldi	r22, 0x08	; 8
     dd2:	b6 2e       	mov	r11, r22
     dd4:	40 e0       	ldi	r20, 0x00	; 0
     dd6:	60 e0       	ldi	r22, 0x00	; 0
     dd8:	70 e0       	ldi	r23, 0x00	; 0
     dda:	cb 01       	movw	r24, r22
     ddc:	27 01       	movw	r4, r14
     dde:	0f 2c       	mov	r0, r15
     de0:	00 0c       	add	r0, r0
     de2:	66 08       	sbc	r6, r6
     de4:	77 08       	sbc	r7, r7
     de6:	fe 01       	movw	r30, r28
     de8:	50 ed       	ldi	r21, 0xD0	; 208
     dea:	35 2e       	mov	r3, r21
     dec:	31 0e       	add	r3, r17
     dee:	29 e0       	ldi	r18, 0x09	; 9
     df0:	23 15       	cp	r18, r3
     df2:	70 f4       	brcc	.+28     	; 0xe10 <strtol+0x150>
     df4:	2f eb       	ldi	r18, 0xBF	; 191
     df6:	21 0f       	add	r18, r17
     df8:	2a 31       	cpi	r18, 0x1A	; 26
     dfa:	18 f4       	brcc	.+6      	; 0xe02 <strtol+0x142>
     dfc:	39 ec       	ldi	r19, 0xC9	; 201
     dfe:	33 2e       	mov	r3, r19
     e00:	06 c0       	rjmp	.+12     	; 0xe0e <strtol+0x14e>
     e02:	2f e9       	ldi	r18, 0x9F	; 159
     e04:	21 0f       	add	r18, r17
     e06:	2a 31       	cpi	r18, 0x1A	; 26
     e08:	18 f5       	brcc	.+70     	; 0xe50 <strtol+0x190>
     e0a:	29 ea       	ldi	r18, 0xA9	; 169
     e0c:	32 2e       	mov	r3, r18
     e0e:	31 0e       	add	r3, r17
     e10:	23 2d       	mov	r18, r3
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	2e 15       	cp	r18, r14
     e16:	3f 05       	cpc	r19, r15
     e18:	dc f4       	brge	.+54     	; 0xe50 <strtol+0x190>
     e1a:	47 fd       	sbrc	r20, 7
     e1c:	16 c0       	rjmp	.+44     	; 0xe4a <strtol+0x18a>
     e1e:	86 16       	cp	r8, r22
     e20:	97 06       	cpc	r9, r23
     e22:	a8 06       	cpc	r10, r24
     e24:	b9 06       	cpc	r11, r25
     e26:	70 f0       	brcs	.+28     	; 0xe44 <strtol+0x184>
     e28:	a3 01       	movw	r20, r6
     e2a:	92 01       	movw	r18, r4
     e2c:	0e 94 41 0a 	call	0x1482	; 0x1482 <__mulsi3>
     e30:	63 0d       	add	r22, r3
     e32:	71 1d       	adc	r23, r1
     e34:	81 1d       	adc	r24, r1
     e36:	91 1d       	adc	r25, r1
     e38:	61 30       	cpi	r22, 0x01	; 1
     e3a:	71 05       	cpc	r23, r1
     e3c:	81 05       	cpc	r24, r1
     e3e:	20 e8       	ldi	r18, 0x80	; 128
     e40:	92 07       	cpc	r25, r18
     e42:	10 f0       	brcs	.+4      	; 0xe48 <strtol+0x188>
     e44:	4f ef       	ldi	r20, 0xFF	; 255
     e46:	01 c0       	rjmp	.+2      	; 0xe4a <strtol+0x18a>
     e48:	41 e0       	ldi	r20, 0x01	; 1
     e4a:	21 96       	adiw	r28, 0x01	; 1
     e4c:	10 81       	ld	r17, Z
     e4e:	cb cf       	rjmp	.-106    	; 0xde6 <strtol+0x126>
     e50:	20 2f       	mov	r18, r16
     e52:	21 70       	andi	r18, 0x01	; 1
     e54:	c1 14       	cp	r12, r1
     e56:	d1 04       	cpc	r13, r1
     e58:	71 f0       	breq	.+28     	; 0xe76 <strtol+0x1b6>
     e5a:	44 23       	and	r20, r20
     e5c:	29 f0       	breq	.+10     	; 0xe68 <strtol+0x1a8>
     e5e:	21 97       	sbiw	r28, 0x01	; 1
     e60:	f6 01       	movw	r30, r12
     e62:	d1 83       	std	Z+1, r29	; 0x01
     e64:	c0 83       	st	Z, r28
     e66:	07 c0       	rjmp	.+14     	; 0xe76 <strtol+0x1b6>
     e68:	01 ff       	sbrs	r16, 1
     e6a:	19 c0       	rjmp	.+50     	; 0xe9e <strtol+0x1de>
     e6c:	22 97       	sbiw	r28, 0x02	; 2
     e6e:	f6 01       	movw	r30, r12
     e70:	d1 83       	std	Z+1, r29	; 0x01
     e72:	c0 83       	st	Z, r28
     e74:	14 c0       	rjmp	.+40     	; 0xe9e <strtol+0x1de>
     e76:	47 ff       	sbrs	r20, 7
     e78:	12 c0       	rjmp	.+36     	; 0xe9e <strtol+0x1de>
     e7a:	22 23       	and	r18, r18
     e7c:	29 f0       	breq	.+10     	; 0xe88 <strtol+0x1c8>
     e7e:	60 e0       	ldi	r22, 0x00	; 0
     e80:	70 e0       	ldi	r23, 0x00	; 0
     e82:	80 e0       	ldi	r24, 0x00	; 0
     e84:	90 e8       	ldi	r25, 0x80	; 128
     e86:	04 c0       	rjmp	.+8      	; 0xe90 <strtol+0x1d0>
     e88:	6f ef       	ldi	r22, 0xFF	; 255
     e8a:	7f ef       	ldi	r23, 0xFF	; 255
     e8c:	8f ef       	ldi	r24, 0xFF	; 255
     e8e:	9f e7       	ldi	r25, 0x7F	; 127
     e90:	22 e2       	ldi	r18, 0x22	; 34
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	30 93 72 03 	sts	0x0372, r19	; 0x800372 <errno+0x1>
     e98:	20 93 71 03 	sts	0x0371, r18	; 0x800371 <errno>
     e9c:	09 c0       	rjmp	.+18     	; 0xeb0 <strtol+0x1f0>
     e9e:	22 23       	and	r18, r18
     ea0:	81 f0       	breq	.+32     	; 0xec2 <strtol+0x202>
     ea2:	90 95       	com	r25
     ea4:	80 95       	com	r24
     ea6:	70 95       	com	r23
     ea8:	61 95       	neg	r22
     eaa:	7f 4f       	sbci	r23, 0xFF	; 255
     eac:	8f 4f       	sbci	r24, 0xFF	; 255
     eae:	9f 4f       	sbci	r25, 0xFF	; 255
     eb0:	46 2f       	mov	r20, r22
     eb2:	37 2f       	mov	r19, r23
     eb4:	28 2f       	mov	r18, r24
     eb6:	12 c0       	rjmp	.+36     	; 0xedc <strtol+0x21c>
     eb8:	40 e0       	ldi	r20, 0x00	; 0
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	20 e0       	ldi	r18, 0x00	; 0
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	0d c0       	rjmp	.+26     	; 0xedc <strtol+0x21c>
     ec2:	97 ff       	sbrs	r25, 7
     ec4:	f5 cf       	rjmp	.-22     	; 0xeb0 <strtol+0x1f0>
     ec6:	82 e2       	ldi	r24, 0x22	; 34
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	90 93 72 03 	sts	0x0372, r25	; 0x800372 <errno+0x1>
     ece:	80 93 71 03 	sts	0x0371, r24	; 0x800371 <errno>
     ed2:	6f ef       	ldi	r22, 0xFF	; 255
     ed4:	7f ef       	ldi	r23, 0xFF	; 255
     ed6:	8f ef       	ldi	r24, 0xFF	; 255
     ed8:	9f e7       	ldi	r25, 0x7F	; 127
     eda:	ea cf       	rjmp	.-44     	; 0xeb0 <strtol+0x1f0>
     edc:	64 2f       	mov	r22, r20
     ede:	73 2f       	mov	r23, r19
     ee0:	82 2f       	mov	r24, r18
     ee2:	cd b7       	in	r28, 0x3d	; 61
     ee4:	de b7       	in	r29, 0x3e	; 62
     ee6:	e1 e1       	ldi	r30, 0x11	; 17
     ee8:	0c 94 9b 0a 	jmp	0x1536	; 0x1536 <__epilogue_restores__+0x2>

00000eec <isxdigit>:
     eec:	91 11       	cpse	r25, r1
     eee:	0c 94 8e 09 	jmp	0x131c	; 0x131c <__ctype_isfalse>
     ef2:	80 53       	subi	r24, 0x30	; 48
     ef4:	8a 50       	subi	r24, 0x0A	; 10
     ef6:	28 f0       	brcs	.+10     	; 0xf02 <isxdigit+0x16>
     ef8:	86 5c       	subi	r24, 0xC6	; 198
     efa:	80 62       	ori	r24, 0x20	; 32
     efc:	81 56       	subi	r24, 0x61	; 97
     efe:	86 50       	subi	r24, 0x06	; 6
     f00:	b0 f7       	brcc	.-20     	; 0xeee <isxdigit+0x2>
     f02:	08 95       	ret

00000f04 <isspace>:
     f04:	91 11       	cpse	r25, r1
     f06:	0c 94 8e 09 	jmp	0x131c	; 0x131c <__ctype_isfalse>
     f0a:	80 32       	cpi	r24, 0x20	; 32
     f0c:	19 f0       	breq	.+6      	; 0xf14 <isspace+0x10>
     f0e:	89 50       	subi	r24, 0x09	; 9
     f10:	85 50       	subi	r24, 0x05	; 5
     f12:	c8 f7       	brcc	.-14     	; 0xf06 <isspace+0x2>
     f14:	08 95       	ret

00000f16 <sprintf>:
     f16:	ae e0       	ldi	r26, 0x0E	; 14
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	e1 e9       	ldi	r30, 0x91	; 145
     f1c:	f7 e0       	ldi	r31, 0x07	; 7
     f1e:	0c 94 8c 0a 	jmp	0x1518	; 0x1518 <__prologue_saves__+0x1c>
     f22:	0d 89       	ldd	r16, Y+21	; 0x15
     f24:	1e 89       	ldd	r17, Y+22	; 0x16
     f26:	86 e0       	ldi	r24, 0x06	; 6
     f28:	8c 83       	std	Y+4, r24	; 0x04
     f2a:	1a 83       	std	Y+2, r17	; 0x02
     f2c:	09 83       	std	Y+1, r16	; 0x01
     f2e:	8f ef       	ldi	r24, 0xFF	; 255
     f30:	9f e7       	ldi	r25, 0x7F	; 127
     f32:	9e 83       	std	Y+6, r25	; 0x06
     f34:	8d 83       	std	Y+5, r24	; 0x05
     f36:	ae 01       	movw	r20, r28
     f38:	47 5e       	subi	r20, 0xE7	; 231
     f3a:	5f 4f       	sbci	r21, 0xFF	; 255
     f3c:	6f 89       	ldd	r22, Y+23	; 0x17
     f3e:	78 8d       	ldd	r23, Y+24	; 0x18
     f40:	ce 01       	movw	r24, r28
     f42:	01 96       	adiw	r24, 0x01	; 1
     f44:	0e 94 ad 07 	call	0xf5a	; 0xf5a <vfprintf>
     f48:	ef 81       	ldd	r30, Y+7	; 0x07
     f4a:	f8 85       	ldd	r31, Y+8	; 0x08
     f4c:	e0 0f       	add	r30, r16
     f4e:	f1 1f       	adc	r31, r17
     f50:	10 82       	st	Z, r1
     f52:	2e 96       	adiw	r28, 0x0e	; 14
     f54:	e4 e0       	ldi	r30, 0x04	; 4
     f56:	0c 94 a8 0a 	jmp	0x1550	; 0x1550 <__epilogue_restores__+0x1c>

00000f5a <vfprintf>:
     f5a:	ab e0       	ldi	r26, 0x0B	; 11
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	e3 eb       	ldi	r30, 0xB3	; 179
     f60:	f7 e0       	ldi	r31, 0x07	; 7
     f62:	0c 94 7e 0a 	jmp	0x14fc	; 0x14fc <__prologue_saves__>
     f66:	6c 01       	movw	r12, r24
     f68:	7b 01       	movw	r14, r22
     f6a:	8a 01       	movw	r16, r20
     f6c:	fc 01       	movw	r30, r24
     f6e:	17 82       	std	Z+7, r1	; 0x07
     f70:	16 82       	std	Z+6, r1	; 0x06
     f72:	83 81       	ldd	r24, Z+3	; 0x03
     f74:	81 ff       	sbrs	r24, 1
     f76:	cc c1       	rjmp	.+920    	; 0x1310 <vfprintf+0x3b6>
     f78:	ce 01       	movw	r24, r28
     f7a:	01 96       	adiw	r24, 0x01	; 1
     f7c:	3c 01       	movw	r6, r24
     f7e:	f6 01       	movw	r30, r12
     f80:	93 81       	ldd	r25, Z+3	; 0x03
     f82:	f7 01       	movw	r30, r14
     f84:	93 fd       	sbrc	r25, 3
     f86:	85 91       	lpm	r24, Z+
     f88:	93 ff       	sbrs	r25, 3
     f8a:	81 91       	ld	r24, Z+
     f8c:	7f 01       	movw	r14, r30
     f8e:	88 23       	and	r24, r24
     f90:	09 f4       	brne	.+2      	; 0xf94 <vfprintf+0x3a>
     f92:	ba c1       	rjmp	.+884    	; 0x1308 <vfprintf+0x3ae>
     f94:	85 32       	cpi	r24, 0x25	; 37
     f96:	39 f4       	brne	.+14     	; 0xfa6 <vfprintf+0x4c>
     f98:	93 fd       	sbrc	r25, 3
     f9a:	85 91       	lpm	r24, Z+
     f9c:	93 ff       	sbrs	r25, 3
     f9e:	81 91       	ld	r24, Z+
     fa0:	7f 01       	movw	r14, r30
     fa2:	85 32       	cpi	r24, 0x25	; 37
     fa4:	29 f4       	brne	.+10     	; 0xfb0 <vfprintf+0x56>
     fa6:	b6 01       	movw	r22, r12
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	0e 94 a7 09 	call	0x134e	; 0x134e <fputc>
     fae:	e7 cf       	rjmp	.-50     	; 0xf7e <vfprintf+0x24>
     fb0:	91 2c       	mov	r9, r1
     fb2:	21 2c       	mov	r2, r1
     fb4:	31 2c       	mov	r3, r1
     fb6:	ff e1       	ldi	r31, 0x1F	; 31
     fb8:	f3 15       	cp	r31, r3
     fba:	d8 f0       	brcs	.+54     	; 0xff2 <vfprintf+0x98>
     fbc:	8b 32       	cpi	r24, 0x2B	; 43
     fbe:	79 f0       	breq	.+30     	; 0xfde <vfprintf+0x84>
     fc0:	38 f4       	brcc	.+14     	; 0xfd0 <vfprintf+0x76>
     fc2:	80 32       	cpi	r24, 0x20	; 32
     fc4:	79 f0       	breq	.+30     	; 0xfe4 <vfprintf+0x8a>
     fc6:	83 32       	cpi	r24, 0x23	; 35
     fc8:	a1 f4       	brne	.+40     	; 0xff2 <vfprintf+0x98>
     fca:	23 2d       	mov	r18, r3
     fcc:	20 61       	ori	r18, 0x10	; 16
     fce:	1d c0       	rjmp	.+58     	; 0x100a <vfprintf+0xb0>
     fd0:	8d 32       	cpi	r24, 0x2D	; 45
     fd2:	61 f0       	breq	.+24     	; 0xfec <vfprintf+0x92>
     fd4:	80 33       	cpi	r24, 0x30	; 48
     fd6:	69 f4       	brne	.+26     	; 0xff2 <vfprintf+0x98>
     fd8:	23 2d       	mov	r18, r3
     fda:	21 60       	ori	r18, 0x01	; 1
     fdc:	16 c0       	rjmp	.+44     	; 0x100a <vfprintf+0xb0>
     fde:	83 2d       	mov	r24, r3
     fe0:	82 60       	ori	r24, 0x02	; 2
     fe2:	38 2e       	mov	r3, r24
     fe4:	e3 2d       	mov	r30, r3
     fe6:	e4 60       	ori	r30, 0x04	; 4
     fe8:	3e 2e       	mov	r3, r30
     fea:	2a c0       	rjmp	.+84     	; 0x1040 <vfprintf+0xe6>
     fec:	f3 2d       	mov	r31, r3
     fee:	f8 60       	ori	r31, 0x08	; 8
     ff0:	1d c0       	rjmp	.+58     	; 0x102c <vfprintf+0xd2>
     ff2:	37 fc       	sbrc	r3, 7
     ff4:	2d c0       	rjmp	.+90     	; 0x1050 <vfprintf+0xf6>
     ff6:	20 ed       	ldi	r18, 0xD0	; 208
     ff8:	28 0f       	add	r18, r24
     ffa:	2a 30       	cpi	r18, 0x0A	; 10
     ffc:	40 f0       	brcs	.+16     	; 0x100e <vfprintf+0xb4>
     ffe:	8e 32       	cpi	r24, 0x2E	; 46
    1000:	b9 f4       	brne	.+46     	; 0x1030 <vfprintf+0xd6>
    1002:	36 fc       	sbrc	r3, 6
    1004:	81 c1       	rjmp	.+770    	; 0x1308 <vfprintf+0x3ae>
    1006:	23 2d       	mov	r18, r3
    1008:	20 64       	ori	r18, 0x40	; 64
    100a:	32 2e       	mov	r3, r18
    100c:	19 c0       	rjmp	.+50     	; 0x1040 <vfprintf+0xe6>
    100e:	36 fe       	sbrs	r3, 6
    1010:	06 c0       	rjmp	.+12     	; 0x101e <vfprintf+0xc4>
    1012:	8a e0       	ldi	r24, 0x0A	; 10
    1014:	98 9e       	mul	r9, r24
    1016:	20 0d       	add	r18, r0
    1018:	11 24       	eor	r1, r1
    101a:	92 2e       	mov	r9, r18
    101c:	11 c0       	rjmp	.+34     	; 0x1040 <vfprintf+0xe6>
    101e:	ea e0       	ldi	r30, 0x0A	; 10
    1020:	2e 9e       	mul	r2, r30
    1022:	20 0d       	add	r18, r0
    1024:	11 24       	eor	r1, r1
    1026:	22 2e       	mov	r2, r18
    1028:	f3 2d       	mov	r31, r3
    102a:	f0 62       	ori	r31, 0x20	; 32
    102c:	3f 2e       	mov	r3, r31
    102e:	08 c0       	rjmp	.+16     	; 0x1040 <vfprintf+0xe6>
    1030:	8c 36       	cpi	r24, 0x6C	; 108
    1032:	21 f4       	brne	.+8      	; 0x103c <vfprintf+0xe2>
    1034:	83 2d       	mov	r24, r3
    1036:	80 68       	ori	r24, 0x80	; 128
    1038:	38 2e       	mov	r3, r24
    103a:	02 c0       	rjmp	.+4      	; 0x1040 <vfprintf+0xe6>
    103c:	88 36       	cpi	r24, 0x68	; 104
    103e:	41 f4       	brne	.+16     	; 0x1050 <vfprintf+0xf6>
    1040:	f7 01       	movw	r30, r14
    1042:	93 fd       	sbrc	r25, 3
    1044:	85 91       	lpm	r24, Z+
    1046:	93 ff       	sbrs	r25, 3
    1048:	81 91       	ld	r24, Z+
    104a:	7f 01       	movw	r14, r30
    104c:	81 11       	cpse	r24, r1
    104e:	b3 cf       	rjmp	.-154    	; 0xfb6 <vfprintf+0x5c>
    1050:	98 2f       	mov	r25, r24
    1052:	9f 7d       	andi	r25, 0xDF	; 223
    1054:	95 54       	subi	r25, 0x45	; 69
    1056:	93 30       	cpi	r25, 0x03	; 3
    1058:	28 f4       	brcc	.+10     	; 0x1064 <vfprintf+0x10a>
    105a:	0c 5f       	subi	r16, 0xFC	; 252
    105c:	1f 4f       	sbci	r17, 0xFF	; 255
    105e:	9f e3       	ldi	r25, 0x3F	; 63
    1060:	99 83       	std	Y+1, r25	; 0x01
    1062:	0d c0       	rjmp	.+26     	; 0x107e <vfprintf+0x124>
    1064:	83 36       	cpi	r24, 0x63	; 99
    1066:	31 f0       	breq	.+12     	; 0x1074 <vfprintf+0x11a>
    1068:	83 37       	cpi	r24, 0x73	; 115
    106a:	71 f0       	breq	.+28     	; 0x1088 <vfprintf+0x12e>
    106c:	83 35       	cpi	r24, 0x53	; 83
    106e:	09 f0       	breq	.+2      	; 0x1072 <vfprintf+0x118>
    1070:	59 c0       	rjmp	.+178    	; 0x1124 <vfprintf+0x1ca>
    1072:	21 c0       	rjmp	.+66     	; 0x10b6 <vfprintf+0x15c>
    1074:	f8 01       	movw	r30, r16
    1076:	80 81       	ld	r24, Z
    1078:	89 83       	std	Y+1, r24	; 0x01
    107a:	0e 5f       	subi	r16, 0xFE	; 254
    107c:	1f 4f       	sbci	r17, 0xFF	; 255
    107e:	88 24       	eor	r8, r8
    1080:	83 94       	inc	r8
    1082:	91 2c       	mov	r9, r1
    1084:	53 01       	movw	r10, r6
    1086:	13 c0       	rjmp	.+38     	; 0x10ae <vfprintf+0x154>
    1088:	28 01       	movw	r4, r16
    108a:	f2 e0       	ldi	r31, 0x02	; 2
    108c:	4f 0e       	add	r4, r31
    108e:	51 1c       	adc	r5, r1
    1090:	f8 01       	movw	r30, r16
    1092:	a0 80       	ld	r10, Z
    1094:	b1 80       	ldd	r11, Z+1	; 0x01
    1096:	36 fe       	sbrs	r3, 6
    1098:	03 c0       	rjmp	.+6      	; 0x10a0 <vfprintf+0x146>
    109a:	69 2d       	mov	r22, r9
    109c:	70 e0       	ldi	r23, 0x00	; 0
    109e:	02 c0       	rjmp	.+4      	; 0x10a4 <vfprintf+0x14a>
    10a0:	6f ef       	ldi	r22, 0xFF	; 255
    10a2:	7f ef       	ldi	r23, 0xFF	; 255
    10a4:	c5 01       	movw	r24, r10
    10a6:	0e 94 9c 09 	call	0x1338	; 0x1338 <strnlen>
    10aa:	4c 01       	movw	r8, r24
    10ac:	82 01       	movw	r16, r4
    10ae:	f3 2d       	mov	r31, r3
    10b0:	ff 77       	andi	r31, 0x7F	; 127
    10b2:	3f 2e       	mov	r3, r31
    10b4:	16 c0       	rjmp	.+44     	; 0x10e2 <vfprintf+0x188>
    10b6:	28 01       	movw	r4, r16
    10b8:	22 e0       	ldi	r18, 0x02	; 2
    10ba:	42 0e       	add	r4, r18
    10bc:	51 1c       	adc	r5, r1
    10be:	f8 01       	movw	r30, r16
    10c0:	a0 80       	ld	r10, Z
    10c2:	b1 80       	ldd	r11, Z+1	; 0x01
    10c4:	36 fe       	sbrs	r3, 6
    10c6:	03 c0       	rjmp	.+6      	; 0x10ce <vfprintf+0x174>
    10c8:	69 2d       	mov	r22, r9
    10ca:	70 e0       	ldi	r23, 0x00	; 0
    10cc:	02 c0       	rjmp	.+4      	; 0x10d2 <vfprintf+0x178>
    10ce:	6f ef       	ldi	r22, 0xFF	; 255
    10d0:	7f ef       	ldi	r23, 0xFF	; 255
    10d2:	c5 01       	movw	r24, r10
    10d4:	0e 94 91 09 	call	0x1322	; 0x1322 <strnlen_P>
    10d8:	4c 01       	movw	r8, r24
    10da:	f3 2d       	mov	r31, r3
    10dc:	f0 68       	ori	r31, 0x80	; 128
    10de:	3f 2e       	mov	r3, r31
    10e0:	82 01       	movw	r16, r4
    10e2:	33 fc       	sbrc	r3, 3
    10e4:	1b c0       	rjmp	.+54     	; 0x111c <vfprintf+0x1c2>
    10e6:	82 2d       	mov	r24, r2
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	88 16       	cp	r8, r24
    10ec:	99 06       	cpc	r9, r25
    10ee:	b0 f4       	brcc	.+44     	; 0x111c <vfprintf+0x1c2>
    10f0:	b6 01       	movw	r22, r12
    10f2:	80 e2       	ldi	r24, 0x20	; 32
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	0e 94 a7 09 	call	0x134e	; 0x134e <fputc>
    10fa:	2a 94       	dec	r2
    10fc:	f4 cf       	rjmp	.-24     	; 0x10e6 <vfprintf+0x18c>
    10fe:	f5 01       	movw	r30, r10
    1100:	37 fc       	sbrc	r3, 7
    1102:	85 91       	lpm	r24, Z+
    1104:	37 fe       	sbrs	r3, 7
    1106:	81 91       	ld	r24, Z+
    1108:	5f 01       	movw	r10, r30
    110a:	b6 01       	movw	r22, r12
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	0e 94 a7 09 	call	0x134e	; 0x134e <fputc>
    1112:	21 10       	cpse	r2, r1
    1114:	2a 94       	dec	r2
    1116:	21 e0       	ldi	r18, 0x01	; 1
    1118:	82 1a       	sub	r8, r18
    111a:	91 08       	sbc	r9, r1
    111c:	81 14       	cp	r8, r1
    111e:	91 04       	cpc	r9, r1
    1120:	71 f7       	brne	.-36     	; 0x10fe <vfprintf+0x1a4>
    1122:	e8 c0       	rjmp	.+464    	; 0x12f4 <vfprintf+0x39a>
    1124:	84 36       	cpi	r24, 0x64	; 100
    1126:	11 f0       	breq	.+4      	; 0x112c <vfprintf+0x1d2>
    1128:	89 36       	cpi	r24, 0x69	; 105
    112a:	41 f5       	brne	.+80     	; 0x117c <vfprintf+0x222>
    112c:	f8 01       	movw	r30, r16
    112e:	37 fe       	sbrs	r3, 7
    1130:	07 c0       	rjmp	.+14     	; 0x1140 <vfprintf+0x1e6>
    1132:	60 81       	ld	r22, Z
    1134:	71 81       	ldd	r23, Z+1	; 0x01
    1136:	82 81       	ldd	r24, Z+2	; 0x02
    1138:	93 81       	ldd	r25, Z+3	; 0x03
    113a:	0c 5f       	subi	r16, 0xFC	; 252
    113c:	1f 4f       	sbci	r17, 0xFF	; 255
    113e:	08 c0       	rjmp	.+16     	; 0x1150 <vfprintf+0x1f6>
    1140:	60 81       	ld	r22, Z
    1142:	71 81       	ldd	r23, Z+1	; 0x01
    1144:	07 2e       	mov	r0, r23
    1146:	00 0c       	add	r0, r0
    1148:	88 0b       	sbc	r24, r24
    114a:	99 0b       	sbc	r25, r25
    114c:	0e 5f       	subi	r16, 0xFE	; 254
    114e:	1f 4f       	sbci	r17, 0xFF	; 255
    1150:	f3 2d       	mov	r31, r3
    1152:	ff 76       	andi	r31, 0x6F	; 111
    1154:	3f 2e       	mov	r3, r31
    1156:	97 ff       	sbrs	r25, 7
    1158:	09 c0       	rjmp	.+18     	; 0x116c <vfprintf+0x212>
    115a:	90 95       	com	r25
    115c:	80 95       	com	r24
    115e:	70 95       	com	r23
    1160:	61 95       	neg	r22
    1162:	7f 4f       	sbci	r23, 0xFF	; 255
    1164:	8f 4f       	sbci	r24, 0xFF	; 255
    1166:	9f 4f       	sbci	r25, 0xFF	; 255
    1168:	f0 68       	ori	r31, 0x80	; 128
    116a:	3f 2e       	mov	r3, r31
    116c:	2a e0       	ldi	r18, 0x0A	; 10
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	a3 01       	movw	r20, r6
    1172:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <__ultoa_invert>
    1176:	88 2e       	mov	r8, r24
    1178:	86 18       	sub	r8, r6
    117a:	45 c0       	rjmp	.+138    	; 0x1206 <vfprintf+0x2ac>
    117c:	85 37       	cpi	r24, 0x75	; 117
    117e:	31 f4       	brne	.+12     	; 0x118c <vfprintf+0x232>
    1180:	23 2d       	mov	r18, r3
    1182:	2f 7e       	andi	r18, 0xEF	; 239
    1184:	b2 2e       	mov	r11, r18
    1186:	2a e0       	ldi	r18, 0x0A	; 10
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	25 c0       	rjmp	.+74     	; 0x11d6 <vfprintf+0x27c>
    118c:	93 2d       	mov	r25, r3
    118e:	99 7f       	andi	r25, 0xF9	; 249
    1190:	b9 2e       	mov	r11, r25
    1192:	8f 36       	cpi	r24, 0x6F	; 111
    1194:	c1 f0       	breq	.+48     	; 0x11c6 <vfprintf+0x26c>
    1196:	18 f4       	brcc	.+6      	; 0x119e <vfprintf+0x244>
    1198:	88 35       	cpi	r24, 0x58	; 88
    119a:	79 f0       	breq	.+30     	; 0x11ba <vfprintf+0x260>
    119c:	b5 c0       	rjmp	.+362    	; 0x1308 <vfprintf+0x3ae>
    119e:	80 37       	cpi	r24, 0x70	; 112
    11a0:	19 f0       	breq	.+6      	; 0x11a8 <vfprintf+0x24e>
    11a2:	88 37       	cpi	r24, 0x78	; 120
    11a4:	21 f0       	breq	.+8      	; 0x11ae <vfprintf+0x254>
    11a6:	b0 c0       	rjmp	.+352    	; 0x1308 <vfprintf+0x3ae>
    11a8:	e9 2f       	mov	r30, r25
    11aa:	e0 61       	ori	r30, 0x10	; 16
    11ac:	be 2e       	mov	r11, r30
    11ae:	b4 fe       	sbrs	r11, 4
    11b0:	0d c0       	rjmp	.+26     	; 0x11cc <vfprintf+0x272>
    11b2:	fb 2d       	mov	r31, r11
    11b4:	f4 60       	ori	r31, 0x04	; 4
    11b6:	bf 2e       	mov	r11, r31
    11b8:	09 c0       	rjmp	.+18     	; 0x11cc <vfprintf+0x272>
    11ba:	34 fe       	sbrs	r3, 4
    11bc:	0a c0       	rjmp	.+20     	; 0x11d2 <vfprintf+0x278>
    11be:	29 2f       	mov	r18, r25
    11c0:	26 60       	ori	r18, 0x06	; 6
    11c2:	b2 2e       	mov	r11, r18
    11c4:	06 c0       	rjmp	.+12     	; 0x11d2 <vfprintf+0x278>
    11c6:	28 e0       	ldi	r18, 0x08	; 8
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	05 c0       	rjmp	.+10     	; 0x11d6 <vfprintf+0x27c>
    11cc:	20 e1       	ldi	r18, 0x10	; 16
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	02 c0       	rjmp	.+4      	; 0x11d6 <vfprintf+0x27c>
    11d2:	20 e1       	ldi	r18, 0x10	; 16
    11d4:	32 e0       	ldi	r19, 0x02	; 2
    11d6:	f8 01       	movw	r30, r16
    11d8:	b7 fe       	sbrs	r11, 7
    11da:	07 c0       	rjmp	.+14     	; 0x11ea <vfprintf+0x290>
    11dc:	60 81       	ld	r22, Z
    11de:	71 81       	ldd	r23, Z+1	; 0x01
    11e0:	82 81       	ldd	r24, Z+2	; 0x02
    11e2:	93 81       	ldd	r25, Z+3	; 0x03
    11e4:	0c 5f       	subi	r16, 0xFC	; 252
    11e6:	1f 4f       	sbci	r17, 0xFF	; 255
    11e8:	06 c0       	rjmp	.+12     	; 0x11f6 <vfprintf+0x29c>
    11ea:	60 81       	ld	r22, Z
    11ec:	71 81       	ldd	r23, Z+1	; 0x01
    11ee:	80 e0       	ldi	r24, 0x00	; 0
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	0e 5f       	subi	r16, 0xFE	; 254
    11f4:	1f 4f       	sbci	r17, 0xFF	; 255
    11f6:	a3 01       	movw	r20, r6
    11f8:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <__ultoa_invert>
    11fc:	88 2e       	mov	r8, r24
    11fe:	86 18       	sub	r8, r6
    1200:	fb 2d       	mov	r31, r11
    1202:	ff 77       	andi	r31, 0x7F	; 127
    1204:	3f 2e       	mov	r3, r31
    1206:	36 fe       	sbrs	r3, 6
    1208:	0d c0       	rjmp	.+26     	; 0x1224 <vfprintf+0x2ca>
    120a:	23 2d       	mov	r18, r3
    120c:	2e 7f       	andi	r18, 0xFE	; 254
    120e:	a2 2e       	mov	r10, r18
    1210:	89 14       	cp	r8, r9
    1212:	58 f4       	brcc	.+22     	; 0x122a <vfprintf+0x2d0>
    1214:	34 fe       	sbrs	r3, 4
    1216:	0b c0       	rjmp	.+22     	; 0x122e <vfprintf+0x2d4>
    1218:	32 fc       	sbrc	r3, 2
    121a:	09 c0       	rjmp	.+18     	; 0x122e <vfprintf+0x2d4>
    121c:	83 2d       	mov	r24, r3
    121e:	8e 7e       	andi	r24, 0xEE	; 238
    1220:	a8 2e       	mov	r10, r24
    1222:	05 c0       	rjmp	.+10     	; 0x122e <vfprintf+0x2d4>
    1224:	b8 2c       	mov	r11, r8
    1226:	a3 2c       	mov	r10, r3
    1228:	03 c0       	rjmp	.+6      	; 0x1230 <vfprintf+0x2d6>
    122a:	b8 2c       	mov	r11, r8
    122c:	01 c0       	rjmp	.+2      	; 0x1230 <vfprintf+0x2d6>
    122e:	b9 2c       	mov	r11, r9
    1230:	a4 fe       	sbrs	r10, 4
    1232:	0f c0       	rjmp	.+30     	; 0x1252 <vfprintf+0x2f8>
    1234:	fe 01       	movw	r30, r28
    1236:	e8 0d       	add	r30, r8
    1238:	f1 1d       	adc	r31, r1
    123a:	80 81       	ld	r24, Z
    123c:	80 33       	cpi	r24, 0x30	; 48
    123e:	21 f4       	brne	.+8      	; 0x1248 <vfprintf+0x2ee>
    1240:	9a 2d       	mov	r25, r10
    1242:	99 7e       	andi	r25, 0xE9	; 233
    1244:	a9 2e       	mov	r10, r25
    1246:	09 c0       	rjmp	.+18     	; 0x125a <vfprintf+0x300>
    1248:	a2 fe       	sbrs	r10, 2
    124a:	06 c0       	rjmp	.+12     	; 0x1258 <vfprintf+0x2fe>
    124c:	b3 94       	inc	r11
    124e:	b3 94       	inc	r11
    1250:	04 c0       	rjmp	.+8      	; 0x125a <vfprintf+0x300>
    1252:	8a 2d       	mov	r24, r10
    1254:	86 78       	andi	r24, 0x86	; 134
    1256:	09 f0       	breq	.+2      	; 0x125a <vfprintf+0x300>
    1258:	b3 94       	inc	r11
    125a:	a3 fc       	sbrc	r10, 3
    125c:	11 c0       	rjmp	.+34     	; 0x1280 <vfprintf+0x326>
    125e:	a0 fe       	sbrs	r10, 0
    1260:	06 c0       	rjmp	.+12     	; 0x126e <vfprintf+0x314>
    1262:	b2 14       	cp	r11, r2
    1264:	88 f4       	brcc	.+34     	; 0x1288 <vfprintf+0x32e>
    1266:	28 0c       	add	r2, r8
    1268:	92 2c       	mov	r9, r2
    126a:	9b 18       	sub	r9, r11
    126c:	0e c0       	rjmp	.+28     	; 0x128a <vfprintf+0x330>
    126e:	b2 14       	cp	r11, r2
    1270:	60 f4       	brcc	.+24     	; 0x128a <vfprintf+0x330>
    1272:	b6 01       	movw	r22, r12
    1274:	80 e2       	ldi	r24, 0x20	; 32
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	0e 94 a7 09 	call	0x134e	; 0x134e <fputc>
    127c:	b3 94       	inc	r11
    127e:	f7 cf       	rjmp	.-18     	; 0x126e <vfprintf+0x314>
    1280:	b2 14       	cp	r11, r2
    1282:	18 f4       	brcc	.+6      	; 0x128a <vfprintf+0x330>
    1284:	2b 18       	sub	r2, r11
    1286:	02 c0       	rjmp	.+4      	; 0x128c <vfprintf+0x332>
    1288:	98 2c       	mov	r9, r8
    128a:	21 2c       	mov	r2, r1
    128c:	a4 fe       	sbrs	r10, 4
    128e:	10 c0       	rjmp	.+32     	; 0x12b0 <vfprintf+0x356>
    1290:	b6 01       	movw	r22, r12
    1292:	80 e3       	ldi	r24, 0x30	; 48
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	0e 94 a7 09 	call	0x134e	; 0x134e <fputc>
    129a:	a2 fe       	sbrs	r10, 2
    129c:	17 c0       	rjmp	.+46     	; 0x12cc <vfprintf+0x372>
    129e:	a1 fc       	sbrc	r10, 1
    12a0:	03 c0       	rjmp	.+6      	; 0x12a8 <vfprintf+0x34e>
    12a2:	88 e7       	ldi	r24, 0x78	; 120
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	02 c0       	rjmp	.+4      	; 0x12ac <vfprintf+0x352>
    12a8:	88 e5       	ldi	r24, 0x58	; 88
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	b6 01       	movw	r22, r12
    12ae:	0c c0       	rjmp	.+24     	; 0x12c8 <vfprintf+0x36e>
    12b0:	8a 2d       	mov	r24, r10
    12b2:	86 78       	andi	r24, 0x86	; 134
    12b4:	59 f0       	breq	.+22     	; 0x12cc <vfprintf+0x372>
    12b6:	a1 fe       	sbrs	r10, 1
    12b8:	02 c0       	rjmp	.+4      	; 0x12be <vfprintf+0x364>
    12ba:	8b e2       	ldi	r24, 0x2B	; 43
    12bc:	01 c0       	rjmp	.+2      	; 0x12c0 <vfprintf+0x366>
    12be:	80 e2       	ldi	r24, 0x20	; 32
    12c0:	a7 fc       	sbrc	r10, 7
    12c2:	8d e2       	ldi	r24, 0x2D	; 45
    12c4:	b6 01       	movw	r22, r12
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	0e 94 a7 09 	call	0x134e	; 0x134e <fputc>
    12cc:	89 14       	cp	r8, r9
    12ce:	38 f4       	brcc	.+14     	; 0x12de <vfprintf+0x384>
    12d0:	b6 01       	movw	r22, r12
    12d2:	80 e3       	ldi	r24, 0x30	; 48
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	0e 94 a7 09 	call	0x134e	; 0x134e <fputc>
    12da:	9a 94       	dec	r9
    12dc:	f7 cf       	rjmp	.-18     	; 0x12cc <vfprintf+0x372>
    12de:	8a 94       	dec	r8
    12e0:	f3 01       	movw	r30, r6
    12e2:	e8 0d       	add	r30, r8
    12e4:	f1 1d       	adc	r31, r1
    12e6:	80 81       	ld	r24, Z
    12e8:	b6 01       	movw	r22, r12
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	0e 94 a7 09 	call	0x134e	; 0x134e <fputc>
    12f0:	81 10       	cpse	r8, r1
    12f2:	f5 cf       	rjmp	.-22     	; 0x12de <vfprintf+0x384>
    12f4:	22 20       	and	r2, r2
    12f6:	09 f4       	brne	.+2      	; 0x12fa <vfprintf+0x3a0>
    12f8:	42 ce       	rjmp	.-892    	; 0xf7e <vfprintf+0x24>
    12fa:	b6 01       	movw	r22, r12
    12fc:	80 e2       	ldi	r24, 0x20	; 32
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	0e 94 a7 09 	call	0x134e	; 0x134e <fputc>
    1304:	2a 94       	dec	r2
    1306:	f6 cf       	rjmp	.-20     	; 0x12f4 <vfprintf+0x39a>
    1308:	f6 01       	movw	r30, r12
    130a:	86 81       	ldd	r24, Z+6	; 0x06
    130c:	97 81       	ldd	r25, Z+7	; 0x07
    130e:	02 c0       	rjmp	.+4      	; 0x1314 <vfprintf+0x3ba>
    1310:	8f ef       	ldi	r24, 0xFF	; 255
    1312:	9f ef       	ldi	r25, 0xFF	; 255
    1314:	2b 96       	adiw	r28, 0x0b	; 11
    1316:	e2 e1       	ldi	r30, 0x12	; 18
    1318:	0c 94 9a 0a 	jmp	0x1534	; 0x1534 <__epilogue_restores__>

0000131c <__ctype_isfalse>:
    131c:	99 27       	eor	r25, r25
    131e:	88 27       	eor	r24, r24

00001320 <__ctype_istrue>:
    1320:	08 95       	ret

00001322 <strnlen_P>:
    1322:	fc 01       	movw	r30, r24
    1324:	05 90       	lpm	r0, Z+
    1326:	61 50       	subi	r22, 0x01	; 1
    1328:	70 40       	sbci	r23, 0x00	; 0
    132a:	01 10       	cpse	r0, r1
    132c:	d8 f7       	brcc	.-10     	; 0x1324 <strnlen_P+0x2>
    132e:	80 95       	com	r24
    1330:	90 95       	com	r25
    1332:	8e 0f       	add	r24, r30
    1334:	9f 1f       	adc	r25, r31
    1336:	08 95       	ret

00001338 <strnlen>:
    1338:	fc 01       	movw	r30, r24
    133a:	61 50       	subi	r22, 0x01	; 1
    133c:	70 40       	sbci	r23, 0x00	; 0
    133e:	01 90       	ld	r0, Z+
    1340:	01 10       	cpse	r0, r1
    1342:	d8 f7       	brcc	.-10     	; 0x133a <strnlen+0x2>
    1344:	80 95       	com	r24
    1346:	90 95       	com	r25
    1348:	8e 0f       	add	r24, r30
    134a:	9f 1f       	adc	r25, r31
    134c:	08 95       	ret

0000134e <fputc>:
    134e:	0f 93       	push	r16
    1350:	1f 93       	push	r17
    1352:	cf 93       	push	r28
    1354:	df 93       	push	r29
    1356:	fb 01       	movw	r30, r22
    1358:	23 81       	ldd	r18, Z+3	; 0x03
    135a:	21 fd       	sbrc	r18, 1
    135c:	03 c0       	rjmp	.+6      	; 0x1364 <fputc+0x16>
    135e:	8f ef       	ldi	r24, 0xFF	; 255
    1360:	9f ef       	ldi	r25, 0xFF	; 255
    1362:	2c c0       	rjmp	.+88     	; 0x13bc <fputc+0x6e>
    1364:	22 ff       	sbrs	r18, 2
    1366:	16 c0       	rjmp	.+44     	; 0x1394 <fputc+0x46>
    1368:	46 81       	ldd	r20, Z+6	; 0x06
    136a:	57 81       	ldd	r21, Z+7	; 0x07
    136c:	24 81       	ldd	r18, Z+4	; 0x04
    136e:	35 81       	ldd	r19, Z+5	; 0x05
    1370:	42 17       	cp	r20, r18
    1372:	53 07       	cpc	r21, r19
    1374:	44 f4       	brge	.+16     	; 0x1386 <fputc+0x38>
    1376:	a0 81       	ld	r26, Z
    1378:	b1 81       	ldd	r27, Z+1	; 0x01
    137a:	9d 01       	movw	r18, r26
    137c:	2f 5f       	subi	r18, 0xFF	; 255
    137e:	3f 4f       	sbci	r19, 0xFF	; 255
    1380:	31 83       	std	Z+1, r19	; 0x01
    1382:	20 83       	st	Z, r18
    1384:	8c 93       	st	X, r24
    1386:	26 81       	ldd	r18, Z+6	; 0x06
    1388:	37 81       	ldd	r19, Z+7	; 0x07
    138a:	2f 5f       	subi	r18, 0xFF	; 255
    138c:	3f 4f       	sbci	r19, 0xFF	; 255
    138e:	37 83       	std	Z+7, r19	; 0x07
    1390:	26 83       	std	Z+6, r18	; 0x06
    1392:	14 c0       	rjmp	.+40     	; 0x13bc <fputc+0x6e>
    1394:	8b 01       	movw	r16, r22
    1396:	ec 01       	movw	r28, r24
    1398:	fb 01       	movw	r30, r22
    139a:	00 84       	ldd	r0, Z+8	; 0x08
    139c:	f1 85       	ldd	r31, Z+9	; 0x09
    139e:	e0 2d       	mov	r30, r0
    13a0:	09 95       	icall
    13a2:	89 2b       	or	r24, r25
    13a4:	e1 f6       	brne	.-72     	; 0x135e <fputc+0x10>
    13a6:	d8 01       	movw	r26, r16
    13a8:	16 96       	adiw	r26, 0x06	; 6
    13aa:	8d 91       	ld	r24, X+
    13ac:	9c 91       	ld	r25, X
    13ae:	17 97       	sbiw	r26, 0x07	; 7
    13b0:	01 96       	adiw	r24, 0x01	; 1
    13b2:	17 96       	adiw	r26, 0x07	; 7
    13b4:	9c 93       	st	X, r25
    13b6:	8e 93       	st	-X, r24
    13b8:	16 97       	sbiw	r26, 0x06	; 6
    13ba:	ce 01       	movw	r24, r28
    13bc:	df 91       	pop	r29
    13be:	cf 91       	pop	r28
    13c0:	1f 91       	pop	r17
    13c2:	0f 91       	pop	r16
    13c4:	08 95       	ret

000013c6 <__ultoa_invert>:
    13c6:	fa 01       	movw	r30, r20
    13c8:	aa 27       	eor	r26, r26
    13ca:	28 30       	cpi	r18, 0x08	; 8
    13cc:	51 f1       	breq	.+84     	; 0x1422 <__ultoa_invert+0x5c>
    13ce:	20 31       	cpi	r18, 0x10	; 16
    13d0:	81 f1       	breq	.+96     	; 0x1432 <__ultoa_invert+0x6c>
    13d2:	e8 94       	clt
    13d4:	6f 93       	push	r22
    13d6:	6e 7f       	andi	r22, 0xFE	; 254
    13d8:	6e 5f       	subi	r22, 0xFE	; 254
    13da:	7f 4f       	sbci	r23, 0xFF	; 255
    13dc:	8f 4f       	sbci	r24, 0xFF	; 255
    13de:	9f 4f       	sbci	r25, 0xFF	; 255
    13e0:	af 4f       	sbci	r26, 0xFF	; 255
    13e2:	b1 e0       	ldi	r27, 0x01	; 1
    13e4:	3e d0       	rcall	.+124    	; 0x1462 <__ultoa_invert+0x9c>
    13e6:	b4 e0       	ldi	r27, 0x04	; 4
    13e8:	3c d0       	rcall	.+120    	; 0x1462 <__ultoa_invert+0x9c>
    13ea:	67 0f       	add	r22, r23
    13ec:	78 1f       	adc	r23, r24
    13ee:	89 1f       	adc	r24, r25
    13f0:	9a 1f       	adc	r25, r26
    13f2:	a1 1d       	adc	r26, r1
    13f4:	68 0f       	add	r22, r24
    13f6:	79 1f       	adc	r23, r25
    13f8:	8a 1f       	adc	r24, r26
    13fa:	91 1d       	adc	r25, r1
    13fc:	a1 1d       	adc	r26, r1
    13fe:	6a 0f       	add	r22, r26
    1400:	71 1d       	adc	r23, r1
    1402:	81 1d       	adc	r24, r1
    1404:	91 1d       	adc	r25, r1
    1406:	a1 1d       	adc	r26, r1
    1408:	20 d0       	rcall	.+64     	; 0x144a <__ultoa_invert+0x84>
    140a:	09 f4       	brne	.+2      	; 0x140e <__ultoa_invert+0x48>
    140c:	68 94       	set
    140e:	3f 91       	pop	r19
    1410:	2a e0       	ldi	r18, 0x0A	; 10
    1412:	26 9f       	mul	r18, r22
    1414:	11 24       	eor	r1, r1
    1416:	30 19       	sub	r19, r0
    1418:	30 5d       	subi	r19, 0xD0	; 208
    141a:	31 93       	st	Z+, r19
    141c:	de f6       	brtc	.-74     	; 0x13d4 <__ultoa_invert+0xe>
    141e:	cf 01       	movw	r24, r30
    1420:	08 95       	ret
    1422:	46 2f       	mov	r20, r22
    1424:	47 70       	andi	r20, 0x07	; 7
    1426:	40 5d       	subi	r20, 0xD0	; 208
    1428:	41 93       	st	Z+, r20
    142a:	b3 e0       	ldi	r27, 0x03	; 3
    142c:	0f d0       	rcall	.+30     	; 0x144c <__ultoa_invert+0x86>
    142e:	c9 f7       	brne	.-14     	; 0x1422 <__ultoa_invert+0x5c>
    1430:	f6 cf       	rjmp	.-20     	; 0x141e <__ultoa_invert+0x58>
    1432:	46 2f       	mov	r20, r22
    1434:	4f 70       	andi	r20, 0x0F	; 15
    1436:	40 5d       	subi	r20, 0xD0	; 208
    1438:	4a 33       	cpi	r20, 0x3A	; 58
    143a:	18 f0       	brcs	.+6      	; 0x1442 <__ultoa_invert+0x7c>
    143c:	49 5d       	subi	r20, 0xD9	; 217
    143e:	31 fd       	sbrc	r19, 1
    1440:	40 52       	subi	r20, 0x20	; 32
    1442:	41 93       	st	Z+, r20
    1444:	02 d0       	rcall	.+4      	; 0x144a <__ultoa_invert+0x84>
    1446:	a9 f7       	brne	.-22     	; 0x1432 <__ultoa_invert+0x6c>
    1448:	ea cf       	rjmp	.-44     	; 0x141e <__ultoa_invert+0x58>
    144a:	b4 e0       	ldi	r27, 0x04	; 4
    144c:	a6 95       	lsr	r26
    144e:	97 95       	ror	r25
    1450:	87 95       	ror	r24
    1452:	77 95       	ror	r23
    1454:	67 95       	ror	r22
    1456:	ba 95       	dec	r27
    1458:	c9 f7       	brne	.-14     	; 0x144c <__ultoa_invert+0x86>
    145a:	00 97       	sbiw	r24, 0x00	; 0
    145c:	61 05       	cpc	r22, r1
    145e:	71 05       	cpc	r23, r1
    1460:	08 95       	ret
    1462:	9b 01       	movw	r18, r22
    1464:	ac 01       	movw	r20, r24
    1466:	0a 2e       	mov	r0, r26
    1468:	06 94       	lsr	r0
    146a:	57 95       	ror	r21
    146c:	47 95       	ror	r20
    146e:	37 95       	ror	r19
    1470:	27 95       	ror	r18
    1472:	ba 95       	dec	r27
    1474:	c9 f7       	brne	.-14     	; 0x1468 <__ultoa_invert+0xa2>
    1476:	62 0f       	add	r22, r18
    1478:	73 1f       	adc	r23, r19
    147a:	84 1f       	adc	r24, r20
    147c:	95 1f       	adc	r25, r21
    147e:	a0 1d       	adc	r26, r0
    1480:	08 95       	ret

00001482 <__mulsi3>:
    1482:	db 01       	movw	r26, r22
    1484:	8f 93       	push	r24
    1486:	9f 93       	push	r25
    1488:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <__muluhisi3>
    148c:	bf 91       	pop	r27
    148e:	af 91       	pop	r26
    1490:	a2 9f       	mul	r26, r18
    1492:	80 0d       	add	r24, r0
    1494:	91 1d       	adc	r25, r1
    1496:	a3 9f       	mul	r26, r19
    1498:	90 0d       	add	r25, r0
    149a:	b2 9f       	mul	r27, r18
    149c:	90 0d       	add	r25, r0
    149e:	11 24       	eor	r1, r1
    14a0:	08 95       	ret

000014a2 <__udivmodsi4>:
    14a2:	a1 e2       	ldi	r26, 0x21	; 33
    14a4:	1a 2e       	mov	r1, r26
    14a6:	aa 1b       	sub	r26, r26
    14a8:	bb 1b       	sub	r27, r27
    14aa:	fd 01       	movw	r30, r26
    14ac:	0d c0       	rjmp	.+26     	; 0x14c8 <__udivmodsi4_ep>

000014ae <__udivmodsi4_loop>:
    14ae:	aa 1f       	adc	r26, r26
    14b0:	bb 1f       	adc	r27, r27
    14b2:	ee 1f       	adc	r30, r30
    14b4:	ff 1f       	adc	r31, r31
    14b6:	a2 17       	cp	r26, r18
    14b8:	b3 07       	cpc	r27, r19
    14ba:	e4 07       	cpc	r30, r20
    14bc:	f5 07       	cpc	r31, r21
    14be:	20 f0       	brcs	.+8      	; 0x14c8 <__udivmodsi4_ep>
    14c0:	a2 1b       	sub	r26, r18
    14c2:	b3 0b       	sbc	r27, r19
    14c4:	e4 0b       	sbc	r30, r20
    14c6:	f5 0b       	sbc	r31, r21

000014c8 <__udivmodsi4_ep>:
    14c8:	66 1f       	adc	r22, r22
    14ca:	77 1f       	adc	r23, r23
    14cc:	88 1f       	adc	r24, r24
    14ce:	99 1f       	adc	r25, r25
    14d0:	1a 94       	dec	r1
    14d2:	69 f7       	brne	.-38     	; 0x14ae <__udivmodsi4_loop>
    14d4:	60 95       	com	r22
    14d6:	70 95       	com	r23
    14d8:	80 95       	com	r24
    14da:	90 95       	com	r25
    14dc:	9b 01       	movw	r18, r22
    14de:	ac 01       	movw	r20, r24
    14e0:	bd 01       	movw	r22, r26
    14e2:	cf 01       	movw	r24, r30
    14e4:	08 95       	ret

000014e6 <__muluhisi3>:
    14e6:	0e 94 b5 0a 	call	0x156a	; 0x156a <__umulhisi3>
    14ea:	a5 9f       	mul	r26, r21
    14ec:	90 0d       	add	r25, r0
    14ee:	b4 9f       	mul	r27, r20
    14f0:	90 0d       	add	r25, r0
    14f2:	a4 9f       	mul	r26, r20
    14f4:	80 0d       	add	r24, r0
    14f6:	91 1d       	adc	r25, r1
    14f8:	11 24       	eor	r1, r1
    14fa:	08 95       	ret

000014fc <__prologue_saves__>:
    14fc:	2f 92       	push	r2
    14fe:	3f 92       	push	r3
    1500:	4f 92       	push	r4
    1502:	5f 92       	push	r5
    1504:	6f 92       	push	r6
    1506:	7f 92       	push	r7
    1508:	8f 92       	push	r8
    150a:	9f 92       	push	r9
    150c:	af 92       	push	r10
    150e:	bf 92       	push	r11
    1510:	cf 92       	push	r12
    1512:	df 92       	push	r13
    1514:	ef 92       	push	r14
    1516:	ff 92       	push	r15
    1518:	0f 93       	push	r16
    151a:	1f 93       	push	r17
    151c:	cf 93       	push	r28
    151e:	df 93       	push	r29
    1520:	cd b7       	in	r28, 0x3d	; 61
    1522:	de b7       	in	r29, 0x3e	; 62
    1524:	ca 1b       	sub	r28, r26
    1526:	db 0b       	sbc	r29, r27
    1528:	0f b6       	in	r0, 0x3f	; 63
    152a:	f8 94       	cli
    152c:	de bf       	out	0x3e, r29	; 62
    152e:	0f be       	out	0x3f, r0	; 63
    1530:	cd bf       	out	0x3d, r28	; 61
    1532:	09 94       	ijmp

00001534 <__epilogue_restores__>:
    1534:	2a 88       	ldd	r2, Y+18	; 0x12
    1536:	39 88       	ldd	r3, Y+17	; 0x11
    1538:	48 88       	ldd	r4, Y+16	; 0x10
    153a:	5f 84       	ldd	r5, Y+15	; 0x0f
    153c:	6e 84       	ldd	r6, Y+14	; 0x0e
    153e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1540:	8c 84       	ldd	r8, Y+12	; 0x0c
    1542:	9b 84       	ldd	r9, Y+11	; 0x0b
    1544:	aa 84       	ldd	r10, Y+10	; 0x0a
    1546:	b9 84       	ldd	r11, Y+9	; 0x09
    1548:	c8 84       	ldd	r12, Y+8	; 0x08
    154a:	df 80       	ldd	r13, Y+7	; 0x07
    154c:	ee 80       	ldd	r14, Y+6	; 0x06
    154e:	fd 80       	ldd	r15, Y+5	; 0x05
    1550:	0c 81       	ldd	r16, Y+4	; 0x04
    1552:	1b 81       	ldd	r17, Y+3	; 0x03
    1554:	aa 81       	ldd	r26, Y+2	; 0x02
    1556:	b9 81       	ldd	r27, Y+1	; 0x01
    1558:	ce 0f       	add	r28, r30
    155a:	d1 1d       	adc	r29, r1
    155c:	0f b6       	in	r0, 0x3f	; 63
    155e:	f8 94       	cli
    1560:	de bf       	out	0x3e, r29	; 62
    1562:	0f be       	out	0x3f, r0	; 63
    1564:	cd bf       	out	0x3d, r28	; 61
    1566:	ed 01       	movw	r28, r26
    1568:	08 95       	ret

0000156a <__umulhisi3>:
    156a:	a2 9f       	mul	r26, r18
    156c:	b0 01       	movw	r22, r0
    156e:	b3 9f       	mul	r27, r19
    1570:	c0 01       	movw	r24, r0
    1572:	a3 9f       	mul	r26, r19
    1574:	70 0d       	add	r23, r0
    1576:	81 1d       	adc	r24, r1
    1578:	11 24       	eor	r1, r1
    157a:	91 1d       	adc	r25, r1
    157c:	b2 9f       	mul	r27, r18
    157e:	70 0d       	add	r23, r0
    1580:	81 1d       	adc	r24, r1
    1582:	11 24       	eor	r1, r1
    1584:	91 1d       	adc	r25, r1
    1586:	08 95       	ret

00001588 <_exit>:
    1588:	f8 94       	cli

0000158a <__stop_program>:
    158a:	ff cf       	rjmp	.-2      	; 0x158a <__stop_program>
