
ATMega328BP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000234  00800100  0000082c  000008c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000082c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000f  00800334  00800334  00000af4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000af4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b50  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000b90  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001511  00000000  00000000  00000c50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ca7  00000000  00000000  00002161  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000079a  00000000  00000000  00002e08  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000230  00000000  00000000  000035a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006d0  00000000  00000000  000037d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005b6  00000000  00000000  00003ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  0000445a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__vector_28>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	13 e0       	ldi	r17, 0x03	; 3
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ec e2       	ldi	r30, 0x2C	; 44
  c8:	f8 e0       	ldi	r31, 0x08	; 8
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a4 33       	cpi	r26, 0x34	; 52
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	23 e0       	ldi	r18, 0x03	; 3
  d8:	a4 e3       	ldi	r26, 0x34	; 52
  da:	b3 e0       	ldi	r27, 0x03	; 3
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a3 34       	cpi	r26, 0x43	; 67
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 79 00 	call	0xf2	; 0xf2 <main>
  ea:	0c 94 14 04 	jmp	0x828	; 0x828 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <main>:
	UART_PrintHex(ucsr1a_value);
	UART_PrintString("\n");
}

int main(void) {
	RS232Init();
  f2:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <RS232Init>
	Enable_UART_Receive_Interrupt();
  f6:	0e 94 04 02 	call	0x408	; 0x408 <Enable_UART_Receive_Interrupt>
	sei();  // Enable global interrupts
  fa:	78 94       	sei
  fc:	ff cf       	rjmp	.-2      	; 0xfc <main+0xa>

000000fe <__vector_28>:
	}

	return 0;
}

ISR(USART1_RX_vect) {
  fe:	1f 92       	push	r1
 100:	0f 92       	push	r0
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	0f 92       	push	r0
 106:	11 24       	eor	r1, r1
 108:	2f 93       	push	r18
 10a:	3f 93       	push	r19
 10c:	4f 93       	push	r20
 10e:	5f 93       	push	r21
 110:	6f 93       	push	r22
 112:	7f 93       	push	r23
 114:	8f 93       	push	r24
 116:	9f 93       	push	r25
 118:	af 93       	push	r26
 11a:	bf 93       	push	r27
 11c:	ef 93       	push	r30
 11e:	ff 93       	push	r31
	if (UCSR1A & ((1 << FE1) | (1 << DOR1))) {
 120:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
 124:	88 71       	andi	r24, 0x18	; 24
 126:	c9 f0       	breq	.+50     	; 0x15a <__vector_28+0x5c>
		UART_PrintString("UART Error: ");
 128:	8b e2       	ldi	r24, 0x2B	; 43
 12a:	91 e0       	ldi	r25, 0x01	; 1
 12c:	0e 94 0a 02 	call	0x414	; 0x414 <UART_PrintString>
		if (UCSR1A & (1 << FE1)) {
 130:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
 134:	84 ff       	sbrs	r24, 4
 136:	04 c0       	rjmp	.+8      	; 0x140 <__vector_28+0x42>
			UART_PrintString("Framing Error ");
 138:	88 e3       	ldi	r24, 0x38	; 56
 13a:	91 e0       	ldi	r25, 0x01	; 1
 13c:	0e 94 0a 02 	call	0x414	; 0x414 <UART_PrintString>
		}
		if (UCSR1A & (1 << DOR1)) {
 140:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
 144:	83 ff       	sbrs	r24, 3
 146:	04 c0       	rjmp	.+8      	; 0x150 <__vector_28+0x52>
			UART_PrintString("Data Overrun ");
 148:	87 e4       	ldi	r24, 0x47	; 71
 14a:	91 e0       	ldi	r25, 0x01	; 1
 14c:	0e 94 0a 02 	call	0x414	; 0x414 <UART_PrintString>
		}
		UART_PrintString("\n");
 150:	81 e7       	ldi	r24, 0x71	; 113
 152:	92 e0       	ldi	r25, 0x02	; 2
 154:	0e 94 0a 02 	call	0x414	; 0x414 <UART_PrintString>
 158:	08 c0       	rjmp	.+16     	; 0x16a <__vector_28+0x6c>
		} else {
		char receivedByte = UDR1;
 15a:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
		handle_state_machine(&currentState, receivedByte, &address);
 15e:	44 e3       	ldi	r20, 0x34	; 52
 160:	53 e0       	ldi	r21, 0x03	; 3
 162:	85 e3       	ldi	r24, 0x35	; 53
 164:	93 e0       	ldi	r25, 0x03	; 3
 166:	0e 94 c6 00 	call	0x18c	; 0x18c <handle_state_machine>
	}
}
 16a:	ff 91       	pop	r31
 16c:	ef 91       	pop	r30
 16e:	bf 91       	pop	r27
 170:	af 91       	pop	r26
 172:	9f 91       	pop	r25
 174:	8f 91       	pop	r24
 176:	7f 91       	pop	r23
 178:	6f 91       	pop	r22
 17a:	5f 91       	pop	r21
 17c:	4f 91       	pop	r20
 17e:	3f 91       	pop	r19
 180:	2f 91       	pop	r18
 182:	0f 90       	pop	r0
 184:	0f be       	out	0x3f, r0	; 63
 186:	0f 90       	pop	r0
 188:	1f 90       	pop	r1
 18a:	18 95       	reti

0000018c <handle_state_machine>:
	Modtag_Adresse,
	Modtag_Bit_Position_I_Adresse,
	Modtag_Bit_Position_Vaerdi
} State;

void handle_state_machine(State *currentState, char recivedChar, uint8_t *address) {
 18c:	ef 92       	push	r14
 18e:	ff 92       	push	r15
 190:	0f 93       	push	r16
 192:	1f 93       	push	r17
 194:	cf 93       	push	r28
 196:	df 93       	push	r29
 198:	8c 01       	movw	r16, r24
 19a:	c6 2f       	mov	r28, r22
 19c:	7a 01       	movw	r14, r20
	static char hexBuffer[3] = {0};  // Buffer for two hex characters and null terminator
	static uint8_t hexIndex = 0;
	static uint8_t bitPosition = 0;

	UART_PrintString("Received Char: ");
 19e:	85 e5       	ldi	r24, 0x55	; 85
 1a0:	91 e0       	ldi	r25, 0x01	; 1
 1a2:	0e 94 0a 02 	call	0x414	; 0x414 <UART_PrintString>
	UART_PrintHex((uint8_t)recivedChar);
 1a6:	8c 2f       	mov	r24, r28
 1a8:	0e 94 1e 02 	call	0x43c	; 0x43c <UART_PrintHex>
	UART_PrintString("\n");
 1ac:	81 e7       	ldi	r24, 0x71	; 113
 1ae:	92 e0       	ldi	r25, 0x02	; 2
 1b0:	0e 94 0a 02 	call	0x414	; 0x414 <UART_PrintString>

	UART_PrintString("Current State: ");
 1b4:	85 e6       	ldi	r24, 0x65	; 101
 1b6:	91 e0       	ldi	r25, 0x01	; 1
 1b8:	0e 94 0a 02 	call	0x414	; 0x414 <UART_PrintString>
	switch (*currentState) {
 1bc:	f8 01       	movw	r30, r16
 1be:	80 81       	ld	r24, Z
 1c0:	81 30       	cpi	r24, 0x01	; 1
 1c2:	49 f0       	breq	.+18     	; 0x1d6 <handle_state_machine+0x4a>
 1c4:	18 f0       	brcs	.+6      	; 0x1cc <handle_state_machine+0x40>
 1c6:	82 30       	cpi	r24, 0x02	; 2
 1c8:	59 f0       	breq	.+22     	; 0x1e0 <handle_state_machine+0x54>
 1ca:	0f c0       	rjmp	.+30     	; 0x1ea <handle_state_machine+0x5e>
		case Modtag_Adresse:
		UART_PrintString("Modtag_Adresse\n");
 1cc:	85 e7       	ldi	r24, 0x75	; 117
 1ce:	91 e0       	ldi	r25, 0x01	; 1
 1d0:	0e 94 0a 02 	call	0x414	; 0x414 <UART_PrintString>
		break;
 1d4:	0e c0       	rjmp	.+28     	; 0x1f2 <handle_state_machine+0x66>
		case Modtag_Bit_Position_I_Adresse:
		UART_PrintString("Modtag_Bit_Position_I_Adresse\n");
 1d6:	86 ed       	ldi	r24, 0xD6	; 214
 1d8:	91 e0       	ldi	r25, 0x01	; 1
 1da:	0e 94 0a 02 	call	0x414	; 0x414 <UART_PrintString>
		break;
 1de:	09 c0       	rjmp	.+18     	; 0x1f2 <handle_state_machine+0x66>
		case Modtag_Bit_Position_Vaerdi:
		UART_PrintString("Modtag_Bit_Position_Vaerdi\n");
 1e0:	85 e8       	ldi	r24, 0x85	; 133
 1e2:	91 e0       	ldi	r25, 0x01	; 1
 1e4:	0e 94 0a 02 	call	0x414	; 0x414 <UART_PrintString>
		break;
 1e8:	04 c0       	rjmp	.+8      	; 0x1f2 <handle_state_machine+0x66>
		default:
		UART_PrintString("Unknown State\n");
 1ea:	81 ea       	ldi	r24, 0xA1	; 161
 1ec:	91 e0       	ldi	r25, 0x01	; 1
 1ee:	0e 94 0a 02 	call	0x414	; 0x414 <UART_PrintString>
		break;
	}

	switch (*currentState) {
 1f2:	f8 01       	movw	r30, r16
 1f4:	80 81       	ld	r24, Z
 1f6:	81 30       	cpi	r24, 0x01	; 1
 1f8:	09 f4       	brne	.+2      	; 0x1fc <handle_state_machine+0x70>
 1fa:	51 c0       	rjmp	.+162    	; 0x29e <handle_state_machine+0x112>
 1fc:	20 f0       	brcs	.+8      	; 0x206 <handle_state_machine+0x7a>
 1fe:	82 30       	cpi	r24, 0x02	; 2
 200:	09 f4       	brne	.+2      	; 0x204 <handle_state_machine+0x78>
 202:	69 c0       	rjmp	.+210    	; 0x2d6 <handle_state_machine+0x14a>
 204:	cd c0       	rjmp	.+410    	; 0x3a0 <handle_state_machine+0x214>
		case Modtag_Adresse:
			if (recivedChar == ':') {
 206:	ca 33       	cpi	r28, 0x3A	; 58
 208:	11 f5       	brne	.+68     	; 0x24e <handle_state_machine+0xc2>
					// Convert the buffer to the address and print it
					*address = (uint8_t)strtol(hexBuffer, NULL, 16);
 20a:	40 e1       	ldi	r20, 0x10	; 16
 20c:	50 e0       	ldi	r21, 0x00	; 0
 20e:	60 e0       	ldi	r22, 0x00	; 0
 210:	70 e0       	ldi	r23, 0x00	; 0
 212:	88 e3       	ldi	r24, 0x38	; 56
 214:	93 e0       	ldi	r25, 0x03	; 3
 216:	0e 94 63 02 	call	0x4c6	; 0x4c6 <strtol>
 21a:	f7 01       	movw	r30, r14
 21c:	60 83       	st	Z, r22

					UART_PrintString("Received address: 0x");
 21e:	80 eb       	ldi	r24, 0xB0	; 176
 220:	91 e0       	ldi	r25, 0x01	; 1
 222:	0e 94 0a 02 	call	0x414	; 0x414 <UART_PrintString>
					UART_PrintHex(*address);
 226:	f7 01       	movw	r30, r14
 228:	80 81       	ld	r24, Z
 22a:	0e 94 1e 02 	call	0x43c	; 0x43c <UART_PrintHex>
					UART_PrintString("\n");
 22e:	81 e7       	ldi	r24, 0x71	; 113
 230:	92 e0       	ldi	r25, 0x02	; 2
 232:	0e 94 0a 02 	call	0x414	; 0x414 <UART_PrintString>

					// Reset buffer for next address
					hexIndex = 0;
 236:	10 92 37 03 	sts	0x0337, r1	; 0x800337 <hexIndex.2037>
					hexBuffer[0] = '\0';
 23a:	10 92 38 03 	sts	0x0338, r1	; 0x800338 <hexBuffer.2036>

					// Transition to the next state
					UART_PrintString("Transitioning to Modtag_Bit_Position_I_Adresse\n");
 23e:	85 ec       	ldi	r24, 0xC5	; 197
 240:	91 e0       	ldi	r25, 0x01	; 1
 242:	0e 94 0a 02 	call	0x414	; 0x414 <UART_PrintString>
					*currentState = Modtag_Bit_Position_I_Adresse;
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	f8 01       	movw	r30, r16
 24a:	80 83       	st	Z, r24
 24c:	ad c0       	rjmp	.+346    	; 0x3a8 <handle_state_machine+0x21c>
				} else if (isxdigit(recivedChar) && hexIndex < 2) { // Limiting to 2 digits only
 24e:	8c 2f       	mov	r24, r28
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	0e 94 79 03 	call	0x6f2	; 0x6f2 <isxdigit>
 256:	89 2b       	or	r24, r25
 258:	91 f0       	breq	.+36     	; 0x27e <handle_state_machine+0xf2>
 25a:	e0 91 37 03 	lds	r30, 0x0337	; 0x800337 <hexIndex.2037>
 25e:	e2 30       	cpi	r30, 0x02	; 2
 260:	70 f4       	brcc	.+28     	; 0x27e <handle_state_machine+0xf2>
					// Fill the hexBuffer with received characters
					hexBuffer[hexIndex++] = recivedChar;
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	8e 0f       	add	r24, r30
 266:	80 93 37 03 	sts	0x0337, r24	; 0x800337 <hexIndex.2037>
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	e8 5c       	subi	r30, 0xC8	; 200
 26e:	fc 4f       	sbci	r31, 0xFC	; 252
 270:	c0 83       	st	Z, r28
					hexBuffer[hexIndex] = '\0';  // Ensure null termination
 272:	e8 2f       	mov	r30, r24
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	e8 5c       	subi	r30, 0xC8	; 200
 278:	fc 4f       	sbci	r31, 0xFC	; 252
 27a:	10 82       	st	Z, r1
 27c:	95 c0       	rjmp	.+298    	; 0x3a8 <handle_state_machine+0x21c>
				} else {
					UART_PrintString("Unexpected character received: ");
 27e:	85 ef       	ldi	r24, 0xF5	; 245
 280:	91 e0       	ldi	r25, 0x01	; 1
 282:	0e 94 0a 02 	call	0x414	; 0x414 <UART_PrintString>
					UART_PrintChar(recivedChar);
 286:	8c 2f       	mov	r24, r28
 288:	0e 94 19 02 	call	0x432	; 0x432 <UART_PrintChar>
					UART_PrintString("\n");
 28c:	81 e7       	ldi	r24, 0x71	; 113
 28e:	92 e0       	ldi	r25, 0x02	; 2
 290:	0e 94 0a 02 	call	0x414	; 0x414 <UART_PrintString>

					hexIndex = 0;
 294:	10 92 37 03 	sts	0x0337, r1	; 0x800337 <hexIndex.2037>
					hexBuffer[0] = '\0';
 298:	10 92 38 03 	sts	0x0338, r1	; 0x800338 <hexBuffer.2036>
 29c:	85 c0       	rjmp	.+266    	; 0x3a8 <handle_state_machine+0x21c>
			}
		break;

		case Modtag_Bit_Position_I_Adresse:
			if (recivedChar >= '0' && recivedChar <= '7') {
 29e:	c0 53       	subi	r28, 0x30	; 48
 2a0:	c8 30       	cpi	r28, 0x08	; 8
 2a2:	90 f4       	brcc	.+36     	; 0x2c8 <handle_state_machine+0x13c>
				bitPosition = recivedChar - '0';  // Correctly convert char to int
 2a4:	c0 93 36 03 	sts	0x0336, r28	; 0x800336 <bitPosition.2038>
				UART_PrintString("Enter bit position for address: 0x");
 2a8:	85 e1       	ldi	r24, 0x15	; 21
 2aa:	92 e0       	ldi	r25, 0x02	; 2
 2ac:	0e 94 0a 02 	call	0x414	; 0x414 <UART_PrintString>
				UART_PrintHex(bitPosition);
 2b0:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <bitPosition.2038>
 2b4:	0e 94 1e 02 	call	0x43c	; 0x43c <UART_PrintHex>
				UART_PrintString("\n");
 2b8:	81 e7       	ldi	r24, 0x71	; 113
 2ba:	92 e0       	ldi	r25, 0x02	; 2
 2bc:	0e 94 0a 02 	call	0x414	; 0x414 <UART_PrintString>

				*currentState = Modtag_Bit_Position_Vaerdi;
 2c0:	82 e0       	ldi	r24, 0x02	; 2
 2c2:	f8 01       	movw	r30, r16
 2c4:	80 83       	st	Z, r24
 2c6:	70 c0       	rjmp	.+224    	; 0x3a8 <handle_state_machine+0x21c>
				} else {
				UART_PrintString("Invalid bit position, please enter a valid position (0-7)\n");
 2c8:	88 e3       	ldi	r24, 0x38	; 56
 2ca:	92 e0       	ldi	r25, 0x02	; 2
 2cc:	0e 94 0a 02 	call	0x414	; 0x414 <UART_PrintString>
				*currentState = Modtag_Adresse;
 2d0:	f8 01       	movw	r30, r16
 2d2:	10 82       	st	Z, r1
 2d4:	69 c0       	rjmp	.+210    	; 0x3a8 <handle_state_machine+0x21c>
			}
		break;
		case Modtag_Bit_Position_Vaerdi:
			if (recivedChar == '0' || recivedChar == '1') {
 2d6:	80 ed       	ldi	r24, 0xD0	; 208
 2d8:	8c 0f       	add	r24, r28
 2da:	82 30       	cpi	r24, 0x02	; 2
 2dc:	08 f0       	brcs	.+2      	; 0x2e0 <handle_state_machine+0x154>
 2de:	59 c0       	rjmp	.+178    	; 0x392 <handle_state_machine+0x206>
					uint8_t bitMask = (1 << bitPosition);
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	00 90 36 03 	lds	r0, 0x0336	; 0x800336 <bitPosition.2038>
 2e8:	02 c0       	rjmp	.+4      	; 0x2ee <handle_state_machine+0x162>
 2ea:	88 0f       	add	r24, r24
 2ec:	99 1f       	adc	r25, r25
 2ee:	0a 94       	dec	r0
 2f0:	e2 f7       	brpl	.-8      	; 0x2ea <handle_state_machine+0x15e>
					uint8_t originalValue = *address;
				
					if(recivedChar == '1'){
 2f2:	c1 33       	cpi	r28, 0x31	; 49
 2f4:	29 f4       	brne	.+10     	; 0x300 <handle_state_machine+0x174>
						*address |= bitMask;
 2f6:	f7 01       	movw	r30, r14
 2f8:	90 81       	ld	r25, Z
 2fa:	89 2b       	or	r24, r25
 2fc:	80 83       	st	Z, r24
 2fe:	05 c0       	rjmp	.+10     	; 0x30a <handle_state_machine+0x17e>
					}
					else{
						*address &= ~bitMask;
 300:	80 95       	com	r24
 302:	f7 01       	movw	r30, r14
 304:	90 81       	ld	r25, Z
 306:	89 23       	and	r24, r25
 308:	80 83       	st	Z, r24
					}
				
					UART_PrintString("Line1: Recived address: 0x");
 30a:	83 e7       	ldi	r24, 0x73	; 115
 30c:	92 e0       	ldi	r25, 0x02	; 2
 30e:	0e 94 0a 02 	call	0x414	; 0x414 <UART_PrintString>
					UART_PrintHex(*address);
 312:	f7 01       	movw	r30, r14
 314:	80 81       	ld	r24, Z
 316:	0e 94 1e 02 	call	0x43c	; 0x43c <UART_PrintHex>
					UART_PrintString("\n");
 31a:	81 e7       	ldi	r24, 0x71	; 113
 31c:	92 e0       	ldi	r25, 0x02	; 2
 31e:	0e 94 0a 02 	call	0x414	; 0x414 <UART_PrintString>
				
					UART_PrintString("Line2: Recived bit position: ");
 322:	8e e8       	ldi	r24, 0x8E	; 142
 324:	92 e0       	ldi	r25, 0x02	; 2
 326:	0e 94 0a 02 	call	0x414	; 0x414 <UART_PrintString>
					UART_PrintHex(bitPosition);
 32a:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <bitPosition.2038>
 32e:	0e 94 1e 02 	call	0x43c	; 0x43c <UART_PrintHex>
					UART_PrintString("\n");
 332:	81 e7       	ldi	r24, 0x71	; 113
 334:	92 e0       	ldi	r25, 0x02	; 2
 336:	0e 94 0a 02 	call	0x414	; 0x414 <UART_PrintString>
				
					UART_PrintString("Line3: Recieved bit value: ");
 33a:	8c ea       	ldi	r24, 0xAC	; 172
 33c:	92 e0       	ldi	r25, 0x02	; 2
 33e:	0e 94 0a 02 	call	0x414	; 0x414 <UART_PrintString>
					UART_PrintChar(recivedChar);
 342:	8c 2f       	mov	r24, r28
 344:	0e 94 19 02 	call	0x432	; 0x432 <UART_PrintChar>
					UART_PrintString("\n");
 348:	81 e7       	ldi	r24, 0x71	; 113
 34a:	92 e0       	ldi	r25, 0x02	; 2
 34c:	0e 94 0a 02 	call	0x414	; 0x414 <UART_PrintString>
				
					UART_PrintString("Line4: Bit pattern at the address: ");
 350:	88 ec       	ldi	r24, 0xC8	; 200
 352:	92 e0       	ldi	r25, 0x02	; 2
 354:	0e 94 0a 02 	call	0x414	; 0x414 <UART_PrintString>
					for(int i = 7; i >= 0; i--){
 358:	c7 e0       	ldi	r28, 0x07	; 7
 35a:	d0 e0       	ldi	r29, 0x00	; 0
 35c:	11 c0       	rjmp	.+34     	; 0x380 <handle_state_machine+0x1f4>
						UART_PrintChar(((*address & (1 << i)) ? '1' : '0'));
 35e:	f7 01       	movw	r30, r14
 360:	80 81       	ld	r24, Z
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	0c 2e       	mov	r0, r28
 366:	02 c0       	rjmp	.+4      	; 0x36c <handle_state_machine+0x1e0>
 368:	95 95       	asr	r25
 36a:	87 95       	ror	r24
 36c:	0a 94       	dec	r0
 36e:	e2 f7       	brpl	.-8      	; 0x368 <handle_state_machine+0x1dc>
 370:	80 ff       	sbrs	r24, 0
 372:	02 c0       	rjmp	.+4      	; 0x378 <handle_state_machine+0x1ec>
 374:	81 e3       	ldi	r24, 0x31	; 49
 376:	01 c0       	rjmp	.+2      	; 0x37a <handle_state_machine+0x1ee>
 378:	80 e3       	ldi	r24, 0x30	; 48
 37a:	0e 94 19 02 	call	0x432	; 0x432 <UART_PrintChar>
					UART_PrintString("Line3: Recieved bit value: ");
					UART_PrintChar(recivedChar);
					UART_PrintString("\n");
				
					UART_PrintString("Line4: Bit pattern at the address: ");
					for(int i = 7; i >= 0; i--){
 37e:	21 97       	sbiw	r28, 0x01	; 1
 380:	dd 23       	and	r29, r29
 382:	6c f7       	brge	.-38     	; 0x35e <handle_state_machine+0x1d2>
						UART_PrintChar(((*address & (1 << i)) ? '1' : '0'));
					}
					UART_PrintString("\n");
 384:	81 e7       	ldi	r24, 0x71	; 113
 386:	92 e0       	ldi	r25, 0x02	; 2
 388:	0e 94 0a 02 	call	0x414	; 0x414 <UART_PrintString>
				
					*currentState = Modtag_Adresse;
 38c:	f8 01       	movw	r30, r16
 38e:	10 82       	st	Z, r1
 390:	0b c0       	rjmp	.+22     	; 0x3a8 <handle_state_machine+0x21c>
				} 
				else {
					UART_PrintString("Invalid bit value, please enter 0 or 1\n");
 392:	8c ee       	ldi	r24, 0xEC	; 236
 394:	92 e0       	ldi	r25, 0x02	; 2
 396:	0e 94 0a 02 	call	0x414	; 0x414 <UART_PrintString>
					*currentState = Modtag_Adresse;
 39a:	f8 01       	movw	r30, r16
 39c:	10 82       	st	Z, r1
 39e:	04 c0       	rjmp	.+8      	; 0x3a8 <handle_state_machine+0x21c>
			}
		break;

		default:
		UART_PrintString("Unknown state\n");
 3a0:	84 e1       	ldi	r24, 0x14	; 20
 3a2:	93 e0       	ldi	r25, 0x03	; 3
 3a4:	0e 94 0a 02 	call	0x414	; 0x414 <UART_PrintString>
		break;
	}
}
 3a8:	df 91       	pop	r29
 3aa:	cf 91       	pop	r28
 3ac:	1f 91       	pop	r17
 3ae:	0f 91       	pop	r16
 3b0:	ff 90       	pop	r15
 3b2:	ef 90       	pop	r14
 3b4:	08 95       	ret

000003b6 <uart_getch>:
}

ISR(USART_RX_vect) {
	char ReceivedByte = UDR1;
	ReceiveNewTimeoutValue(&ReceivedByte);
}
 3b6:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
 3ba:	88 23       	and	r24, r24
 3bc:	e4 f7       	brge	.-8      	; 0x3b6 <uart_getch>
 3be:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	08 95       	ret

000003c6 <uart_putch>:
 3c6:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
 3ca:	95 ff       	sbrs	r25, 5
 3cc:	fc cf       	rjmp	.-8      	; 0x3c6 <uart_putch>
 3ce:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
 3d2:	80 e0       	ldi	r24, 0x00	; 0
 3d4:	90 e0       	ldi	r25, 0x00	; 0
 3d6:	08 95       	ret

000003d8 <RS232Init>:
 3d8:	87 e6       	ldi	r24, 0x67	; 103
 3da:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f80cc>
 3de:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f80cd>
 3e2:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
 3e6:	88 e1       	ldi	r24, 0x18	; 24
 3e8:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7f80c9>
 3ec:	86 e0       	ldi	r24, 0x06	; 6
 3ee:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7f80ca>
 3f2:	eb e3       	ldi	r30, 0x3B	; 59
 3f4:	f3 e0       	ldi	r31, 0x03	; 3
 3f6:	8e e0       	ldi	r24, 0x0E	; 14
 3f8:	91 e0       	ldi	r25, 0x01	; 1
 3fa:	93 83       	std	Z+3, r25	; 0x03
 3fc:	82 83       	std	Z+2, r24	; 0x02
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	91 e0       	ldi	r25, 0x01	; 1
 402:	91 83       	std	Z+1, r25	; 0x01
 404:	80 83       	st	Z, r24
 406:	08 95       	ret

00000408 <Enable_UART_Receive_Interrupt>:
 408:	e9 ec       	ldi	r30, 0xC9	; 201
 40a:	f0 e0       	ldi	r31, 0x00	; 0
 40c:	80 81       	ld	r24, Z
 40e:	80 68       	ori	r24, 0x80	; 128
 410:	80 83       	st	Z, r24
 412:	08 95       	ret

00000414 <UART_PrintString>:

void UART_PrintString(const char* str) {
 414:	cf 93       	push	r28
 416:	df 93       	push	r29
 418:	ec 01       	movw	r28, r24
	while (*str) {
 41a:	05 c0       	rjmp	.+10     	; 0x426 <UART_PrintString+0x12>
		uart_putch(*str++, NULL);
 41c:	21 96       	adiw	r28, 0x01	; 1
 41e:	60 e0       	ldi	r22, 0x00	; 0
 420:	70 e0       	ldi	r23, 0x00	; 0
 422:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <uart_putch>
	char ReceivedByte = UDR1;
	ReceiveNewTimeoutValue(&ReceivedByte);
}

void UART_PrintString(const char* str) {
	while (*str) {
 426:	88 81       	ld	r24, Y
 428:	81 11       	cpse	r24, r1
 42a:	f8 cf       	rjmp	.-16     	; 0x41c <UART_PrintString+0x8>
		uart_putch(*str++, NULL);
	}
}
 42c:	df 91       	pop	r29
 42e:	cf 91       	pop	r28
 430:	08 95       	ret

00000432 <UART_PrintChar>:

void UART_PrintChar(char c) {
	uart_putch(c, NULL);
 432:	60 e0       	ldi	r22, 0x00	; 0
 434:	70 e0       	ldi	r23, 0x00	; 0
 436:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <uart_putch>
 43a:	08 95       	ret

0000043c <UART_PrintHex>:
}

void UART_PrintHex(uint8_t value) {
 43c:	ef 92       	push	r14
 43e:	ff 92       	push	r15
 440:	1f 93       	push	r17
 442:	cf 93       	push	r28
 444:	df 93       	push	r29
 446:	cd b7       	in	r28, 0x3d	; 61
 448:	de b7       	in	r29, 0x3e	; 62
 44a:	61 97       	sbiw	r28, 0x11	; 17
 44c:	0f b6       	in	r0, 0x3f	; 63
 44e:	f8 94       	cli
 450:	de bf       	out	0x3e, r29	; 62
 452:	0f be       	out	0x3f, r0	; 63
 454:	cd bf       	out	0x3d, r28	; 61
 456:	18 2f       	mov	r17, r24
	const char hexDigits[] = "0123456789ABCDEF";
 458:	81 e1       	ldi	r24, 0x11	; 17
 45a:	e3 e2       	ldi	r30, 0x23	; 35
 45c:	f3 e0       	ldi	r31, 0x03	; 3
 45e:	de 01       	movw	r26, r28
 460:	11 96       	adiw	r26, 0x01	; 1
 462:	01 90       	ld	r0, Z+
 464:	0d 92       	st	X+, r0
 466:	8a 95       	dec	r24
 468:	e1 f7       	brne	.-8      	; 0x462 <UART_PrintHex+0x26>
	uart_putch(hexDigits[value >> 4], stdout); // Send high nibble
 46a:	0f 2e       	mov	r0, r31
 46c:	fb e3       	ldi	r31, 0x3B	; 59
 46e:	ef 2e       	mov	r14, r31
 470:	f3 e0       	ldi	r31, 0x03	; 3
 472:	ff 2e       	mov	r15, r31
 474:	f0 2d       	mov	r31, r0
 476:	f7 01       	movw	r30, r14
 478:	62 81       	ldd	r22, Z+2	; 0x02
 47a:	73 81       	ldd	r23, Z+3	; 0x03
 47c:	81 2f       	mov	r24, r17
 47e:	82 95       	swap	r24
 480:	8f 70       	andi	r24, 0x0F	; 15
 482:	e1 e0       	ldi	r30, 0x01	; 1
 484:	f0 e0       	ldi	r31, 0x00	; 0
 486:	ec 0f       	add	r30, r28
 488:	fd 1f       	adc	r31, r29
 48a:	e8 0f       	add	r30, r24
 48c:	f1 1d       	adc	r31, r1
 48e:	80 81       	ld	r24, Z
 490:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <uart_putch>
	uart_putch(hexDigits[value & 0x0F], stdout); // Send low nibble
 494:	f7 01       	movw	r30, r14
 496:	62 81       	ldd	r22, Z+2	; 0x02
 498:	73 81       	ldd	r23, Z+3	; 0x03
 49a:	1f 70       	andi	r17, 0x0F	; 15
 49c:	e1 e0       	ldi	r30, 0x01	; 1
 49e:	f0 e0       	ldi	r31, 0x00	; 0
 4a0:	ec 0f       	add	r30, r28
 4a2:	fd 1f       	adc	r31, r29
 4a4:	e1 0f       	add	r30, r17
 4a6:	f1 1d       	adc	r31, r1
 4a8:	80 81       	ld	r24, Z
 4aa:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <uart_putch>
}
 4ae:	61 96       	adiw	r28, 0x11	; 17
 4b0:	0f b6       	in	r0, 0x3f	; 63
 4b2:	f8 94       	cli
 4b4:	de bf       	out	0x3e, r29	; 62
 4b6:	0f be       	out	0x3f, r0	; 63
 4b8:	cd bf       	out	0x3d, r28	; 61
 4ba:	df 91       	pop	r29
 4bc:	cf 91       	pop	r28
 4be:	1f 91       	pop	r17
 4c0:	ff 90       	pop	r15
 4c2:	ef 90       	pop	r14
 4c4:	08 95       	ret

000004c6 <strtol>:
 4c6:	a0 e0       	ldi	r26, 0x00	; 0
 4c8:	b0 e0       	ldi	r27, 0x00	; 0
 4ca:	e9 e6       	ldi	r30, 0x69	; 105
 4cc:	f2 e0       	ldi	r31, 0x02	; 2
 4ce:	0c 94 cf 03 	jmp	0x79e	; 0x79e <__prologue_saves__+0x2>
 4d2:	5c 01       	movw	r10, r24
 4d4:	6b 01       	movw	r12, r22
 4d6:	7a 01       	movw	r14, r20
 4d8:	61 15       	cp	r22, r1
 4da:	71 05       	cpc	r23, r1
 4dc:	19 f0       	breq	.+6      	; 0x4e4 <strtol+0x1e>
 4de:	fb 01       	movw	r30, r22
 4e0:	91 83       	std	Z+1, r25	; 0x01
 4e2:	80 83       	st	Z, r24
 4e4:	e1 14       	cp	r14, r1
 4e6:	f1 04       	cpc	r15, r1
 4e8:	29 f0       	breq	.+10     	; 0x4f4 <strtol+0x2e>
 4ea:	c7 01       	movw	r24, r14
 4ec:	02 97       	sbiw	r24, 0x02	; 2
 4ee:	83 97       	sbiw	r24, 0x23	; 35
 4f0:	08 f0       	brcs	.+2      	; 0x4f4 <strtol+0x2e>
 4f2:	e5 c0       	rjmp	.+458    	; 0x6be <strtol+0x1f8>
 4f4:	e5 01       	movw	r28, r10
 4f6:	21 96       	adiw	r28, 0x01	; 1
 4f8:	f5 01       	movw	r30, r10
 4fa:	10 81       	ld	r17, Z
 4fc:	81 2f       	mov	r24, r17
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	0e 94 85 03 	call	0x70a	; 0x70a <isspace>
 504:	89 2b       	or	r24, r25
 506:	11 f0       	breq	.+4      	; 0x50c <strtol+0x46>
 508:	5e 01       	movw	r10, r28
 50a:	f4 cf       	rjmp	.-24     	; 0x4f4 <strtol+0x2e>
 50c:	1d 32       	cpi	r17, 0x2D	; 45
 50e:	29 f4       	brne	.+10     	; 0x51a <strtol+0x54>
 510:	21 96       	adiw	r28, 0x01	; 1
 512:	f5 01       	movw	r30, r10
 514:	11 81       	ldd	r17, Z+1	; 0x01
 516:	01 e0       	ldi	r16, 0x01	; 1
 518:	07 c0       	rjmp	.+14     	; 0x528 <strtol+0x62>
 51a:	1b 32       	cpi	r17, 0x2B	; 43
 51c:	21 f4       	brne	.+8      	; 0x526 <strtol+0x60>
 51e:	e5 01       	movw	r28, r10
 520:	22 96       	adiw	r28, 0x02	; 2
 522:	f5 01       	movw	r30, r10
 524:	11 81       	ldd	r17, Z+1	; 0x01
 526:	00 e0       	ldi	r16, 0x00	; 0
 528:	e1 14       	cp	r14, r1
 52a:	f1 04       	cpc	r15, r1
 52c:	09 f1       	breq	.+66     	; 0x570 <strtol+0xaa>
 52e:	f0 e1       	ldi	r31, 0x10	; 16
 530:	ef 16       	cp	r14, r31
 532:	f1 04       	cpc	r15, r1
 534:	29 f4       	brne	.+10     	; 0x540 <strtol+0x7a>
 536:	3f c0       	rjmp	.+126    	; 0x5b6 <strtol+0xf0>
 538:	10 e3       	ldi	r17, 0x30	; 48
 53a:	e1 14       	cp	r14, r1
 53c:	f1 04       	cpc	r15, r1
 53e:	21 f1       	breq	.+72     	; 0x588 <strtol+0xc2>
 540:	28 e0       	ldi	r18, 0x08	; 8
 542:	e2 16       	cp	r14, r18
 544:	f1 04       	cpc	r15, r1
 546:	01 f1       	breq	.+64     	; 0x588 <strtol+0xc2>
 548:	54 f4       	brge	.+20     	; 0x55e <strtol+0x98>
 54a:	e2 e0       	ldi	r30, 0x02	; 2
 54c:	ee 16       	cp	r14, r30
 54e:	f1 04       	cpc	r15, r1
 550:	21 f5       	brne	.+72     	; 0x59a <strtol+0xd4>
 552:	81 2c       	mov	r8, r1
 554:	91 2c       	mov	r9, r1
 556:	a1 2c       	mov	r10, r1
 558:	b0 e4       	ldi	r27, 0x40	; 64
 55a:	bb 2e       	mov	r11, r27
 55c:	3e c0       	rjmp	.+124    	; 0x5da <strtol+0x114>
 55e:	fa e0       	ldi	r31, 0x0A	; 10
 560:	ef 16       	cp	r14, r31
 562:	f1 04       	cpc	r15, r1
 564:	39 f0       	breq	.+14     	; 0x574 <strtol+0xae>
 566:	20 e1       	ldi	r18, 0x10	; 16
 568:	e2 16       	cp	r14, r18
 56a:	f1 04       	cpc	r15, r1
 56c:	b1 f4       	brne	.+44     	; 0x59a <strtol+0xd4>
 56e:	30 c0       	rjmp	.+96     	; 0x5d0 <strtol+0x10a>
 570:	10 33       	cpi	r17, 0x30	; 48
 572:	19 f1       	breq	.+70     	; 0x5ba <strtol+0xf4>
 574:	fa e0       	ldi	r31, 0x0A	; 10
 576:	ef 2e       	mov	r14, r31
 578:	f1 2c       	mov	r15, r1
 57a:	ac ec       	ldi	r26, 0xCC	; 204
 57c:	8a 2e       	mov	r8, r26
 57e:	98 2c       	mov	r9, r8
 580:	a8 2c       	mov	r10, r8
 582:	ac e0       	ldi	r26, 0x0C	; 12
 584:	ba 2e       	mov	r11, r26
 586:	29 c0       	rjmp	.+82     	; 0x5da <strtol+0x114>
 588:	78 e0       	ldi	r23, 0x08	; 8
 58a:	e7 2e       	mov	r14, r23
 58c:	f1 2c       	mov	r15, r1
 58e:	81 2c       	mov	r8, r1
 590:	91 2c       	mov	r9, r1
 592:	a1 2c       	mov	r10, r1
 594:	e0 e1       	ldi	r30, 0x10	; 16
 596:	be 2e       	mov	r11, r30
 598:	20 c0       	rjmp	.+64     	; 0x5da <strtol+0x114>
 59a:	60 e0       	ldi	r22, 0x00	; 0
 59c:	70 e0       	ldi	r23, 0x00	; 0
 59e:	80 e0       	ldi	r24, 0x00	; 0
 5a0:	90 e8       	ldi	r25, 0x80	; 128
 5a2:	97 01       	movw	r18, r14
 5a4:	0f 2c       	mov	r0, r15
 5a6:	00 0c       	add	r0, r0
 5a8:	44 0b       	sbc	r20, r20
 5aa:	55 0b       	sbc	r21, r21
 5ac:	0e 94 a1 03 	call	0x742	; 0x742 <__udivmodsi4>
 5b0:	49 01       	movw	r8, r18
 5b2:	5a 01       	movw	r10, r20
 5b4:	12 c0       	rjmp	.+36     	; 0x5da <strtol+0x114>
 5b6:	10 33       	cpi	r17, 0x30	; 48
 5b8:	59 f4       	brne	.+22     	; 0x5d0 <strtol+0x10a>
 5ba:	88 81       	ld	r24, Y
 5bc:	8f 7d       	andi	r24, 0xDF	; 223
 5be:	88 35       	cpi	r24, 0x58	; 88
 5c0:	09 f0       	breq	.+2      	; 0x5c4 <strtol+0xfe>
 5c2:	ba cf       	rjmp	.-140    	; 0x538 <strtol+0x72>
 5c4:	19 81       	ldd	r17, Y+1	; 0x01
 5c6:	22 96       	adiw	r28, 0x02	; 2
 5c8:	02 60       	ori	r16, 0x02	; 2
 5ca:	80 e1       	ldi	r24, 0x10	; 16
 5cc:	e8 2e       	mov	r14, r24
 5ce:	f1 2c       	mov	r15, r1
 5d0:	81 2c       	mov	r8, r1
 5d2:	91 2c       	mov	r9, r1
 5d4:	a1 2c       	mov	r10, r1
 5d6:	68 e0       	ldi	r22, 0x08	; 8
 5d8:	b6 2e       	mov	r11, r22
 5da:	40 e0       	ldi	r20, 0x00	; 0
 5dc:	60 e0       	ldi	r22, 0x00	; 0
 5de:	70 e0       	ldi	r23, 0x00	; 0
 5e0:	cb 01       	movw	r24, r22
 5e2:	27 01       	movw	r4, r14
 5e4:	0f 2c       	mov	r0, r15
 5e6:	00 0c       	add	r0, r0
 5e8:	66 08       	sbc	r6, r6
 5ea:	77 08       	sbc	r7, r7
 5ec:	fe 01       	movw	r30, r28
 5ee:	50 ed       	ldi	r21, 0xD0	; 208
 5f0:	35 2e       	mov	r3, r21
 5f2:	31 0e       	add	r3, r17
 5f4:	29 e0       	ldi	r18, 0x09	; 9
 5f6:	23 15       	cp	r18, r3
 5f8:	70 f4       	brcc	.+28     	; 0x616 <strtol+0x150>
 5fa:	2f eb       	ldi	r18, 0xBF	; 191
 5fc:	21 0f       	add	r18, r17
 5fe:	2a 31       	cpi	r18, 0x1A	; 26
 600:	18 f4       	brcc	.+6      	; 0x608 <strtol+0x142>
 602:	39 ec       	ldi	r19, 0xC9	; 201
 604:	33 2e       	mov	r3, r19
 606:	06 c0       	rjmp	.+12     	; 0x614 <strtol+0x14e>
 608:	2f e9       	ldi	r18, 0x9F	; 159
 60a:	21 0f       	add	r18, r17
 60c:	2a 31       	cpi	r18, 0x1A	; 26
 60e:	18 f5       	brcc	.+70     	; 0x656 <strtol+0x190>
 610:	29 ea       	ldi	r18, 0xA9	; 169
 612:	32 2e       	mov	r3, r18
 614:	31 0e       	add	r3, r17
 616:	23 2d       	mov	r18, r3
 618:	30 e0       	ldi	r19, 0x00	; 0
 61a:	2e 15       	cp	r18, r14
 61c:	3f 05       	cpc	r19, r15
 61e:	dc f4       	brge	.+54     	; 0x656 <strtol+0x190>
 620:	47 fd       	sbrc	r20, 7
 622:	16 c0       	rjmp	.+44     	; 0x650 <strtol+0x18a>
 624:	86 16       	cp	r8, r22
 626:	97 06       	cpc	r9, r23
 628:	a8 06       	cpc	r10, r24
 62a:	b9 06       	cpc	r11, r25
 62c:	70 f0       	brcs	.+28     	; 0x64a <strtol+0x184>
 62e:	a3 01       	movw	r20, r6
 630:	92 01       	movw	r18, r4
 632:	0e 94 91 03 	call	0x722	; 0x722 <__mulsi3>
 636:	63 0d       	add	r22, r3
 638:	71 1d       	adc	r23, r1
 63a:	81 1d       	adc	r24, r1
 63c:	91 1d       	adc	r25, r1
 63e:	61 30       	cpi	r22, 0x01	; 1
 640:	71 05       	cpc	r23, r1
 642:	81 05       	cpc	r24, r1
 644:	20 e8       	ldi	r18, 0x80	; 128
 646:	92 07       	cpc	r25, r18
 648:	10 f0       	brcs	.+4      	; 0x64e <strtol+0x188>
 64a:	4f ef       	ldi	r20, 0xFF	; 255
 64c:	01 c0       	rjmp	.+2      	; 0x650 <strtol+0x18a>
 64e:	41 e0       	ldi	r20, 0x01	; 1
 650:	21 96       	adiw	r28, 0x01	; 1
 652:	10 81       	ld	r17, Z
 654:	cb cf       	rjmp	.-106    	; 0x5ec <strtol+0x126>
 656:	20 2f       	mov	r18, r16
 658:	21 70       	andi	r18, 0x01	; 1
 65a:	c1 14       	cp	r12, r1
 65c:	d1 04       	cpc	r13, r1
 65e:	71 f0       	breq	.+28     	; 0x67c <strtol+0x1b6>
 660:	44 23       	and	r20, r20
 662:	29 f0       	breq	.+10     	; 0x66e <strtol+0x1a8>
 664:	21 97       	sbiw	r28, 0x01	; 1
 666:	f6 01       	movw	r30, r12
 668:	d1 83       	std	Z+1, r29	; 0x01
 66a:	c0 83       	st	Z, r28
 66c:	07 c0       	rjmp	.+14     	; 0x67c <strtol+0x1b6>
 66e:	01 ff       	sbrs	r16, 1
 670:	19 c0       	rjmp	.+50     	; 0x6a4 <strtol+0x1de>
 672:	22 97       	sbiw	r28, 0x02	; 2
 674:	f6 01       	movw	r30, r12
 676:	d1 83       	std	Z+1, r29	; 0x01
 678:	c0 83       	st	Z, r28
 67a:	14 c0       	rjmp	.+40     	; 0x6a4 <strtol+0x1de>
 67c:	47 ff       	sbrs	r20, 7
 67e:	12 c0       	rjmp	.+36     	; 0x6a4 <strtol+0x1de>
 680:	22 23       	and	r18, r18
 682:	29 f0       	breq	.+10     	; 0x68e <strtol+0x1c8>
 684:	60 e0       	ldi	r22, 0x00	; 0
 686:	70 e0       	ldi	r23, 0x00	; 0
 688:	80 e0       	ldi	r24, 0x00	; 0
 68a:	90 e8       	ldi	r25, 0x80	; 128
 68c:	04 c0       	rjmp	.+8      	; 0x696 <strtol+0x1d0>
 68e:	6f ef       	ldi	r22, 0xFF	; 255
 690:	7f ef       	ldi	r23, 0xFF	; 255
 692:	8f ef       	ldi	r24, 0xFF	; 255
 694:	9f e7       	ldi	r25, 0x7F	; 127
 696:	22 e2       	ldi	r18, 0x22	; 34
 698:	30 e0       	ldi	r19, 0x00	; 0
 69a:	30 93 42 03 	sts	0x0342, r19	; 0x800342 <errno+0x1>
 69e:	20 93 41 03 	sts	0x0341, r18	; 0x800341 <errno>
 6a2:	09 c0       	rjmp	.+18     	; 0x6b6 <strtol+0x1f0>
 6a4:	22 23       	and	r18, r18
 6a6:	81 f0       	breq	.+32     	; 0x6c8 <strtol+0x202>
 6a8:	90 95       	com	r25
 6aa:	80 95       	com	r24
 6ac:	70 95       	com	r23
 6ae:	61 95       	neg	r22
 6b0:	7f 4f       	sbci	r23, 0xFF	; 255
 6b2:	8f 4f       	sbci	r24, 0xFF	; 255
 6b4:	9f 4f       	sbci	r25, 0xFF	; 255
 6b6:	46 2f       	mov	r20, r22
 6b8:	37 2f       	mov	r19, r23
 6ba:	28 2f       	mov	r18, r24
 6bc:	12 c0       	rjmp	.+36     	; 0x6e2 <strtol+0x21c>
 6be:	40 e0       	ldi	r20, 0x00	; 0
 6c0:	30 e0       	ldi	r19, 0x00	; 0
 6c2:	20 e0       	ldi	r18, 0x00	; 0
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	0d c0       	rjmp	.+26     	; 0x6e2 <strtol+0x21c>
 6c8:	97 ff       	sbrs	r25, 7
 6ca:	f5 cf       	rjmp	.-22     	; 0x6b6 <strtol+0x1f0>
 6cc:	82 e2       	ldi	r24, 0x22	; 34
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	90 93 42 03 	sts	0x0342, r25	; 0x800342 <errno+0x1>
 6d4:	80 93 41 03 	sts	0x0341, r24	; 0x800341 <errno>
 6d8:	6f ef       	ldi	r22, 0xFF	; 255
 6da:	7f ef       	ldi	r23, 0xFF	; 255
 6dc:	8f ef       	ldi	r24, 0xFF	; 255
 6de:	9f e7       	ldi	r25, 0x7F	; 127
 6e0:	ea cf       	rjmp	.-44     	; 0x6b6 <strtol+0x1f0>
 6e2:	64 2f       	mov	r22, r20
 6e4:	73 2f       	mov	r23, r19
 6e6:	82 2f       	mov	r24, r18
 6e8:	cd b7       	in	r28, 0x3d	; 61
 6ea:	de b7       	in	r29, 0x3e	; 62
 6ec:	e1 e1       	ldi	r30, 0x11	; 17
 6ee:	0c 94 eb 03 	jmp	0x7d6	; 0x7d6 <__epilogue_restores__+0x2>

000006f2 <isxdigit>:
 6f2:	91 11       	cpse	r25, r1
 6f4:	0c 94 8e 03 	jmp	0x71c	; 0x71c <__ctype_isfalse>
 6f8:	80 53       	subi	r24, 0x30	; 48
 6fa:	8a 50       	subi	r24, 0x0A	; 10
 6fc:	28 f0       	brcs	.+10     	; 0x708 <isxdigit+0x16>
 6fe:	86 5c       	subi	r24, 0xC6	; 198
 700:	80 62       	ori	r24, 0x20	; 32
 702:	81 56       	subi	r24, 0x61	; 97
 704:	86 50       	subi	r24, 0x06	; 6
 706:	b0 f7       	brcc	.-20     	; 0x6f4 <isxdigit+0x2>
 708:	08 95       	ret

0000070a <isspace>:
 70a:	91 11       	cpse	r25, r1
 70c:	0c 94 8e 03 	jmp	0x71c	; 0x71c <__ctype_isfalse>
 710:	80 32       	cpi	r24, 0x20	; 32
 712:	19 f0       	breq	.+6      	; 0x71a <isspace+0x10>
 714:	89 50       	subi	r24, 0x09	; 9
 716:	85 50       	subi	r24, 0x05	; 5
 718:	c8 f7       	brcc	.-14     	; 0x70c <isspace+0x2>
 71a:	08 95       	ret

0000071c <__ctype_isfalse>:
 71c:	99 27       	eor	r25, r25
 71e:	88 27       	eor	r24, r24

00000720 <__ctype_istrue>:
 720:	08 95       	ret

00000722 <__mulsi3>:
 722:	db 01       	movw	r26, r22
 724:	8f 93       	push	r24
 726:	9f 93       	push	r25
 728:	0e 94 c3 03 	call	0x786	; 0x786 <__muluhisi3>
 72c:	bf 91       	pop	r27
 72e:	af 91       	pop	r26
 730:	a2 9f       	mul	r26, r18
 732:	80 0d       	add	r24, r0
 734:	91 1d       	adc	r25, r1
 736:	a3 9f       	mul	r26, r19
 738:	90 0d       	add	r25, r0
 73a:	b2 9f       	mul	r27, r18
 73c:	90 0d       	add	r25, r0
 73e:	11 24       	eor	r1, r1
 740:	08 95       	ret

00000742 <__udivmodsi4>:
 742:	a1 e2       	ldi	r26, 0x21	; 33
 744:	1a 2e       	mov	r1, r26
 746:	aa 1b       	sub	r26, r26
 748:	bb 1b       	sub	r27, r27
 74a:	fd 01       	movw	r30, r26
 74c:	0d c0       	rjmp	.+26     	; 0x768 <__udivmodsi4_ep>

0000074e <__udivmodsi4_loop>:
 74e:	aa 1f       	adc	r26, r26
 750:	bb 1f       	adc	r27, r27
 752:	ee 1f       	adc	r30, r30
 754:	ff 1f       	adc	r31, r31
 756:	a2 17       	cp	r26, r18
 758:	b3 07       	cpc	r27, r19
 75a:	e4 07       	cpc	r30, r20
 75c:	f5 07       	cpc	r31, r21
 75e:	20 f0       	brcs	.+8      	; 0x768 <__udivmodsi4_ep>
 760:	a2 1b       	sub	r26, r18
 762:	b3 0b       	sbc	r27, r19
 764:	e4 0b       	sbc	r30, r20
 766:	f5 0b       	sbc	r31, r21

00000768 <__udivmodsi4_ep>:
 768:	66 1f       	adc	r22, r22
 76a:	77 1f       	adc	r23, r23
 76c:	88 1f       	adc	r24, r24
 76e:	99 1f       	adc	r25, r25
 770:	1a 94       	dec	r1
 772:	69 f7       	brne	.-38     	; 0x74e <__udivmodsi4_loop>
 774:	60 95       	com	r22
 776:	70 95       	com	r23
 778:	80 95       	com	r24
 77a:	90 95       	com	r25
 77c:	9b 01       	movw	r18, r22
 77e:	ac 01       	movw	r20, r24
 780:	bd 01       	movw	r22, r26
 782:	cf 01       	movw	r24, r30
 784:	08 95       	ret

00000786 <__muluhisi3>:
 786:	0e 94 05 04 	call	0x80a	; 0x80a <__umulhisi3>
 78a:	a5 9f       	mul	r26, r21
 78c:	90 0d       	add	r25, r0
 78e:	b4 9f       	mul	r27, r20
 790:	90 0d       	add	r25, r0
 792:	a4 9f       	mul	r26, r20
 794:	80 0d       	add	r24, r0
 796:	91 1d       	adc	r25, r1
 798:	11 24       	eor	r1, r1
 79a:	08 95       	ret

0000079c <__prologue_saves__>:
 79c:	2f 92       	push	r2
 79e:	3f 92       	push	r3
 7a0:	4f 92       	push	r4
 7a2:	5f 92       	push	r5
 7a4:	6f 92       	push	r6
 7a6:	7f 92       	push	r7
 7a8:	8f 92       	push	r8
 7aa:	9f 92       	push	r9
 7ac:	af 92       	push	r10
 7ae:	bf 92       	push	r11
 7b0:	cf 92       	push	r12
 7b2:	df 92       	push	r13
 7b4:	ef 92       	push	r14
 7b6:	ff 92       	push	r15
 7b8:	0f 93       	push	r16
 7ba:	1f 93       	push	r17
 7bc:	cf 93       	push	r28
 7be:	df 93       	push	r29
 7c0:	cd b7       	in	r28, 0x3d	; 61
 7c2:	de b7       	in	r29, 0x3e	; 62
 7c4:	ca 1b       	sub	r28, r26
 7c6:	db 0b       	sbc	r29, r27
 7c8:	0f b6       	in	r0, 0x3f	; 63
 7ca:	f8 94       	cli
 7cc:	de bf       	out	0x3e, r29	; 62
 7ce:	0f be       	out	0x3f, r0	; 63
 7d0:	cd bf       	out	0x3d, r28	; 61
 7d2:	09 94       	ijmp

000007d4 <__epilogue_restores__>:
 7d4:	2a 88       	ldd	r2, Y+18	; 0x12
 7d6:	39 88       	ldd	r3, Y+17	; 0x11
 7d8:	48 88       	ldd	r4, Y+16	; 0x10
 7da:	5f 84       	ldd	r5, Y+15	; 0x0f
 7dc:	6e 84       	ldd	r6, Y+14	; 0x0e
 7de:	7d 84       	ldd	r7, Y+13	; 0x0d
 7e0:	8c 84       	ldd	r8, Y+12	; 0x0c
 7e2:	9b 84       	ldd	r9, Y+11	; 0x0b
 7e4:	aa 84       	ldd	r10, Y+10	; 0x0a
 7e6:	b9 84       	ldd	r11, Y+9	; 0x09
 7e8:	c8 84       	ldd	r12, Y+8	; 0x08
 7ea:	df 80       	ldd	r13, Y+7	; 0x07
 7ec:	ee 80       	ldd	r14, Y+6	; 0x06
 7ee:	fd 80       	ldd	r15, Y+5	; 0x05
 7f0:	0c 81       	ldd	r16, Y+4	; 0x04
 7f2:	1b 81       	ldd	r17, Y+3	; 0x03
 7f4:	aa 81       	ldd	r26, Y+2	; 0x02
 7f6:	b9 81       	ldd	r27, Y+1	; 0x01
 7f8:	ce 0f       	add	r28, r30
 7fa:	d1 1d       	adc	r29, r1
 7fc:	0f b6       	in	r0, 0x3f	; 63
 7fe:	f8 94       	cli
 800:	de bf       	out	0x3e, r29	; 62
 802:	0f be       	out	0x3f, r0	; 63
 804:	cd bf       	out	0x3d, r28	; 61
 806:	ed 01       	movw	r28, r26
 808:	08 95       	ret

0000080a <__umulhisi3>:
 80a:	a2 9f       	mul	r26, r18
 80c:	b0 01       	movw	r22, r0
 80e:	b3 9f       	mul	r27, r19
 810:	c0 01       	movw	r24, r0
 812:	a3 9f       	mul	r26, r19
 814:	70 0d       	add	r23, r0
 816:	81 1d       	adc	r24, r1
 818:	11 24       	eor	r1, r1
 81a:	91 1d       	adc	r25, r1
 81c:	b2 9f       	mul	r27, r18
 81e:	70 0d       	add	r23, r0
 820:	81 1d       	adc	r24, r1
 822:	11 24       	eor	r1, r1
 824:	91 1d       	adc	r25, r1
 826:	08 95       	ret

00000828 <_exit>:
 828:	f8 94       	cli

0000082a <__stop_program>:
 82a:	ff cf       	rjmp	.-2      	; 0x82a <__stop_program>
