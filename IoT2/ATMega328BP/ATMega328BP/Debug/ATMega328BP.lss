
ATMega328BP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001c4  00800100  0000076a  000007fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000076a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  008002c4  008002c4  000009c2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000009c2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013f3  00000000  00000000  00000b20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ca7  00000000  00000000  00001f13  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006fb  00000000  00000000  00002bba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000022c  00000000  00000000  000032b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ba  00000000  00000000  000034e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000520  00000000  00000000  00003b9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  000040be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__vector_28>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	12 e0       	ldi	r17, 0x02	; 2
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ea e6       	ldi	r30, 0x6A	; 106
  c8:	f7 e0       	ldi	r31, 0x07	; 7
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a4 3c       	cpi	r26, 0xC4	; 196
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	22 e0       	ldi	r18, 0x02	; 2
  d8:	a4 ec       	ldi	r26, 0xC4	; 196
  da:	b2 e0       	ldi	r27, 0x02	; 2
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a2 3d       	cpi	r26, 0xD2	; 210
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 79 00 	call	0xf2	; 0xf2 <main>
  ea:	0c 94 b3 03 	jmp	0x766	; 0x766 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <main>:
    UART_PrintHex(ucsr1a_value);
    UART_PrintString("\n");
}

int main(void) {
    RS232Init();
  f2:	0e 94 8b 01 	call	0x316	; 0x316 <RS232Init>
    Enable_UART_Receive_Interrupt();  
  f6:	0e 94 a3 01 	call	0x346	; 0x346 <Enable_UART_Receive_Interrupt>
    sei();  
  fa:	78 94       	sei
  fc:	ff cf       	rjmp	.-2      	; 0xfc <main+0xa>

000000fe <__vector_28>:
    }

    return 0;
}

ISR(USART1_RX_vect) {
  fe:	1f 92       	push	r1
 100:	0f 92       	push	r0
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	0f 92       	push	r0
 106:	11 24       	eor	r1, r1
 108:	2f 93       	push	r18
 10a:	3f 93       	push	r19
 10c:	4f 93       	push	r20
 10e:	5f 93       	push	r21
 110:	6f 93       	push	r22
 112:	7f 93       	push	r23
 114:	8f 93       	push	r24
 116:	9f 93       	push	r25
 118:	af 93       	push	r26
 11a:	bf 93       	push	r27
 11c:	ef 93       	push	r30
 11e:	ff 93       	push	r31
	if (UCSR1A & ((1 << FE1) | (1 << DOR1))) {
 120:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
 124:	88 71       	andi	r24, 0x18	; 24
 126:	c9 f0       	breq	.+50     	; 0x15a <__vector_28+0x5c>
		UART_PrintString("UART Error: ");
 128:	8b e2       	ldi	r24, 0x2B	; 43
 12a:	91 e0       	ldi	r25, 0x01	; 1
 12c:	0e 94 a9 01 	call	0x352	; 0x352 <UART_PrintString>
		if (UCSR1A & (1 << FE1)) {
 130:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
 134:	84 ff       	sbrs	r24, 4
 136:	04 c0       	rjmp	.+8      	; 0x140 <__vector_28+0x42>
			UART_PrintString("Framing Error ");
 138:	88 e3       	ldi	r24, 0x38	; 56
 13a:	91 e0       	ldi	r25, 0x01	; 1
 13c:	0e 94 a9 01 	call	0x352	; 0x352 <UART_PrintString>
		}
		if (UCSR1A & (1 << DOR1)) {
 140:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
 144:	83 ff       	sbrs	r24, 3
 146:	04 c0       	rjmp	.+8      	; 0x150 <__vector_28+0x52>
			UART_PrintString("Data Overrun ");
 148:	87 e4       	ldi	r24, 0x47	; 71
 14a:	91 e0       	ldi	r25, 0x01	; 1
 14c:	0e 94 a9 01 	call	0x352	; 0x352 <UART_PrintString>
		}
		UART_PrintString("\n");
 150:	80 e6       	ldi	r24, 0x60	; 96
 152:	92 e0       	ldi	r25, 0x02	; 2
 154:	0e 94 a9 01 	call	0x352	; 0x352 <UART_PrintString>
 158:	08 c0       	rjmp	.+16     	; 0x16a <__vector_28+0x6c>
		} else {
		char receivedByte = UDR1;
 15a:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
		handle_state_machine(&currentState, receivedByte, &address);
 15e:	48 ec       	ldi	r20, 0xC8	; 200
 160:	52 e0       	ldi	r21, 0x02	; 2
 162:	89 ec       	ldi	r24, 0xC9	; 201
 164:	92 e0       	ldi	r25, 0x02	; 2
 166:	0e 94 c6 00 	call	0x18c	; 0x18c <handle_state_machine>
	}
}
 16a:	ff 91       	pop	r31
 16c:	ef 91       	pop	r30
 16e:	bf 91       	pop	r27
 170:	af 91       	pop	r26
 172:	9f 91       	pop	r25
 174:	8f 91       	pop	r24
 176:	7f 91       	pop	r23
 178:	6f 91       	pop	r22
 17a:	5f 91       	pop	r21
 17c:	4f 91       	pop	r20
 17e:	3f 91       	pop	r19
 180:	2f 91       	pop	r18
 182:	0f 90       	pop	r0
 184:	0f be       	out	0x3f, r0	; 63
 186:	0f 90       	pop	r0
 188:	1f 90       	pop	r1
 18a:	18 95       	reti

0000018c <handle_state_machine>:
	Modtag_Adresse,
	Modtag_Bit_Position_I_Adresse,
	Modtag_Bit_Position_Vaerdi
} State;

void handle_state_machine(State *currentState, char recivedChar, uint8_t *address) {
 18c:	ef 92       	push	r14
 18e:	ff 92       	push	r15
 190:	0f 93       	push	r16
 192:	1f 93       	push	r17
 194:	cf 93       	push	r28
 196:	8c 01       	movw	r16, r24
 198:	c6 2f       	mov	r28, r22
 19a:	7a 01       	movw	r14, r20
	static char hexBuffer[3] = {0};  // Buffer for two hex characters and null terminator
	static uint8_t hexIndex = 0;

	UART_PrintString("Received Char: ");
 19c:	85 e5       	ldi	r24, 0x55	; 85
 19e:	91 e0       	ldi	r25, 0x01	; 1
 1a0:	0e 94 a9 01 	call	0x352	; 0x352 <UART_PrintString>
	UART_PrintHex((uint8_t)recivedChar);
 1a4:	8c 2f       	mov	r24, r28
 1a6:	0e 94 bd 01 	call	0x37a	; 0x37a <UART_PrintHex>
	UART_PrintString("\n");
 1aa:	80 e6       	ldi	r24, 0x60	; 96
 1ac:	92 e0       	ldi	r25, 0x02	; 2
 1ae:	0e 94 a9 01 	call	0x352	; 0x352 <UART_PrintString>

	UART_PrintString("Current State: ");
 1b2:	85 e6       	ldi	r24, 0x65	; 101
 1b4:	91 e0       	ldi	r25, 0x01	; 1
 1b6:	0e 94 a9 01 	call	0x352	; 0x352 <UART_PrintString>
	switch (*currentState) {
 1ba:	f8 01       	movw	r30, r16
 1bc:	80 81       	ld	r24, Z
 1be:	81 30       	cpi	r24, 0x01	; 1
 1c0:	49 f0       	breq	.+18     	; 0x1d4 <handle_state_machine+0x48>
 1c2:	18 f0       	brcs	.+6      	; 0x1ca <handle_state_machine+0x3e>
 1c4:	82 30       	cpi	r24, 0x02	; 2
 1c6:	59 f0       	breq	.+22     	; 0x1de <handle_state_machine+0x52>
 1c8:	0f c0       	rjmp	.+30     	; 0x1e8 <handle_state_machine+0x5c>
		case Modtag_Adresse:
		UART_PrintString("Modtag_Adresse\n");
 1ca:	85 e7       	ldi	r24, 0x75	; 117
 1cc:	91 e0       	ldi	r25, 0x01	; 1
 1ce:	0e 94 a9 01 	call	0x352	; 0x352 <UART_PrintString>
		break;
 1d2:	0e c0       	rjmp	.+28     	; 0x1f0 <handle_state_machine+0x64>
		case Modtag_Bit_Position_I_Adresse:
		UART_PrintString("Modtag_Bit_Position_I_Adresse\n");
 1d4:	85 e8       	ldi	r24, 0x85	; 133
 1d6:	91 e0       	ldi	r25, 0x01	; 1
 1d8:	0e 94 a9 01 	call	0x352	; 0x352 <UART_PrintString>
		break;
 1dc:	09 c0       	rjmp	.+18     	; 0x1f0 <handle_state_machine+0x64>
		case Modtag_Bit_Position_Vaerdi:
		UART_PrintString("Modtag_Bit_Position_Vaerdi\n");
 1de:	84 ea       	ldi	r24, 0xA4	; 164
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	0e 94 a9 01 	call	0x352	; 0x352 <UART_PrintString>
		break;
 1e6:	04 c0       	rjmp	.+8      	; 0x1f0 <handle_state_machine+0x64>
		default:
		UART_PrintString("Unknown State\n");
 1e8:	80 ec       	ldi	r24, 0xC0	; 192
 1ea:	91 e0       	ldi	r25, 0x01	; 1
 1ec:	0e 94 a9 01 	call	0x352	; 0x352 <UART_PrintString>
		break;
	}

	switch (*currentState) {
 1f0:	f8 01       	movw	r30, r16
 1f2:	80 81       	ld	r24, Z
 1f4:	81 30       	cpi	r24, 0x01	; 1
 1f6:	09 f4       	brne	.+2      	; 0x1fa <handle_state_machine+0x6e>
 1f8:	49 c0       	rjmp	.+146    	; 0x28c <handle_state_machine+0x100>
 1fa:	20 f0       	brcs	.+8      	; 0x204 <handle_state_machine+0x78>
 1fc:	82 30       	cpi	r24, 0x02	; 2
 1fe:	09 f4       	brne	.+2      	; 0x202 <handle_state_machine+0x76>
 200:	60 c0       	rjmp	.+192    	; 0x2c2 <handle_state_machine+0x136>
 202:	6e c0       	rjmp	.+220    	; 0x2e0 <handle_state_machine+0x154>
		case Modtag_Adresse:
		if (recivedChar == ':') {
 204:	ca 33       	cpi	r28, 0x3A	; 58
 206:	f1 f4       	brne	.+60     	; 0x244 <handle_state_machine+0xb8>
			// Convert the buffer to the address and print it
			*address = (uint8_t)strtol(hexBuffer, NULL, 16);
 208:	40 e1       	ldi	r20, 0x10	; 16
 20a:	50 e0       	ldi	r21, 0x00	; 0
 20c:	60 e0       	ldi	r22, 0x00	; 0
 20e:	70 e0       	ldi	r23, 0x00	; 0
 210:	85 ec       	ldi	r24, 0xC5	; 197
 212:	92 e0       	ldi	r25, 0x02	; 2
 214:	0e 94 02 02 	call	0x404	; 0x404 <strtol>
 218:	f7 01       	movw	r30, r14
 21a:	60 83       	st	Z, r22

			UART_PrintString("Received address: 0x");
 21c:	8f ec       	ldi	r24, 0xCF	; 207
 21e:	91 e0       	ldi	r25, 0x01	; 1
 220:	0e 94 a9 01 	call	0x352	; 0x352 <UART_PrintString>
			UART_PrintHex(*address);
 224:	f7 01       	movw	r30, r14
 226:	80 81       	ld	r24, Z
 228:	0e 94 bd 01 	call	0x37a	; 0x37a <UART_PrintHex>
			UART_PrintString("\n");
 22c:	80 e6       	ldi	r24, 0x60	; 96
 22e:	92 e0       	ldi	r25, 0x02	; 2
 230:	0e 94 a9 01 	call	0x352	; 0x352 <UART_PrintString>

			// Reset buffer for next address
			hexIndex = 0;
 234:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <__data_end>
			hexBuffer[0] = '\0';
 238:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <hexBuffer.2036>

			// Transition to the next state
			*currentState = Modtag_Bit_Position_I_Adresse;
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	f8 01       	movw	r30, r16
 240:	80 83       	st	Z, r24
 242:	52 c0       	rjmp	.+164    	; 0x2e8 <handle_state_machine+0x15c>
			} else if (isxdigit(recivedChar) && hexIndex < 2) {
 244:	8c 2f       	mov	r24, r28
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	0e 94 18 03 	call	0x630	; 0x630 <isxdigit>
 24c:	89 2b       	or	r24, r25
 24e:	91 f0       	breq	.+36     	; 0x274 <handle_state_machine+0xe8>
 250:	e0 91 c4 02 	lds	r30, 0x02C4	; 0x8002c4 <__data_end>
 254:	e2 30       	cpi	r30, 0x02	; 2
 256:	70 f4       	brcc	.+28     	; 0x274 <handle_state_machine+0xe8>
			// Fill the hexBuffer with received characters
			hexBuffer[hexIndex++] = recivedChar;
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	8e 0f       	add	r24, r30
 25c:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <__data_end>
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	eb 53       	subi	r30, 0x3B	; 59
 264:	fd 4f       	sbci	r31, 0xFD	; 253
 266:	c0 83       	st	Z, r28
			hexBuffer[hexIndex] = '\0';  // Ensure null termination
 268:	e8 2f       	mov	r30, r24
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	eb 53       	subi	r30, 0x3B	; 59
 26e:	fd 4f       	sbci	r31, 0xFD	; 253
 270:	10 82       	st	Z, r1
 272:	3a c0       	rjmp	.+116    	; 0x2e8 <handle_state_machine+0x15c>
			} else {
			UART_PrintString("Unexpected character received: ");
 274:	84 ee       	ldi	r24, 0xE4	; 228
 276:	91 e0       	ldi	r25, 0x01	; 1
 278:	0e 94 a9 01 	call	0x352	; 0x352 <UART_PrintString>
			UART_PrintChar(recivedChar);
 27c:	8c 2f       	mov	r24, r28
 27e:	0e 94 b8 01 	call	0x370	; 0x370 <UART_PrintChar>
			UART_PrintString("\n");
 282:	80 e6       	ldi	r24, 0x60	; 96
 284:	92 e0       	ldi	r25, 0x02	; 2
 286:	0e 94 a9 01 	call	0x352	; 0x352 <UART_PrintString>
 28a:	2e c0       	rjmp	.+92     	; 0x2e8 <handle_state_machine+0x15c>
		}
		break;

		case Modtag_Bit_Position_I_Adresse:
		if (isxdigit(recivedChar)) {
 28c:	8c 2f       	mov	r24, r28
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	0e 94 18 03 	call	0x630	; 0x630 <isxdigit>
 294:	89 2b       	or	r24, r25
 296:	81 f0       	breq	.+32     	; 0x2b8 <handle_state_machine+0x12c>
			// Handle the bit position (assuming one digit for simplicity)
			uint8_t bitPosition = recivedChar - '0'; // Convert ASCII to number
 298:	c0 53       	subi	r28, 0x30	; 48
			UART_PrintString("Enter bit position for address: 0x");
 29a:	84 e0       	ldi	r24, 0x04	; 4
 29c:	92 e0       	ldi	r25, 0x02	; 2
 29e:	0e 94 a9 01 	call	0x352	; 0x352 <UART_PrintString>
			UART_PrintHex(bitPosition);
 2a2:	8c 2f       	mov	r24, r28
 2a4:	0e 94 bd 01 	call	0x37a	; 0x37a <UART_PrintHex>
			UART_PrintString("\n");
 2a8:	80 e6       	ldi	r24, 0x60	; 96
 2aa:	92 e0       	ldi	r25, 0x02	; 2
 2ac:	0e 94 a9 01 	call	0x352	; 0x352 <UART_PrintString>

			// Transition to next state for bit value
			*currentState = Modtag_Bit_Position_Vaerdi;
 2b0:	82 e0       	ldi	r24, 0x02	; 2
 2b2:	f8 01       	movw	r30, r16
 2b4:	80 83       	st	Z, r24
 2b6:	18 c0       	rjmp	.+48     	; 0x2e8 <handle_state_machine+0x15c>
			} else {
			UART_PrintString("Invalid bit position, please enter a valid position (0-9)\n");
 2b8:	87 e2       	ldi	r24, 0x27	; 39
 2ba:	92 e0       	ldi	r25, 0x02	; 2
 2bc:	0e 94 a9 01 	call	0x352	; 0x352 <UART_PrintString>
 2c0:	13 c0       	rjmp	.+38     	; 0x2e8 <handle_state_machine+0x15c>
		}
		break;

		case Modtag_Bit_Position_Vaerdi:
		if (recivedChar == '0' || recivedChar == '1') {
 2c2:	c0 53       	subi	r28, 0x30	; 48
 2c4:	c2 30       	cpi	r28, 0x02	; 2
 2c6:	38 f4       	brcc	.+14     	; 0x2d6 <handle_state_machine+0x14a>
			// Handle valid bit value
			UART_PrintString("Valid bit value received\n");
 2c8:	82 e6       	ldi	r24, 0x62	; 98
 2ca:	92 e0       	ldi	r25, 0x02	; 2
 2cc:	0e 94 a9 01 	call	0x352	; 0x352 <UART_PrintString>

			// Transition back to Modtag_Adresse for next address input
			*currentState = Modtag_Adresse;
 2d0:	f8 01       	movw	r30, r16
 2d2:	10 82       	st	Z, r1
 2d4:	09 c0       	rjmp	.+18     	; 0x2e8 <handle_state_machine+0x15c>
			} else {
			UART_PrintString("Invalid bit value, please enter 0 or 1\n");
 2d6:	8c e7       	ldi	r24, 0x7C	; 124
 2d8:	92 e0       	ldi	r25, 0x02	; 2
 2da:	0e 94 a9 01 	call	0x352	; 0x352 <UART_PrintString>
 2de:	04 c0       	rjmp	.+8      	; 0x2e8 <handle_state_machine+0x15c>
		}
		break;

		default:
		UART_PrintString("Unknown state\n");
 2e0:	84 ea       	ldi	r24, 0xA4	; 164
 2e2:	92 e0       	ldi	r25, 0x02	; 2
 2e4:	0e 94 a9 01 	call	0x352	; 0x352 <UART_PrintString>
		break;
	}
}
 2e8:	cf 91       	pop	r28
 2ea:	1f 91       	pop	r17
 2ec:	0f 91       	pop	r16
 2ee:	ff 90       	pop	r15
 2f0:	ef 90       	pop	r14
 2f2:	08 95       	ret

000002f4 <uart_getch>:
}

ISR(USART_RX_vect) {
	char ReceivedByte = UDR1;
	ReceiveNewTimeoutValue(&ReceivedByte);
}
 2f4:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
 2f8:	88 23       	and	r24, r24
 2fa:	e4 f7       	brge	.-8      	; 0x2f4 <uart_getch>
 2fc:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	08 95       	ret

00000304 <uart_putch>:
 304:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
 308:	95 ff       	sbrs	r25, 5
 30a:	fc cf       	rjmp	.-8      	; 0x304 <uart_putch>
 30c:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
 310:	80 e0       	ldi	r24, 0x00	; 0
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	08 95       	ret

00000316 <RS232Init>:
 316:	87 e6       	ldi	r24, 0x67	; 103
 318:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f80cc>
 31c:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f80cd>
 320:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
 324:	88 e1       	ldi	r24, 0x18	; 24
 326:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7f80c9>
 32a:	86 e0       	ldi	r24, 0x06	; 6
 32c:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7f80ca>
 330:	ea ec       	ldi	r30, 0xCA	; 202
 332:	f2 e0       	ldi	r31, 0x02	; 2
 334:	8e e0       	ldi	r24, 0x0E	; 14
 336:	91 e0       	ldi	r25, 0x01	; 1
 338:	93 83       	std	Z+3, r25	; 0x03
 33a:	82 83       	std	Z+2, r24	; 0x02
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	91 e0       	ldi	r25, 0x01	; 1
 340:	91 83       	std	Z+1, r25	; 0x01
 342:	80 83       	st	Z, r24
 344:	08 95       	ret

00000346 <Enable_UART_Receive_Interrupt>:
 346:	e9 ec       	ldi	r30, 0xC9	; 201
 348:	f0 e0       	ldi	r31, 0x00	; 0
 34a:	80 81       	ld	r24, Z
 34c:	80 68       	ori	r24, 0x80	; 128
 34e:	80 83       	st	Z, r24
 350:	08 95       	ret

00000352 <UART_PrintString>:

void UART_PrintString(const char* str) {
 352:	cf 93       	push	r28
 354:	df 93       	push	r29
 356:	ec 01       	movw	r28, r24
	while (*str) {
 358:	05 c0       	rjmp	.+10     	; 0x364 <UART_PrintString+0x12>
		uart_putch(*str++, NULL);
 35a:	21 96       	adiw	r28, 0x01	; 1
 35c:	60 e0       	ldi	r22, 0x00	; 0
 35e:	70 e0       	ldi	r23, 0x00	; 0
 360:	0e 94 82 01 	call	0x304	; 0x304 <uart_putch>
	char ReceivedByte = UDR1;
	ReceiveNewTimeoutValue(&ReceivedByte);
}

void UART_PrintString(const char* str) {
	while (*str) {
 364:	88 81       	ld	r24, Y
 366:	81 11       	cpse	r24, r1
 368:	f8 cf       	rjmp	.-16     	; 0x35a <UART_PrintString+0x8>
		uart_putch(*str++, NULL);
	}
}
 36a:	df 91       	pop	r29
 36c:	cf 91       	pop	r28
 36e:	08 95       	ret

00000370 <UART_PrintChar>:

void UART_PrintChar(char c) {
	uart_putch(c, NULL);
 370:	60 e0       	ldi	r22, 0x00	; 0
 372:	70 e0       	ldi	r23, 0x00	; 0
 374:	0e 94 82 01 	call	0x304	; 0x304 <uart_putch>
 378:	08 95       	ret

0000037a <UART_PrintHex>:
}

void UART_PrintHex(uint8_t value) {
 37a:	ef 92       	push	r14
 37c:	ff 92       	push	r15
 37e:	1f 93       	push	r17
 380:	cf 93       	push	r28
 382:	df 93       	push	r29
 384:	cd b7       	in	r28, 0x3d	; 61
 386:	de b7       	in	r29, 0x3e	; 62
 388:	61 97       	sbiw	r28, 0x11	; 17
 38a:	0f b6       	in	r0, 0x3f	; 63
 38c:	f8 94       	cli
 38e:	de bf       	out	0x3e, r29	; 62
 390:	0f be       	out	0x3f, r0	; 63
 392:	cd bf       	out	0x3d, r28	; 61
 394:	18 2f       	mov	r17, r24
	const char hexDigits[] = "0123456789ABCDEF";
 396:	81 e1       	ldi	r24, 0x11	; 17
 398:	e3 eb       	ldi	r30, 0xB3	; 179
 39a:	f2 e0       	ldi	r31, 0x02	; 2
 39c:	de 01       	movw	r26, r28
 39e:	11 96       	adiw	r26, 0x01	; 1
 3a0:	01 90       	ld	r0, Z+
 3a2:	0d 92       	st	X+, r0
 3a4:	8a 95       	dec	r24
 3a6:	e1 f7       	brne	.-8      	; 0x3a0 <UART_PrintHex+0x26>
	uart_putch(hexDigits[value >> 4], stdout); // Send high nibble
 3a8:	0f 2e       	mov	r0, r31
 3aa:	fa ec       	ldi	r31, 0xCA	; 202
 3ac:	ef 2e       	mov	r14, r31
 3ae:	f2 e0       	ldi	r31, 0x02	; 2
 3b0:	ff 2e       	mov	r15, r31
 3b2:	f0 2d       	mov	r31, r0
 3b4:	f7 01       	movw	r30, r14
 3b6:	62 81       	ldd	r22, Z+2	; 0x02
 3b8:	73 81       	ldd	r23, Z+3	; 0x03
 3ba:	81 2f       	mov	r24, r17
 3bc:	82 95       	swap	r24
 3be:	8f 70       	andi	r24, 0x0F	; 15
 3c0:	e1 e0       	ldi	r30, 0x01	; 1
 3c2:	f0 e0       	ldi	r31, 0x00	; 0
 3c4:	ec 0f       	add	r30, r28
 3c6:	fd 1f       	adc	r31, r29
 3c8:	e8 0f       	add	r30, r24
 3ca:	f1 1d       	adc	r31, r1
 3cc:	80 81       	ld	r24, Z
 3ce:	0e 94 82 01 	call	0x304	; 0x304 <uart_putch>
	uart_putch(hexDigits[value & 0x0F], stdout); // Send low nibble
 3d2:	f7 01       	movw	r30, r14
 3d4:	62 81       	ldd	r22, Z+2	; 0x02
 3d6:	73 81       	ldd	r23, Z+3	; 0x03
 3d8:	1f 70       	andi	r17, 0x0F	; 15
 3da:	e1 e0       	ldi	r30, 0x01	; 1
 3dc:	f0 e0       	ldi	r31, 0x00	; 0
 3de:	ec 0f       	add	r30, r28
 3e0:	fd 1f       	adc	r31, r29
 3e2:	e1 0f       	add	r30, r17
 3e4:	f1 1d       	adc	r31, r1
 3e6:	80 81       	ld	r24, Z
 3e8:	0e 94 82 01 	call	0x304	; 0x304 <uart_putch>
}
 3ec:	61 96       	adiw	r28, 0x11	; 17
 3ee:	0f b6       	in	r0, 0x3f	; 63
 3f0:	f8 94       	cli
 3f2:	de bf       	out	0x3e, r29	; 62
 3f4:	0f be       	out	0x3f, r0	; 63
 3f6:	cd bf       	out	0x3d, r28	; 61
 3f8:	df 91       	pop	r29
 3fa:	cf 91       	pop	r28
 3fc:	1f 91       	pop	r17
 3fe:	ff 90       	pop	r15
 400:	ef 90       	pop	r14
 402:	08 95       	ret

00000404 <strtol>:
 404:	a0 e0       	ldi	r26, 0x00	; 0
 406:	b0 e0       	ldi	r27, 0x00	; 0
 408:	e8 e0       	ldi	r30, 0x08	; 8
 40a:	f2 e0       	ldi	r31, 0x02	; 2
 40c:	0c 94 6e 03 	jmp	0x6dc	; 0x6dc <__prologue_saves__+0x2>
 410:	5c 01       	movw	r10, r24
 412:	6b 01       	movw	r12, r22
 414:	7a 01       	movw	r14, r20
 416:	61 15       	cp	r22, r1
 418:	71 05       	cpc	r23, r1
 41a:	19 f0       	breq	.+6      	; 0x422 <strtol+0x1e>
 41c:	fb 01       	movw	r30, r22
 41e:	91 83       	std	Z+1, r25	; 0x01
 420:	80 83       	st	Z, r24
 422:	e1 14       	cp	r14, r1
 424:	f1 04       	cpc	r15, r1
 426:	29 f0       	breq	.+10     	; 0x432 <strtol+0x2e>
 428:	c7 01       	movw	r24, r14
 42a:	02 97       	sbiw	r24, 0x02	; 2
 42c:	83 97       	sbiw	r24, 0x23	; 35
 42e:	08 f0       	brcs	.+2      	; 0x432 <strtol+0x2e>
 430:	e5 c0       	rjmp	.+458    	; 0x5fc <strtol+0x1f8>
 432:	e5 01       	movw	r28, r10
 434:	21 96       	adiw	r28, 0x01	; 1
 436:	f5 01       	movw	r30, r10
 438:	10 81       	ld	r17, Z
 43a:	81 2f       	mov	r24, r17
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	0e 94 24 03 	call	0x648	; 0x648 <isspace>
 442:	89 2b       	or	r24, r25
 444:	11 f0       	breq	.+4      	; 0x44a <strtol+0x46>
 446:	5e 01       	movw	r10, r28
 448:	f4 cf       	rjmp	.-24     	; 0x432 <strtol+0x2e>
 44a:	1d 32       	cpi	r17, 0x2D	; 45
 44c:	29 f4       	brne	.+10     	; 0x458 <strtol+0x54>
 44e:	21 96       	adiw	r28, 0x01	; 1
 450:	f5 01       	movw	r30, r10
 452:	11 81       	ldd	r17, Z+1	; 0x01
 454:	01 e0       	ldi	r16, 0x01	; 1
 456:	07 c0       	rjmp	.+14     	; 0x466 <strtol+0x62>
 458:	1b 32       	cpi	r17, 0x2B	; 43
 45a:	21 f4       	brne	.+8      	; 0x464 <strtol+0x60>
 45c:	e5 01       	movw	r28, r10
 45e:	22 96       	adiw	r28, 0x02	; 2
 460:	f5 01       	movw	r30, r10
 462:	11 81       	ldd	r17, Z+1	; 0x01
 464:	00 e0       	ldi	r16, 0x00	; 0
 466:	e1 14       	cp	r14, r1
 468:	f1 04       	cpc	r15, r1
 46a:	09 f1       	breq	.+66     	; 0x4ae <strtol+0xaa>
 46c:	f0 e1       	ldi	r31, 0x10	; 16
 46e:	ef 16       	cp	r14, r31
 470:	f1 04       	cpc	r15, r1
 472:	29 f4       	brne	.+10     	; 0x47e <strtol+0x7a>
 474:	3f c0       	rjmp	.+126    	; 0x4f4 <strtol+0xf0>
 476:	10 e3       	ldi	r17, 0x30	; 48
 478:	e1 14       	cp	r14, r1
 47a:	f1 04       	cpc	r15, r1
 47c:	21 f1       	breq	.+72     	; 0x4c6 <strtol+0xc2>
 47e:	28 e0       	ldi	r18, 0x08	; 8
 480:	e2 16       	cp	r14, r18
 482:	f1 04       	cpc	r15, r1
 484:	01 f1       	breq	.+64     	; 0x4c6 <strtol+0xc2>
 486:	54 f4       	brge	.+20     	; 0x49c <strtol+0x98>
 488:	e2 e0       	ldi	r30, 0x02	; 2
 48a:	ee 16       	cp	r14, r30
 48c:	f1 04       	cpc	r15, r1
 48e:	21 f5       	brne	.+72     	; 0x4d8 <strtol+0xd4>
 490:	81 2c       	mov	r8, r1
 492:	91 2c       	mov	r9, r1
 494:	a1 2c       	mov	r10, r1
 496:	b0 e4       	ldi	r27, 0x40	; 64
 498:	bb 2e       	mov	r11, r27
 49a:	3e c0       	rjmp	.+124    	; 0x518 <strtol+0x114>
 49c:	fa e0       	ldi	r31, 0x0A	; 10
 49e:	ef 16       	cp	r14, r31
 4a0:	f1 04       	cpc	r15, r1
 4a2:	39 f0       	breq	.+14     	; 0x4b2 <strtol+0xae>
 4a4:	20 e1       	ldi	r18, 0x10	; 16
 4a6:	e2 16       	cp	r14, r18
 4a8:	f1 04       	cpc	r15, r1
 4aa:	b1 f4       	brne	.+44     	; 0x4d8 <strtol+0xd4>
 4ac:	30 c0       	rjmp	.+96     	; 0x50e <strtol+0x10a>
 4ae:	10 33       	cpi	r17, 0x30	; 48
 4b0:	19 f1       	breq	.+70     	; 0x4f8 <strtol+0xf4>
 4b2:	fa e0       	ldi	r31, 0x0A	; 10
 4b4:	ef 2e       	mov	r14, r31
 4b6:	f1 2c       	mov	r15, r1
 4b8:	ac ec       	ldi	r26, 0xCC	; 204
 4ba:	8a 2e       	mov	r8, r26
 4bc:	98 2c       	mov	r9, r8
 4be:	a8 2c       	mov	r10, r8
 4c0:	ac e0       	ldi	r26, 0x0C	; 12
 4c2:	ba 2e       	mov	r11, r26
 4c4:	29 c0       	rjmp	.+82     	; 0x518 <strtol+0x114>
 4c6:	78 e0       	ldi	r23, 0x08	; 8
 4c8:	e7 2e       	mov	r14, r23
 4ca:	f1 2c       	mov	r15, r1
 4cc:	81 2c       	mov	r8, r1
 4ce:	91 2c       	mov	r9, r1
 4d0:	a1 2c       	mov	r10, r1
 4d2:	e0 e1       	ldi	r30, 0x10	; 16
 4d4:	be 2e       	mov	r11, r30
 4d6:	20 c0       	rjmp	.+64     	; 0x518 <strtol+0x114>
 4d8:	60 e0       	ldi	r22, 0x00	; 0
 4da:	70 e0       	ldi	r23, 0x00	; 0
 4dc:	80 e0       	ldi	r24, 0x00	; 0
 4de:	90 e8       	ldi	r25, 0x80	; 128
 4e0:	97 01       	movw	r18, r14
 4e2:	0f 2c       	mov	r0, r15
 4e4:	00 0c       	add	r0, r0
 4e6:	44 0b       	sbc	r20, r20
 4e8:	55 0b       	sbc	r21, r21
 4ea:	0e 94 40 03 	call	0x680	; 0x680 <__udivmodsi4>
 4ee:	49 01       	movw	r8, r18
 4f0:	5a 01       	movw	r10, r20
 4f2:	12 c0       	rjmp	.+36     	; 0x518 <strtol+0x114>
 4f4:	10 33       	cpi	r17, 0x30	; 48
 4f6:	59 f4       	brne	.+22     	; 0x50e <strtol+0x10a>
 4f8:	88 81       	ld	r24, Y
 4fa:	8f 7d       	andi	r24, 0xDF	; 223
 4fc:	88 35       	cpi	r24, 0x58	; 88
 4fe:	09 f0       	breq	.+2      	; 0x502 <strtol+0xfe>
 500:	ba cf       	rjmp	.-140    	; 0x476 <strtol+0x72>
 502:	19 81       	ldd	r17, Y+1	; 0x01
 504:	22 96       	adiw	r28, 0x02	; 2
 506:	02 60       	ori	r16, 0x02	; 2
 508:	80 e1       	ldi	r24, 0x10	; 16
 50a:	e8 2e       	mov	r14, r24
 50c:	f1 2c       	mov	r15, r1
 50e:	81 2c       	mov	r8, r1
 510:	91 2c       	mov	r9, r1
 512:	a1 2c       	mov	r10, r1
 514:	68 e0       	ldi	r22, 0x08	; 8
 516:	b6 2e       	mov	r11, r22
 518:	40 e0       	ldi	r20, 0x00	; 0
 51a:	60 e0       	ldi	r22, 0x00	; 0
 51c:	70 e0       	ldi	r23, 0x00	; 0
 51e:	cb 01       	movw	r24, r22
 520:	27 01       	movw	r4, r14
 522:	0f 2c       	mov	r0, r15
 524:	00 0c       	add	r0, r0
 526:	66 08       	sbc	r6, r6
 528:	77 08       	sbc	r7, r7
 52a:	fe 01       	movw	r30, r28
 52c:	50 ed       	ldi	r21, 0xD0	; 208
 52e:	35 2e       	mov	r3, r21
 530:	31 0e       	add	r3, r17
 532:	29 e0       	ldi	r18, 0x09	; 9
 534:	23 15       	cp	r18, r3
 536:	70 f4       	brcc	.+28     	; 0x554 <strtol+0x150>
 538:	2f eb       	ldi	r18, 0xBF	; 191
 53a:	21 0f       	add	r18, r17
 53c:	2a 31       	cpi	r18, 0x1A	; 26
 53e:	18 f4       	brcc	.+6      	; 0x546 <strtol+0x142>
 540:	39 ec       	ldi	r19, 0xC9	; 201
 542:	33 2e       	mov	r3, r19
 544:	06 c0       	rjmp	.+12     	; 0x552 <strtol+0x14e>
 546:	2f e9       	ldi	r18, 0x9F	; 159
 548:	21 0f       	add	r18, r17
 54a:	2a 31       	cpi	r18, 0x1A	; 26
 54c:	18 f5       	brcc	.+70     	; 0x594 <strtol+0x190>
 54e:	29 ea       	ldi	r18, 0xA9	; 169
 550:	32 2e       	mov	r3, r18
 552:	31 0e       	add	r3, r17
 554:	23 2d       	mov	r18, r3
 556:	30 e0       	ldi	r19, 0x00	; 0
 558:	2e 15       	cp	r18, r14
 55a:	3f 05       	cpc	r19, r15
 55c:	dc f4       	brge	.+54     	; 0x594 <strtol+0x190>
 55e:	47 fd       	sbrc	r20, 7
 560:	16 c0       	rjmp	.+44     	; 0x58e <strtol+0x18a>
 562:	86 16       	cp	r8, r22
 564:	97 06       	cpc	r9, r23
 566:	a8 06       	cpc	r10, r24
 568:	b9 06       	cpc	r11, r25
 56a:	70 f0       	brcs	.+28     	; 0x588 <strtol+0x184>
 56c:	a3 01       	movw	r20, r6
 56e:	92 01       	movw	r18, r4
 570:	0e 94 30 03 	call	0x660	; 0x660 <__mulsi3>
 574:	63 0d       	add	r22, r3
 576:	71 1d       	adc	r23, r1
 578:	81 1d       	adc	r24, r1
 57a:	91 1d       	adc	r25, r1
 57c:	61 30       	cpi	r22, 0x01	; 1
 57e:	71 05       	cpc	r23, r1
 580:	81 05       	cpc	r24, r1
 582:	20 e8       	ldi	r18, 0x80	; 128
 584:	92 07       	cpc	r25, r18
 586:	10 f0       	brcs	.+4      	; 0x58c <strtol+0x188>
 588:	4f ef       	ldi	r20, 0xFF	; 255
 58a:	01 c0       	rjmp	.+2      	; 0x58e <strtol+0x18a>
 58c:	41 e0       	ldi	r20, 0x01	; 1
 58e:	21 96       	adiw	r28, 0x01	; 1
 590:	10 81       	ld	r17, Z
 592:	cb cf       	rjmp	.-106    	; 0x52a <strtol+0x126>
 594:	20 2f       	mov	r18, r16
 596:	21 70       	andi	r18, 0x01	; 1
 598:	c1 14       	cp	r12, r1
 59a:	d1 04       	cpc	r13, r1
 59c:	71 f0       	breq	.+28     	; 0x5ba <strtol+0x1b6>
 59e:	44 23       	and	r20, r20
 5a0:	29 f0       	breq	.+10     	; 0x5ac <strtol+0x1a8>
 5a2:	21 97       	sbiw	r28, 0x01	; 1
 5a4:	f6 01       	movw	r30, r12
 5a6:	d1 83       	std	Z+1, r29	; 0x01
 5a8:	c0 83       	st	Z, r28
 5aa:	07 c0       	rjmp	.+14     	; 0x5ba <strtol+0x1b6>
 5ac:	01 ff       	sbrs	r16, 1
 5ae:	19 c0       	rjmp	.+50     	; 0x5e2 <strtol+0x1de>
 5b0:	22 97       	sbiw	r28, 0x02	; 2
 5b2:	f6 01       	movw	r30, r12
 5b4:	d1 83       	std	Z+1, r29	; 0x01
 5b6:	c0 83       	st	Z, r28
 5b8:	14 c0       	rjmp	.+40     	; 0x5e2 <strtol+0x1de>
 5ba:	47 ff       	sbrs	r20, 7
 5bc:	12 c0       	rjmp	.+36     	; 0x5e2 <strtol+0x1de>
 5be:	22 23       	and	r18, r18
 5c0:	29 f0       	breq	.+10     	; 0x5cc <strtol+0x1c8>
 5c2:	60 e0       	ldi	r22, 0x00	; 0
 5c4:	70 e0       	ldi	r23, 0x00	; 0
 5c6:	80 e0       	ldi	r24, 0x00	; 0
 5c8:	90 e8       	ldi	r25, 0x80	; 128
 5ca:	04 c0       	rjmp	.+8      	; 0x5d4 <strtol+0x1d0>
 5cc:	6f ef       	ldi	r22, 0xFF	; 255
 5ce:	7f ef       	ldi	r23, 0xFF	; 255
 5d0:	8f ef       	ldi	r24, 0xFF	; 255
 5d2:	9f e7       	ldi	r25, 0x7F	; 127
 5d4:	22 e2       	ldi	r18, 0x22	; 34
 5d6:	30 e0       	ldi	r19, 0x00	; 0
 5d8:	30 93 d1 02 	sts	0x02D1, r19	; 0x8002d1 <errno+0x1>
 5dc:	20 93 d0 02 	sts	0x02D0, r18	; 0x8002d0 <errno>
 5e0:	09 c0       	rjmp	.+18     	; 0x5f4 <strtol+0x1f0>
 5e2:	22 23       	and	r18, r18
 5e4:	81 f0       	breq	.+32     	; 0x606 <strtol+0x202>
 5e6:	90 95       	com	r25
 5e8:	80 95       	com	r24
 5ea:	70 95       	com	r23
 5ec:	61 95       	neg	r22
 5ee:	7f 4f       	sbci	r23, 0xFF	; 255
 5f0:	8f 4f       	sbci	r24, 0xFF	; 255
 5f2:	9f 4f       	sbci	r25, 0xFF	; 255
 5f4:	46 2f       	mov	r20, r22
 5f6:	37 2f       	mov	r19, r23
 5f8:	28 2f       	mov	r18, r24
 5fa:	12 c0       	rjmp	.+36     	; 0x620 <strtol+0x21c>
 5fc:	40 e0       	ldi	r20, 0x00	; 0
 5fe:	30 e0       	ldi	r19, 0x00	; 0
 600:	20 e0       	ldi	r18, 0x00	; 0
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	0d c0       	rjmp	.+26     	; 0x620 <strtol+0x21c>
 606:	97 ff       	sbrs	r25, 7
 608:	f5 cf       	rjmp	.-22     	; 0x5f4 <strtol+0x1f0>
 60a:	82 e2       	ldi	r24, 0x22	; 34
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	90 93 d1 02 	sts	0x02D1, r25	; 0x8002d1 <errno+0x1>
 612:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <errno>
 616:	6f ef       	ldi	r22, 0xFF	; 255
 618:	7f ef       	ldi	r23, 0xFF	; 255
 61a:	8f ef       	ldi	r24, 0xFF	; 255
 61c:	9f e7       	ldi	r25, 0x7F	; 127
 61e:	ea cf       	rjmp	.-44     	; 0x5f4 <strtol+0x1f0>
 620:	64 2f       	mov	r22, r20
 622:	73 2f       	mov	r23, r19
 624:	82 2f       	mov	r24, r18
 626:	cd b7       	in	r28, 0x3d	; 61
 628:	de b7       	in	r29, 0x3e	; 62
 62a:	e1 e1       	ldi	r30, 0x11	; 17
 62c:	0c 94 8a 03 	jmp	0x714	; 0x714 <__epilogue_restores__+0x2>

00000630 <isxdigit>:
 630:	91 11       	cpse	r25, r1
 632:	0c 94 2d 03 	jmp	0x65a	; 0x65a <__ctype_isfalse>
 636:	80 53       	subi	r24, 0x30	; 48
 638:	8a 50       	subi	r24, 0x0A	; 10
 63a:	28 f0       	brcs	.+10     	; 0x646 <isxdigit+0x16>
 63c:	86 5c       	subi	r24, 0xC6	; 198
 63e:	80 62       	ori	r24, 0x20	; 32
 640:	81 56       	subi	r24, 0x61	; 97
 642:	86 50       	subi	r24, 0x06	; 6
 644:	b0 f7       	brcc	.-20     	; 0x632 <isxdigit+0x2>
 646:	08 95       	ret

00000648 <isspace>:
 648:	91 11       	cpse	r25, r1
 64a:	0c 94 2d 03 	jmp	0x65a	; 0x65a <__ctype_isfalse>
 64e:	80 32       	cpi	r24, 0x20	; 32
 650:	19 f0       	breq	.+6      	; 0x658 <isspace+0x10>
 652:	89 50       	subi	r24, 0x09	; 9
 654:	85 50       	subi	r24, 0x05	; 5
 656:	c8 f7       	brcc	.-14     	; 0x64a <isspace+0x2>
 658:	08 95       	ret

0000065a <__ctype_isfalse>:
 65a:	99 27       	eor	r25, r25
 65c:	88 27       	eor	r24, r24

0000065e <__ctype_istrue>:
 65e:	08 95       	ret

00000660 <__mulsi3>:
 660:	db 01       	movw	r26, r22
 662:	8f 93       	push	r24
 664:	9f 93       	push	r25
 666:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__muluhisi3>
 66a:	bf 91       	pop	r27
 66c:	af 91       	pop	r26
 66e:	a2 9f       	mul	r26, r18
 670:	80 0d       	add	r24, r0
 672:	91 1d       	adc	r25, r1
 674:	a3 9f       	mul	r26, r19
 676:	90 0d       	add	r25, r0
 678:	b2 9f       	mul	r27, r18
 67a:	90 0d       	add	r25, r0
 67c:	11 24       	eor	r1, r1
 67e:	08 95       	ret

00000680 <__udivmodsi4>:
 680:	a1 e2       	ldi	r26, 0x21	; 33
 682:	1a 2e       	mov	r1, r26
 684:	aa 1b       	sub	r26, r26
 686:	bb 1b       	sub	r27, r27
 688:	fd 01       	movw	r30, r26
 68a:	0d c0       	rjmp	.+26     	; 0x6a6 <__udivmodsi4_ep>

0000068c <__udivmodsi4_loop>:
 68c:	aa 1f       	adc	r26, r26
 68e:	bb 1f       	adc	r27, r27
 690:	ee 1f       	adc	r30, r30
 692:	ff 1f       	adc	r31, r31
 694:	a2 17       	cp	r26, r18
 696:	b3 07       	cpc	r27, r19
 698:	e4 07       	cpc	r30, r20
 69a:	f5 07       	cpc	r31, r21
 69c:	20 f0       	brcs	.+8      	; 0x6a6 <__udivmodsi4_ep>
 69e:	a2 1b       	sub	r26, r18
 6a0:	b3 0b       	sbc	r27, r19
 6a2:	e4 0b       	sbc	r30, r20
 6a4:	f5 0b       	sbc	r31, r21

000006a6 <__udivmodsi4_ep>:
 6a6:	66 1f       	adc	r22, r22
 6a8:	77 1f       	adc	r23, r23
 6aa:	88 1f       	adc	r24, r24
 6ac:	99 1f       	adc	r25, r25
 6ae:	1a 94       	dec	r1
 6b0:	69 f7       	brne	.-38     	; 0x68c <__udivmodsi4_loop>
 6b2:	60 95       	com	r22
 6b4:	70 95       	com	r23
 6b6:	80 95       	com	r24
 6b8:	90 95       	com	r25
 6ba:	9b 01       	movw	r18, r22
 6bc:	ac 01       	movw	r20, r24
 6be:	bd 01       	movw	r22, r26
 6c0:	cf 01       	movw	r24, r30
 6c2:	08 95       	ret

000006c4 <__muluhisi3>:
 6c4:	0e 94 a4 03 	call	0x748	; 0x748 <__umulhisi3>
 6c8:	a5 9f       	mul	r26, r21
 6ca:	90 0d       	add	r25, r0
 6cc:	b4 9f       	mul	r27, r20
 6ce:	90 0d       	add	r25, r0
 6d0:	a4 9f       	mul	r26, r20
 6d2:	80 0d       	add	r24, r0
 6d4:	91 1d       	adc	r25, r1
 6d6:	11 24       	eor	r1, r1
 6d8:	08 95       	ret

000006da <__prologue_saves__>:
 6da:	2f 92       	push	r2
 6dc:	3f 92       	push	r3
 6de:	4f 92       	push	r4
 6e0:	5f 92       	push	r5
 6e2:	6f 92       	push	r6
 6e4:	7f 92       	push	r7
 6e6:	8f 92       	push	r8
 6e8:	9f 92       	push	r9
 6ea:	af 92       	push	r10
 6ec:	bf 92       	push	r11
 6ee:	cf 92       	push	r12
 6f0:	df 92       	push	r13
 6f2:	ef 92       	push	r14
 6f4:	ff 92       	push	r15
 6f6:	0f 93       	push	r16
 6f8:	1f 93       	push	r17
 6fa:	cf 93       	push	r28
 6fc:	df 93       	push	r29
 6fe:	cd b7       	in	r28, 0x3d	; 61
 700:	de b7       	in	r29, 0x3e	; 62
 702:	ca 1b       	sub	r28, r26
 704:	db 0b       	sbc	r29, r27
 706:	0f b6       	in	r0, 0x3f	; 63
 708:	f8 94       	cli
 70a:	de bf       	out	0x3e, r29	; 62
 70c:	0f be       	out	0x3f, r0	; 63
 70e:	cd bf       	out	0x3d, r28	; 61
 710:	09 94       	ijmp

00000712 <__epilogue_restores__>:
 712:	2a 88       	ldd	r2, Y+18	; 0x12
 714:	39 88       	ldd	r3, Y+17	; 0x11
 716:	48 88       	ldd	r4, Y+16	; 0x10
 718:	5f 84       	ldd	r5, Y+15	; 0x0f
 71a:	6e 84       	ldd	r6, Y+14	; 0x0e
 71c:	7d 84       	ldd	r7, Y+13	; 0x0d
 71e:	8c 84       	ldd	r8, Y+12	; 0x0c
 720:	9b 84       	ldd	r9, Y+11	; 0x0b
 722:	aa 84       	ldd	r10, Y+10	; 0x0a
 724:	b9 84       	ldd	r11, Y+9	; 0x09
 726:	c8 84       	ldd	r12, Y+8	; 0x08
 728:	df 80       	ldd	r13, Y+7	; 0x07
 72a:	ee 80       	ldd	r14, Y+6	; 0x06
 72c:	fd 80       	ldd	r15, Y+5	; 0x05
 72e:	0c 81       	ldd	r16, Y+4	; 0x04
 730:	1b 81       	ldd	r17, Y+3	; 0x03
 732:	aa 81       	ldd	r26, Y+2	; 0x02
 734:	b9 81       	ldd	r27, Y+1	; 0x01
 736:	ce 0f       	add	r28, r30
 738:	d1 1d       	adc	r29, r1
 73a:	0f b6       	in	r0, 0x3f	; 63
 73c:	f8 94       	cli
 73e:	de bf       	out	0x3e, r29	; 62
 740:	0f be       	out	0x3f, r0	; 63
 742:	cd bf       	out	0x3d, r28	; 61
 744:	ed 01       	movw	r28, r26
 746:	08 95       	ret

00000748 <__umulhisi3>:
 748:	a2 9f       	mul	r26, r18
 74a:	b0 01       	movw	r22, r0
 74c:	b3 9f       	mul	r27, r19
 74e:	c0 01       	movw	r24, r0
 750:	a3 9f       	mul	r26, r19
 752:	70 0d       	add	r23, r0
 754:	81 1d       	adc	r24, r1
 756:	11 24       	eor	r1, r1
 758:	91 1d       	adc	r25, r1
 75a:	b2 9f       	mul	r27, r18
 75c:	70 0d       	add	r23, r0
 75e:	81 1d       	adc	r24, r1
 760:	11 24       	eor	r1, r1
 762:	91 1d       	adc	r25, r1
 764:	08 95       	ret

00000766 <_exit>:
 766:	f8 94       	cli

00000768 <__stop_program>:
 768:	ff cf       	rjmp	.-2      	; 0x768 <__stop_program>
